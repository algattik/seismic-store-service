variables:
  SDMS_OSDU_GCP_HELM_PACKAGE_CHARTS: "app/sdms/devops/gcp/deploy app/sdms/devops/gcp/configmap"
  SDMS_OSDU_GCP_SERVICE: seismic-store
  SDMS_OSDU_GCP_HELM_CONFIG_SERVICE: seismic-store-configmap
  SDMS_OSDU_GCP_HELM_CONFIG_DIR: "app/sdms/devops/gcp/configmap"
  SDMS_OSDU_GCP_HELM_DEPLOYMENT_SERVICE: seismic-store-deploy
  SDMS_OSDU_GCP_HELM_DEPLOYMENT_DIR: "app/sdms/devops/gcp/deploy"
  SDMS_OSDU_GCP_HELM_CONFIG_SERVICE_VARS: "--set data.domain=$DOMAIN"
  SDMS_OSDU_GCP_HELM_DEPLOYMENT_SERVICE_VARS: "--set data.image=$CI_REGISTRY_IMAGE/osdu-gcp-sdms:$CI_COMMIT_SHORT_SHA"
  GCP_SDMS_PREFIX: /api/seismic-store

.common: &common
  - gcloud auth activate-service-account --key-file $OSDU_GCP_DEPLOY_FILE
  - gcloud config set project $OSDU_GCP_PROJECT
  - gcloud container clusters get-credentials $OSDU_GCP_CLUSTER --zone $OSDU_GCP_ZONE --project $OSDU_GCP_PROJECT
  - curl https://get.helm.sh/helm-v3.5.4-linux-amd64.tar.gz -s -o helm.tgz; tar -zxf helm.tgz; mv linux-amd64/helm /usr/local/bin/

sdms_osdu-gcp-helm-charts:
  stage: build
  tags: ['osdu-small']
  image:
    name: alpine/helm:3.5.4
    entrypoint: [""]
  artifacts:
    paths:
      - helm-charts
  script:
    - mkdir -p helm-charts
    - sed -i 's|#{SDMS_PREFIX}#|'$GCP_SDMS_PREFIX'|' ${SDMS_OSDU_GCP_HELM_CONFIG_DIR}/values.yaml
    - sed -i 's|#{SDMS_PREFIX}#|'$GCP_SDMS_PREFIX'|' ${SDMS_OSDU_GCP_HELM_DEPLOYMENT_DIR}/values.yaml
    - helm package $SDMS_OSDU_GCP_HELM_PACKAGE_CHARTS --destination helm-charts
    - helm repo index --url "${CI_SERVER_URL}/${CI_PROJECT_PATH}/-/jobs/${CI_JOB_ID}/artifacts/raw" .
    - mv index.yaml helm-charts
  only:
    variables:
      - $GCP == 'true'
      - $OSDU_GCP == 'true'
      - $OSDU_GCP_HELM_PACKAGE_CHARTS
    changes:
      - devops/**/*
      - app/sdms/**/*
    refs:
      - branches
      - main
      - merge_requests

sdms_osdu-gcp-containerize-gitlab:
  stage: containerize
  needs: ["sdms_compile-and-unit-test"]
  tags: ["osdu-medium"]
  extends: .osdu-gcp-variables
  image: docker:19.03
  cache: {}
  allow_failure: true
  script:
    - cd app/$SDMS_SERVICE
    - sed -i 's|#{SDMS_PREFIX}#|'$GCP_SDMS_PREFIX'|' ./docs/api/openapi.osdu.yaml
    - export EXTRA_DOCKER_TAG=""; if [ "$CI_COMMIT_TAG" != "" ] ; then EXTRA_DOCKER_TAG="-t $CI_REGISTRY_IMAGE/osdu-gcp-sdms:$CI_COMMIT_TAG" ; elif [ "$CI_COMMIT_REF_NAME" = "master" ] ; then EXTRA_DOCKER_TAG="-t $CI_REGISTRY_IMAGE/osdu-gcp-sdms:latest" ; fi
    - docker build -t $CI_REGISTRY_IMAGE/osdu-gcp-sdms:$CI_COMMIT_SHORT_SHA $EXTRA_DOCKER_TAG --file docker/runtime.Dockerfile .
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE/osdu-gcp-sdms
  only:
    variables:
      - $OSDU_GCP == 'true'
    changes:
      - devops/**/*
      - app/sdms/**/*
    refs:
      - branches
      - main
      - merge_requests
      
sdms_osdu-gcp-deploy-configmap:
  extends: .osdu-gcp-variables
  image: gcr.io/google.com/cloudsdktool/cloud-sdk
  stage: deploy
  needs: ["sdms_compile-and-unit-test"]
  script:
    - *common
    - >
      helm upgrade $SDMS_OSDU_GCP_HELM_CONFIG_SERVICE $SDMS_OSDU_GCP_HELM_CONFIG_DIR
      --install
      --create-namespace
      --namespace=$OSDU_GCP_HELM_NAMESPACE
      --wait
      --history-max=3
      $SDMS_OSDU_GCP_HELM_CONFIG_SERVICE_VARS
  only:
    variables:
      - $OSDU_GCP == 'true'
    changes:
      - devops/**/*
      - app/sdms/**/*
    refs:
      - branches
      - main
      - merge_requests

sdms_osdu-gcp-deployment:
  extends: .osdu-gcp-variables
  image: gcr.io/google.com/cloudsdktool/cloud-sdk
  needs: ["sdms_osdu-gcp-containerize-gitlab", "sdms_osdu-gcp-deploy-configmap"]
  stage: deploy  
  cache: {}
  script:
    - *common
    - >
      helm upgrade $SDMS_OSDU_GCP_HELM_DEPLOYMENT_SERVICE $SDMS_OSDU_GCP_HELM_DEPLOYMENT_DIR
      --install
      --create-namespace
      --namespace=$OSDU_GCP_HELM_NAMESPACE
      --wait
      --history-max=3
      $SDMS_OSDU_GCP_HELM_DEPLOYMENT_SERVICE_VARS
    - echo ----- Verify Deployment -----
    - kubectl rollout status deployment.v1.apps/$SDMS_OSDU_GCP_SERVICE -n $OSDU_GCP_HELM_NAMESPACE --timeout=900s
    - POD=$(kubectl get pod --sort-by=.metadata.creationTimestamp -n $OSDU_GCP_HELM_NAMESPACE | grep $SDMS_OSDU_GCP_SERVICE | tail -1 | awk '{print $1}')
    - STATUS=$(kubectl wait -n $OSDU_GCP_HELM_NAMESPACE --for=condition=Ready pod/$POD --timeout=300s)
    - echo $STATUS
    - if [[ "$STATUS" != *"met"* ]]; then echo "POD didn't start correctly" ; exit 1 ; fi
  only:
    variables:
      - $OSDU_GCP == 'true'
    changes:
      - devops/**/*
      - app/sdms/**/*
    refs:
      - branches
      - main
      - merge_requests
      