variables:
  GCP_SDMS_PREFIX: /api/seismic-store/v3

sdms-osdu-gcp-helm-charts-master:
  extends: .osdu-gcp-helm-charts-master
  variables:
    SEISMIC_OSDU_GCP_HELM_CONFIG_DIR: "app/sdms/devops/gcp/configmap"
    SEISMIC_OSDU_GCP_HELM_DEPLOYMENT_DIR: "app/sdms/devops/gcp/deploy"

sdms-osdu-gcp-helm-charts-release:
  extends: .osdu-gcp-helm-charts-release
  variables:
    SEISMIC_OSDU_GCP_HELM_CONFIG_DIR: "app/sdms/devops/gcp/configmap"
    SEISMIC_OSDU_GCP_HELM_DEPLOYMENT_DIR: "app/sdms/devops/gcp/deploy"

sdms-osdu-gcp-containerize-gitlab:
  extends: .osdu-gcp-containerize-gitlab
  variables:
    SEISMIC_OSDU_GCP_DOCKERFILE_NAME: "devops/anthos/runtime.Dockerfile"
    SEISMIC_OSDU_GCP_SERVICE: seismic-store
    IMAGE_NAME: osdu-gcp-$SEISMIC_OSDU_GCP_SERVICE
  before_script:
    - cd app/$SDMS_SERVICE
    - sed -i 's|#{SDMS_PREFIX}#|'$GCP_SDMS_PREFIX'|' ./docs/api/openapi.osdu.yaml
  rules:
    - if: '$OSDU_GCP == "1" && $CI_COMMIT_BRANCH =~ /^release/'
      when: on_success
      changes:
        - devops/**/*
        - app/sdms/**/*
    - if: '$OSDU_GCP == "1" && $CI_COMMIT_TAG'
      when: on_success
      changes:
        - devops/**/*
        - app/sdms/**/*
    - if: '$OSDU_GCP == "1"'
      when: on_success
      changes:
        - devops/**/*
        - app/sdms/**/*

sdms-osdu-gcp-containerize-gcr:
  extends: .osdu-gcp-containerize-gcr
  variables:
    SEISMIC_OSDU_GCP_DOCKERFILE_NAME: "docker/runtime.Dockerfile"
    SEISMIC_OSDU_GCP_SERVICE: seismic-store
    IMAGE_NAME: osdu-gcp-$SEISMIC_OSDU_GCP_SERVICE
  before_script:
    - cat $OSDU_GCP_DEPLOY_FILE | docker login -u _json_key --password-stdin https://gcr.io
    - cd app/$SDMS_SERVICE
    - sed -i 's|#{SDMS_PREFIX}#|'$GCP_SDMS_PREFIX'|' ./docs/api/openapi.osdu.yaml
  rules:
    - if: '$OSDU_GCP == "1" && $CI_COMMIT_TAG'
      when: on_success
      changes:
        - devops/**/*
        - app/sdms/**/*

sdms-osdu-gcp-deploy-configmap:
  extends: .osdu-gcp-deploy-configmap
  needs: ["sdms-osdu-gcp-containerize-gitlab"]
  variables:
    SEISMIC_OSDU_GCP_HELM_CONFIG_SERVICE: seismic-store-configmap
    SEISMIC_OSDU_GCP_HELM_CONFIG_DIR: "app/sdms/devops/gcp/configmap"
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release/"
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - if: '$OSDU_GCP == "1"'
      when: on_success
      changes:
        - devops/**/*
        - app/sdms/**/*

sdms-osdu-gcp-dev2-deploy-configmap:
  extends: .osdu-gcp-dev2-deploy-configmap
  needs: ["sdms-osdu-gcp-containerize-gitlab"]
  variables:
    SEISMIC_OSDU_GCP_HELM_CONFIG_SERVICE: seismic-store-configmap
    SEISMIC_OSDU_GCP_HELM_CONFIG_DIR: "app/sdms/devops/gcp/configmap"
    SEISMIC_OSDU_GCP_SERVICE: seismic-store
    SEISMIC_OSDU_GCP_CHART: gcp-seismic-store-sdms-configmap #var used only in release and tagged pipelines
  rules:
    - if: '$OSDU_GCP == "1" && $CI_COMMIT_BRANCH =~ /^release/'
      when: on_success
      changes:
        - devops/**/*
        - app/sdms/**/*
    - if: '$OSDU_GCP == "1" && $CI_COMMIT_TAG'
      when: on_success
      changes:
        - devops/**/*
        - app/sdms/**/*

sdms-osdu-gcp-anthos-deploy-configmap:
  needs: ["sdms-osdu-gcp-containerize-gitlab"]
  extends: .osdu-gcp-anthos-deploy-configmap
  variables:
    SEISMIC_OSDU_GCP_HELM_CONFIG_SERVICE: seismic-store-configmap
    SEISMIC_OSDU_GCP_HELM_CONFIG_DIR: "app/sdms/devops/gcp/configmap"
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release/"
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - if: '$OSDU_GCP == "1"'
      when: on_success
      changes:
        - devops/**/*
        - app/sdms/**/*

sdms-osdu-gcp-deployment:
  extends: .osdu-gcp-deployment
  needs: ["sdms-osdu-gcp-containerize-gitlab", "sdms-osdu-gcp-deploy-configmap"]
  variables:
    SEISMIC_OSDU_GCP_HELM_DEPLOYMENT_SERVICE: seismic-store-deploy
    SEISMIC_OSDU_GCP_HELM_DEPLOYMENT_DIR: "app/sdms/devops/gcp/deploy"
    SEISMIC_OSDU_GCP_SERVICE: seismic-store
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release/"
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - if: '$OSDU_GCP == "1"'
      when: on_success
      changes:
        - devops/**/*
        - app/sdms/**/*

sdms-osdu-gcp-dev2-deploy-deployment:
  extends: .osdu-gcp-dev2-deploy-deployment
  needs: ["sdms-osdu-gcp-containerize-gitlab", "sdms-osdu-gcp-dev2-deploy-configmap"]
  variables:
    SEISMIC_OSDU_GCP_HELM_DEPLOYMENT_SERVICE: seismic-store-deploy
    SEISMIC_OSDU_GCP_HELM_DEPLOYMENT_DIR: "app/sdms/devops/gcp/deploy"
    SEISMIC_OSDU_GCP_SERVICE: seismic-store
    SEISMIC_OSDU_GCP_CHART: gcp-seismic-store-sdms-deploy #var used only in release and tagged pipelines
  rules:
    - if: '$OSDU_GCP == "1" && $CI_COMMIT_BRANCH =~ /^release/'
      when: on_success
      changes:
        - devops/**/*
        - app/sdms/**/*
    - if: '$OSDU_GCP == "1" && $CI_COMMIT_TAG'
      when: on_success
      changes:
        - devops/**/*
        - app/sdms/**/*

sdms-osdu-gcp-anthos-deploy-deployment:
  extends: .osdu-gcp-anthos-deploy-deployment
  needs: ["sdms-osdu-gcp-containerize-gitlab", "sdms-osdu-gcp-anthos-deploy-configmap"]
  variables:
    SEISMIC_OSDU_GCP_HELM_DEPLOYMENT_SERVICE: seismic-store-deploy
    SEISMIC_OSDU_GCP_HELM_DEPLOYMENT_DIR: "app/sdms/devops/gcp/deploy"
    SEISMIC_OSDU_GCP_SERVICE: seismic-store
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release/"
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - if: '$OSDU_GCP == "1"'
      when: on_success
      changes:
        - devops/**/*
        - app/sdms/**/*

sdms-osdu-gcp-test-python:
  variables:
    GOOGLE_CREDENTIALS: $OSDU_GCP_R3_INTEGRATION_TESTER
  extends: .osdu-gcp-test-python
  image: node
  needs: ["sdms-osdu-gcp-deployment"]
  allow_failure: true
  before_script:
    - cd app/$SDMS_SERVICE
  script:
    - apt-get update
    - apt-get install -y python3
    - apt-get install -y python3-pip
    - pip install google
    - pip install google-auth
    - pip install google-api-python-client
    - pip install google-auth-httplib2
    - pip install google-auth-oauthlib
    - export OSDU_GCP_AUDIENCE=$INTEGRATION_TEST_AUDIENCE
    - echo $GOOGLE_CREDENTIALS > google_credentials.json
    - export GOOGLE_APPLICATION_CREDENTIALS=google_credentials.json
    - svctoken=$(python3 ${CI_PROJECT_DIR}/devops/scripts/gcp_jwt_client.py)
    - echo $svctoken > /dev/null
    - npm install -g newman
    - chmod +x ./tests/e2e/run_e2e_tests.sh
    - ./tests/e2e/run_e2e_tests.sh --seistore-svc-url="https://${OSDU_GCP_UNIT_HOSTNAME}${GCP_SDMS_PREFIX}" --seistore-svc-api-key="NA" --user-idtoken="$OSDU_GCP_INTEGRATION_TESTER" --tenant="${OSDU_GCP_TENANT}" --admin-email="${OSDU_GCP_SEISTORE_ADMIN_EMAIL}" --datapartition="${DATA_PARTITION_ID}" --legaltag01="${OSDU_GCP_SEISTORE_LEGALTAG01}" --legaltag02="${OSDU_GCP_SEISTORE_LEGALTAG02}" --VCS-Provider="${ISGITLAB}"
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release/"
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - if: '$OSDU_GCP == "1"'
      when: on_success
      changes:
        - devops/**/*
        - app/sdms/**/*

sdms-osdu-gcp-dev2-test-python:
  variables:
    GOOGLE_CREDENTIALS: $OSDU_GCP_R3_INTEGRATION_TESTER
  extends: .osdu-gcp-dev2-test-python
  image: node
  needs: ["sdms-osdu-gcp-dev2-deploy-deployment"]
  allow_failure: true
  before_script:
    - cd app/$SDMS_SERVICE
  script:
    - apt-get update
    - apt-get install -y python3
    - apt-get install -y python3-pip
    - pip install google
    - pip install google-auth
    - pip install google-api-python-client
    - pip install google-auth-httplib2
    - pip install google-auth-oauthlib
    - export OSDU_GCP_AUDIENCE=$INTEGRATION_TEST_AUDIENCE
    - echo $GOOGLE_CREDENTIALS > google_credentials.json
    - export GOOGLE_APPLICATION_CREDENTIALS=google_credentials.json
    - svctoken=$(python3 ${CI_PROJECT_DIR}/devops/scripts/gcp_jwt_client.py)
    - echo $svctoken > /dev/null
    - npm install -g newman
    - chmod +x ./tests/e2e/run_e2e_tests.sh
    - ./tests/e2e/run_e2e_tests.sh --seistore-svc-url="https://${OSDU_GCP_UNIT_HOSTNAME}${GCP_SDMS_PREFIX}" --seistore-svc-api-key="NA" --user-idtoken="$OSDU_GCP_INTEGRATION_TESTER" --tenant="${OSDU_GCP_TENANT}" --admin-email="${OSDU_GCP_SEISTORE_ADMIN_EMAIL}" --datapartition="${DATA_PARTITION_ID}" --legaltag01="${OSDU_GCP_SEISTORE_LEGALTAG01}" --legaltag02="${OSDU_GCP_SEISTORE_LEGALTAG02}" --VCS-Provider="${ISGITLAB}"
  rules:
    - if: '$OSDU_GCP == "1" && $CI_COMMIT_BRANCH =~ /^release/'
      when: on_success
      changes:
        - devops/**/*
        - app/sdms/**/*
    - if: '$OSDU_GCP == "1" && $CI_COMMIT_TAG'
      when: on_success
      changes:
        - devops/**/*
        - app/sdms/**/*

sdms-osdu-gcp-anthos-test-python:
  extends: .osdu-gcp-anthos-test-python
  image: node
  needs: ["sdms-osdu-gcp-anthos-deploy-deployment"]
  allow_failure: true
  before_script:
    - cd app/$SDMS_SERVICE
  script:
    - apt-get update
    - apt-get install -yq jq curl
    - >
      OSDU_GCP_ID_TOKEN=$(curl --location --silent --request POST "${TEST_OPENID_PROVIDER_URL}/protocol/openid-connect/token"
      --header "data-partition-id: ${DATA_PARTITION_ID}"
      --header 'Content-Type: application/x-www-form-urlencoded'
      --data-urlencode grant_type=client_credentials
      --data-urlencode scope=openid
      --data-urlencode client_id=${TEST_OPENID_PROVIDER_CLIENT_ID}
      --data-urlencode client_secret=${TEST_OPENID_PROVIDER_CLIENT_SECRET} | jq -r .id_token)
    - npm install -g newman
    - chmod +x ./tests/e2e/run_e2e_tests.sh
    - >
      ./tests/e2e/run_e2e_tests.sh
      --seistore-svc-url="${OSDU_GCP_SDMS_HOST}${GCP_SDMS_PREFIX}" 
      --seistore-svc-api-key="NA"
      --user-idtoken="$OSDU_GCP_ID_TOKEN"
      --tenant="${OSDU_GCP_SDMS_TENANT}"
      --admin-email="${OSDU_GCP_SEISTORE_ADMIN_EMAIL}"
      --datapartition="${DATA_PARTITION_ID}"
      --legaltag01="${OSDU_GCP_SEISTORE_LEGALTAG01}"
      --legaltag02="${OSDU_GCP_SEISTORE_LEGALTAG02}"
      --VCS-Provider="${ISGITLAB}"
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release/"
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - if: '$OSDU_GCP == "1"'
      when: on_success
      changes:
        - devops/**/*
        - app/sdms/**/*
