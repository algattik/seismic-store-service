variables:
  #seismic store service variables
  ENV_VAULT: $AZURE_ENV_VAULT
  NAMESPACE: ddms-seismic
  SDMS_SERVICE_NAME: seismic-ddms
  SDMS_SIDECAR_NAME: seismic-ddms-sidecar
  AZURE_SDMS_PREFIX: /seistore-svc/api/v3
  E2E_SUBPROJECT: demosandbox08
  E2E_ADMIN_EMAIL: $AZURE_AD_USER_EMAIL
  E2E_DATA_PARTITION: $TENANT_NAME
  E2E_LEGALTAG01: $LEGAL_TAG
  E2E_LEGALTAG02: opendes-dps-integration-test-valid2-legal-tag
  E2E_TENANT: $TENANT_NAME

sdms_azure_containerize:
  extends: .azure_containerize
  needs:
    - sdms_compile-and-unit-test
  variables:
    SHA_IMAGE: ${SDMS_SERVICE_NAME}:${CI_COMMIT_SHA}
    SHA_SIDECAR_IMAGE: ${SDMS_SIDECAR_NAME}:${CI_COMMIT_SHA}
    SDMS_SIDECAR_IMAGE: $SDMS_SIDECAR_NAME
    LATEST_IMAGE: ${SDMS_SERVICE_NAME}:latest
    LATEST_SIDECAR_IMAGE: ${SDMS_SIDECAR_NAME}:latest
    RELEASE_IMAGE: release-${CI_COMMIT_TAG}:${SDMS_SERVICE_NAME}-${CI_COMMIT_TAG}
    RELEASE_SIDECAR_IMAGE: release-${CI_COMMIT_TAG}:${SDMS_SIDECAR_NAME}-${CI_COMMIT_TAG}
  script:
    - cd app/$SDMS_SERVICE
    - sed -i "/anthos/d" src/cloud/providers/index.ts
    - rm -Rf src/cloud/providers/anthos
    - sed -i "/google/d" src/cloud/providers/index.ts
    - rm -Rf src/cloud/providers/aws
    - sed -i "/aws/d" src/cloud/providers/index.ts
    - rm -Rf src/cloud/providers/google
    - sed -i "/ibm/d" src/cloud/providers/index.ts
    - rm -Rf src/cloud/providers/ibm
    - sed -i "/TestGoogle/d" tests/utest/cloud/test.ts
    - sed -i "/TestGCS/d" tests/utest/cloud/test.ts
    - rm -Rf tests/utest/cloud/google
    - rm -Rf tests/utest/dao
    - rm -Rf tests/utest/services
    - sed -i 's|#{SDMS_PREFIX}#|'$AZURE_SDMS_PREFIX'|' ./docs/api/openapi.osdu.yaml
    - jq "del(.prisma)" package.json > cleaned_package.json
    - mv cleaned_package.json package.json
    - export directoryToScan=$PWD
    - export currentDirectory=$PWD
    - chmod +x devops/scripts/detect_unused_packages.sh
    - devops/scripts/detect_unused_packages.sh
    - chmod +x devops/scripts/clean_package_json.sh
    - devops/scripts/clean_package_json.sh
    # Runtime image
    - docker build -t $SDMS_UTEST_RUNTIME_IMAGE --file devops/azure/runtime.Dockerfile .
    # Sidecar image
    - cd src/cloud/providers/azure/sidecar
    - docker build --build-arg PASS=$SIDECAR_CERT_PASS -t $SDMS_SIDECAR_IMAGE .
    # Gitlab Container Registry
    - cd ../../../../..
    # Runtime image
    - docker tag $SDMS_UTEST_RUNTIME_IMAGE $CI_REGISTRY_IMAGE/$SHA_IMAGE
    - docker push ${CI_REGISTRY_IMAGE}/$SHA_IMAGE
    - docker tag $CI_REGISTRY_IMAGE/$SHA_IMAGE $CI_REGISTRY_IMAGE/$LATEST_IMAGE
    - docker push ${CI_REGISTRY_IMAGE}/$LATEST_IMAGE
    - docker tag ${CI_REGISTRY_IMAGE}/$LATEST_IMAGE $CI_REGISTRY_IMAGE/${SDMS_PROJECT_NAME}azure:${CI_COMMIT_SHA}
    - docker push $CI_REGISTRY_IMAGE/${SDMS_PROJECT_NAME}azure:${CI_COMMIT_SHA}
    # Sidecar image
    - docker tag $SDMS_SIDECAR_IMAGE $CI_REGISTRY_IMAGE/$SHA_SIDECAR_IMAGE
    - docker push ${CI_REGISTRY_IMAGE}/$SHA_SIDECAR_IMAGE
    - docker tag $CI_REGISTRY_IMAGE/$SHA_SIDECAR_IMAGE $CI_REGISTRY_IMAGE/$LATEST_SIDECAR_IMAGE
    - docker push ${CI_REGISTRY_IMAGE}/$LATEST_SIDECAR_IMAGE
    # Azure Container Registry
    # Runtime image
    - az acr login -n $AZURE_REGISTRY
    - docker tag $SDMS_UTEST_RUNTIME_IMAGE ${AZURE_REGISTRY}.azurecr.io/$SHA_IMAGE
    - docker push ${AZURE_REGISTRY}.azurecr.io/$SHA_IMAGE
    - docker tag $CI_REGISTRY_IMAGE/$SHA_IMAGE ${AZURE_REGISTRY}.azurecr.io/$LATEST_IMAGE
    - docker push ${AZURE_REGISTRY}.azurecr.io/$LATEST_IMAGE
    - |
      if [ ! -z "$CI_COMMIT_TAG" ]; then
        docker tag $CI_REGISTRY_IMAGE/$SHA_IMAGE ${AZURE_REGISTRY}.azurecr.io/$RELEASE_IMAGE
        docker push ${AZURE_REGISTRY}.azurecr.io/$RELEASE_IMAGE
      fi
    # Sidecar image
    - az acr login -n $AZURE_REGISTRY
    - docker tag $SDMS_SIDECAR_IMAGE ${AZURE_REGISTRY}.azurecr.io/$SHA_SIDECAR_IMAGE
    - docker push ${AZURE_REGISTRY}.azurecr.io/$SHA_SIDECAR_IMAGE
    - docker tag $CI_REGISTRY_IMAGE/$SHA_SIDECAR_IMAGE ${AZURE_REGISTRY}.azurecr.io/$LATEST_SIDECAR_IMAGE
    - docker push ${AZURE_REGISTRY}.azurecr.io/$LATEST_SIDECAR_IMAGE
    - |
      if [ ! -z "$CI_COMMIT_TAG" ]; then
        docker tag $CI_REGISTRY_IMAGE/$SHA_SIDECAR_IMAGE ${AZURE_REGISTRY}.azurecr.io/$RELEASE_SIDECAR_IMAGE
        docker push ${AZURE_REGISTRY}.azurecr.io/$RELEASE_SIDECAR_IMAGE
      fi
  only:
    changes:
      - devops/**/*
      - app/sdms/**/*
    refs:
      - branches
      - merge_requests
      - tags

sdms_azure_container_scanning:
  extends: .azure_container_scanning
  needs:
    - sdms_azure_containerize
  variables:
    DOCKER_IMAGE: ${CI_REGISTRY_IMAGE}/${SDMS_PROJECT_NAME}azure:${CI_COMMIT_SHA}
  rules:
    - if: $AZURE == '1' && $ENFORCE_CONTAINER_SCANNING == 'true'
      allow_failure: false
      changes:
        - devops/**/*
        - app/sdms/**/*
    - if: $AZURE == '1'
      changes:
        - devops/**/*
        - app/sdms/**/*

sdms_azure_deploy:
  extends: .azure_deploy
  needs:
    - sdms_azure_containerize
    - azure_containerize_helm
  script:
    - curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash -s -- --version v3.9.1
    - helm show chart $HELM_CHART_OCI --version $HELM_CHART_OCI_VERSION
    # Uninstall if found in default namespace
    - helm uninstall seismic-store-service -n default --wait || echo [INFO] No seismic-store-service in default
    # Install/upgrade helm chart
    - >
      helm upgrade -i ${SDMS_SERVICE_NAME} $HELM_CHART_OCI --version $HELM_CHART_OCI_VERSION
      --set azure.tenant=${AZURE_TENANT_ID}
      --set azure.subscription=$AZURE_SUBSCRIPTION_ID
      --set azure.resourcegroup=$(az keyvault secret show --id https://${ENV_VAULT}.vault.azure.net/secrets/base-name-cr --query value -otsv)-rg
      --set azure.identity=$(az keyvault secret show --id https://${ENV_VAULT}.vault.azure.net/secrets/base-name-cr --query value -otsv)-osdu-identity
      --set azure.identity_id=$(az keyvault secret show --id https://${ENV_VAULT}.vault.azure.net/secrets/osdu-identity-id --query value -otsv)
      --set azure.keyvault.name=${ENV_VAULT}
      --set azure.acr=${AZURE_REGISTRY}.azurecr.io
      --set ingress.dns=${AZURE_DNS_NAME}
      --set configuration[0].config.DES_SERVICE_HOST="https://${AZURE_DNS_NAME}"
      --set configuration[0].container.image=${SDMS_SERVICE_NAME}
      --set configuration[0].container.tag=${CI_COMMIT_SHA}
      --set configuration[0].sidecar.container.image=${SDMS_SIDECAR_NAME}
      --set configuration[0].sidecar.container.tag=${CI_COMMIT_SHA}
      --create-namespace
      -n ${NAMESPACE} -f app/sdms/devops/azure/${SDMS_SERVICE_NAME}.osdu.values.yaml --wait --timeout 10m
    # Wait for service to be running to start
    - |
      kubectl rollout status deployment.v1.apps/${SDMS_SERVICE_NAME} -n ${NAMESPACE} --timeout=900s
      RESULT=$?
      if [ $RESULT == 0 ]; then
        echo "Rollout succeeded."
      else
        kubectl delete pod -l app=${SDMS_SERVICE_NAME} -n ${NAMESPACE}
        kubectl rollout status deployment.v1.apps/${SDMS_SERVICE_NAME} -n ${NAMESPACE} --timeout=900s
      fi
    - pod=$(kubectl -n ddms-seismic get po -l app=${SDMS_SERVICE_NAME} --no-headers=true -o custom-columns=":metadata.name" | tail -1)
    - status=$(kubectl wait -n ${NAMESPACE} --for=condition=Ready pod/$pod --timeout=600s)
    - if [[ "$status" != *"met"* ]]; then echo "${SDMS_SERVICE_NAME} pod didn't start correctly" ; exit 1 ; fi
  only:
    changes:
      - devops/**/*
      - app/sdms/**/*
    refs:
      - branches
      - merge_requests
      - tags

sdms_azure_test:
  image: node:18
  extends: .azure_test
  needs:
    - sdms_azure_deploy
  variables:
    AZURE_AD_APP_RESOURCE_ID: $AZURE_APP_ID
    AZURE_AD_TENANT_ID: $AZURE_TENANT_ID
    AZURE_TESTER_SERVICEPRINCIPAL_SECRET: $AZURE_PRINCIPAL_SECRET
    INTEGRATION_TESTER: $AZURE_PRINCIPAL_ID
  script:
    - apt-get update
    - apt-get install -y jq
    - cd app/$SDMS_SERVICE
    - sed -i "/anthos/d" src/cloud/providers/index.ts
    - rm -Rf src/cloud/providers/anthos
    - sed -i "/google/d" src/cloud/providers/index.ts
    - rm -Rf src/cloud/providers/aws
    - sed -i "/aws/d" src/cloud/providers/index.ts
    - rm -Rf src/cloud/providers/google
    - sed -i "/ibm/d" src/cloud/providers/index.ts
    - rm -Rf src/cloud/providers/ibm
    - sed -i 's|#{SDMS_PREFIX}#|'$AZURE_SDMS_PREFIX'|' ./docs/api/openapi.osdu.yaml
    - jq "del(.prisma)" package.json > cleaned_package.json
    - mv cleaned_package.json package.json
    - export directoryToScan=$PWD
    - export currentDirectory=$PWD
    - chmod +x devops/scripts/detect_unused_packages.sh
    - devops/scripts/detect_unused_packages.sh
    - chmod +x devops/scripts/clean_package_json.sh
    - devops/scripts/clean_package_json.sh
    - echo $svctoken > /dev/null
    - npm install -g husky
    - npm ci
    - chmod +x ./tests/e2e/run_e2e_tests.sh
    - ./tests/e2e/run_e2e_tests.sh --seistore-svc-url="https://${AZURE_DNS_NAME}${AZURE_SDMS_PREFIX}" --seistore-svc-api-key="NA" --user-idtoken="$svctoken" --tenant="${E2E_TENANT}" --admin-email="${E2E_ADMIN_EMAIL}" --datapartition="${E2E_DATA_PARTITION}" --legaltag01="${E2E_LEGALTAG01}" --legaltag02="${E2E_LEGALTAG02}" --VCS-Provider="${ISGITLAB}"  --subproject="${E2E_SUBPROJECT}"
    - $PWD
    - ls
    - |
      if [ -f "./tests/e2e/results/e2e_tests.html" ]
      then
        mv -f ./tests/e2e/results/e2e_tests.html \
          ./tests/e2e/results/e2e_tests_azure.html
      else
        echo "[ERROR] Test report was not created"
      fi
  artifacts:
    paths: 
      - app/$SDMS_SERVICE/tests/e2e/results/e2e_tests_azure.html
  only:
    changes:
      - devops/**/*
      - app/sdms/**/*
    refs:
      - branches
      - merge_requests
      - tags

sdms_azure_publish:
  needs:
    - sdms_azure_deploy
    - sdms_azure_containerize
    - azure_containerize_helm
  extends: .azure_publish
  variables:
    SHA_IMAGE: ${SDMS_SERVICE_NAME}:${CI_COMMIT_SHA}
    SHA_SIDECAR_IMAGE: ${SDMS_SIDECAR_NAME}:${CI_COMMIT_SHA}
  script:
   - crane copy ${AZURE_REGISTRY}.azurecr.io/$SHA_IMAGE ${DST_REGISTRY}.azurecr.io/$SDMS_SERVICE:${AZ_VER}
   - crane copy ${AZURE_REGISTRY}.azurecr.io/$SHA_SIDECAR_IMAGE ${DST_REGISTRY}.azurecr.io/${SDMS_SIDECAR_NAME}:${AZ_VER}
   - crane copy ${HELM_CHART_OCI#"oci://"}:${HELM_CHART_OCI_VERSION} ${DST_REGISTRY}.azurecr.io/helm/${HELM_CHART_SUBDIR}:${HELM_CHART_OCI_VERSION} || echo "[WARN] Not able to publish helm chart"
