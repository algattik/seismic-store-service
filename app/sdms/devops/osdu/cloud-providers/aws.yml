variables:
  #aws variables
  AWS_BUILD_SUBDIR: src/cloud/providers/aws/build-aws
  AWS_TEST_SUBDIR: tests
  AWS_CHART_SUBDIR: app/sdms/devops/aws/chart
  AWS_SERVICE: seismic-store
  AWS_SERVICE_NAMESPACE: osdu-seismic-ddms
  AWS_SERVICE_GATEWAY: osdu-services/osdu-gateway
  AWS_ENVIRONMENT: dev
  AWS_DEPLOY_TARGET: HELM
  AWS_EKS_DEPLOYMENT_NAME: os-seismic-store
  AWS_BUILDER_DOCKERFILE_PATH: src/cloud/providers/aws/build-aws/builder.Dockerfile
  AWS_RUNTIME_DOCKERFILE_PATH: src/cloud/providers/aws/build-aws/runtime.Dockerfile
  # skipping tests here. Using a local file to run tests
  AWS_SKIP_TESTS: "true"
  AWS_SDMS_PREFIX: /api/seismic-store/v3

sdms_aws-containerize:
  extends:
    - .aws-containerize
  needs: ['sdms_compile-and-unit-test']
  script:
    - |
      if [ -z $AWS_BUILDER_DOCKERFILE_PATH ] && [ -z $AWS_RUNTIME_DOCKERFILE_PATH ]; then
        echo Building BUILD_DIR/Dockerfile container
        docker build  -f $BUILD_DIR/Dockerfile -t $LOCAL_IMAGE_TAG .;
      else
        echo Building BUILDER->RUNTIME containers;
        cd app/$SDMS_SERVICE;
        sed -i "/anthos/d" src/cloud/providers/index.ts
        rm -Rf src/cloud/providers/anthos
        sed -i "/google/d" src/cloud/providers/index.ts
        rm -Rf src/cloud/providers/google
        sed -i "/ibm/d" src/cloud/providers/index.ts
        rm -Rf src/cloud/providers/ibm
        jq "del(.prisma)" package.json > cleaned_package.json
        mv cleaned_package.json package.json
        export directoryToScan=$PWD
        export currentDirectory=$PWD
        chmod +x devops/scripts/detect_unused_packages.sh
        devops/scripts/detect_unused_packages.sh
        chmod +x devops/scripts/clean_package_json.sh
        devops/scripts/clean_package_json.sh
        docker build -t builder:latest --file $AWS_BUILDER_DOCKERFILE_PATH .;
        docker build -t $LOCAL_IMAGE_TAG --file $AWS_RUNTIME_DOCKERFILE_PATH --build-arg docker_builder_image=builder .;
      fi
    # Push to the localcontainer registry
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $LOCAL_IMAGE_TAG
    # Push to Amazon's container registry
    - $(aws ecr get-login --no-include-email --region $AWS_ECR_REGION)
    - docker tag $LOCAL_IMAGE_TAG $AWS_IMAGE_TAG_BASE:$CI_COMMIT_SHA
    - docker tag $LOCAL_IMAGE_TAG $AWS_IMAGE_TAG_BASE:latest
    - docker push $AWS_IMAGE_TAG_BASE:$CI_COMMIT_SHA
    - docker push $AWS_IMAGE_TAG_BASE:latest
  only:
    changes:
      - devops/**/*
      - app/sdms/**/*
    refs:
      - branches
      - merge_requests

sdms_aws-update-helm:
  allow_failure: false
  extends:
    - .aws-update-helm
  needs: ['sdms_aws-containerize']
  image: $CI_REGISTRY/osdu/platform/deployment-and-operations/base-containers-aws/aws-deploy/aws-deploy:v1.0-helm3.8.2
  script:
    - cd app/$SDMS_SERVICE

    - aws ecr get-login-password --region us-east-1 | helm registry login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com
    - export KUBECONFIG=/tmp/kubeconfig-${RANDOM}.yaml
    - aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER_NAME --role-arn $EKS_CLUSTER_MGMT_ROLE
    - chmod 600 $KUBECONFIG

    - sed -i "s|__CHART_VERSION__|0.1.0|"  $CHART_DIR/Chart.yaml
    - sed -i "s|__VERSION__|0.1.0|"  $CHART_DIR/Chart.yaml
    - sed -i "s|__HELM_REPO__|$AWS_HELM_REPO|"  $CHART_DIR/Chart.yaml
    - sed -i "s|__CONTAINER__|$AWS_IMAGE_TAG_BASE:$CI_COMMIT_SHA|"  $CHART_DIR/values.yaml

    - helm dependency update $CHART_DIR
    - helm upgrade $AWS_EKS_DEPLOYMENT_NAME $CHART_DIR/ -i -n ${AWS_SERVICE_NAMESPACE:-osdu-services} --set global.resourcePrefix=$RESOURCE_PREFIX --set global.region=$AWS_REGION --set-string global.accountID=$AWS_ACCOUNT_ID --set global.policyBucket=$POLICY_BUCKET --set global.domainName=$DOMAIN --set global.allowOrigins=$ALLOWED_ORIGINS --set global.gatewayName=$GATEWAY --set global.cacheClusterEndpoint=${CACHE_CLUSTER_ENDPOINT} --set global.cacheClusterPort=${CACHE_CLUSTER_PORT} --set global.cacheClusterKey=${CACHE_CLUSTER_KEY} --set global.oauthJwksUri=${JWKS_URI}
    - kubectl -n ${AWS_SERVICE_NAMESPACE:-osdu-services} rollout status -w deployment/${AWS_EKS_DEPLOYMENT_NAME} --timeout=300s
  only:
    changes:
      - devops/**/*
      - app/sdms/**/*
    refs:
      - branches
      - merge_requests

sdms_aws-test-newman:
  allow_failure: true
  extends:
    - .aws
    - .aws_common_variables
    - .aws_variables
  stage: integration
  image: $CI_REGISTRY/osdu/platform/deployment-and-operations/base-containers-aws/aws-node/aws-node:v1.0-node14
  needs: [{ job: 'sdms_aws-update-helm', optional: true }]
  script:
    - cd app/$SDMS_SERVICE
    - pip3 install -r devops/aws/requirements.txt
    - svctoken=$(python3 ../../devops/scripts/aws_jwt_client.py)
    - >
      curl --insecure --location --request POST "$LEGAL_BASE_URL"'legaltags' \
        --header 'accept: application/json' \
        --header 'authorization: Bearer '"$svctoken" \
        --header 'content-type: application/json' \
        --header 'data-partition-id: opendes' \
        --data '{
          "name": "sdmstestlegaltag",
          "description": "test legal for Seismic DMS test",
          "properties": {
            "countryOfOrigin":["US"],
            "contractId":"A1234",
            "expirationDate":"2099-01-25",
            "dataType":"Public Domain Data",
            "originator":"MyCompany",
            "securityClassification":"Public",
            "exportClassification":"EAR99",
            "personalData":"No Personal Data"
          }
        }'
    - echo 'Register SeismicStore.tenants before Integration Tests ...'
    - >
      curl --insecure --location --request POST "$SEISMICSTORE_SVC_URL"'/tenant/opendes' \
        --header 'accept: application/json' \
        --header 'authorization: Bearer '"$svctoken" \
        --header 'content-type: application/json' \
        --header 'data-partition-id: opendes' \
        --data '{
          "default_acls": "users.datalake.admins@opendes.example.com",
          "esd": "opendes.example.com",
          "gcpid": "aws_project_id"
        }'
    - npm install -g newman
    - chmod +x ./tests/e2e/run_e2e_tests.sh
    - ./tests/e2e/run_e2e_tests.sh --seistore-svc-url=${AWS_BASE_URL}${AWS_SDMS_PREFIX} --seistore-svc-api-key="NA" --user-idtoken="$svctoken" --user-idtoken="$svctoken" --tenant=opendes --admin-email="${AWS_COGNITO_AUTH_PARAMS_USER}" --datapartition=opendes --legaltag01=opendes-sdmstestlegaltag --legaltag02=opendes-sdmstestlegaltag --VCS-Provider="${ISGITLAB}" --subproject=awsdemosubproject
  only:
    variables:
      -  $AWS == '1'
    changes:
      - devops/**/*
      - app/sdms/**/*
    refs:
      - branches
      - merge_requests
  artifacts:
    when: always
    paths:
      - app/$SDMS_SERVICE/$INTEGRATION_TEST_DIR
    expire_in: 14 days
