variables:
  #aws variables
  AWS_BUILD_SUBDIR: src/cloud/providers/aws/build-aws
  AWS_TEST_SUBDIR: tests
  AWS_SERVICE: seismic-store
  AWS_SERVICE_NAMESPACE: osdu-seismic-ddms
  AWS_ENVIRONMENT: dev
  AWS_DEPLOY_TARGET: EKS
  AWS_EKS_DEPLOYMENT_NAME: os-seismic-store
  AWS_BUILDER_DOCKERFILE_PATH: src/cloud/providers/aws/build-aws/builder.Dockerfile
  AWS_RUNTIME_DOCKERFILE_PATH: src/cloud/providers/aws/build-aws/runtime.Dockerfile
  # skipping tests here. Using a local file to run tests
  AWS_SKIP_TESTS: "true"
  AWS_SDMS_PREFIX: /api/seismic-store/v3

sdms_aws-containerize:
  extends:
    - .aws-containerize
  needs: ['sdms_compile-and-unit-test']
  script:
    - |
      if [ -z $AWS_BUILDER_DOCKERFILE_PATH ] && [ -z $AWS_RUNTIME_DOCKERFILE_PATH ]; then
        echo Building BUILD_DIR/Dockerfile container
        docker build  -f $BUILD_DIR/Dockerfile -t $LOCAL_IMAGE_TAG .;
      else
        echo Building BUILDER->RUNTIME containers;
        cd app/$SDMS_SERVICE;
        docker build -t builder:latest --file $AWS_BUILDER_DOCKERFILE_PATH .;
        docker build -t $LOCAL_IMAGE_TAG --file $AWS_RUNTIME_DOCKERFILE_PATH --build-arg docker_builder_image=builder .;
      fi
    # Push to the localcontainer registry
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $LOCAL_IMAGE_TAG
    # Push to Amazon's container registry
    - $(aws ecr get-login --no-include-email --region $AWS_ECR_REGION)
    - docker tag $LOCAL_IMAGE_TAG $AWS_IMAGE_TAG_BASE:$CI_COMMIT_SHA
    - docker tag $LOCAL_IMAGE_TAG $AWS_IMAGE_TAG_BASE:latest
    - docker push $AWS_IMAGE_TAG_BASE:$CI_COMMIT_SHA
    - docker push $AWS_IMAGE_TAG_BASE:latest
  only:
    changes:
      - devops/**/*
      - app/sdms/**/*
    refs:
      - branches
      - main
      - merge_requests

sdms_aws-update-eks:
  extends:
    - .aws-update-eks
  needs: ['sdms_aws-containerize']
  script:
    - cd app/$SDMS_SERVICE
    - export KUBECONFIG=/tmp/kubeconfig-${RANDOM}.yaml
    - export EKS_CLUSTER_MGMT_ROLE=$(aws cloudformation describe-stacks --region $AWS_REGION --stack-name $AWS_INFRA_STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='MainEKSClusterManagementRole'].OutputValue" --output text)
    - export EKS_CLUSTER_NAME=$(aws cloudformation describe-stacks --region $AWS_REGION --stack-name $AWS_INFRA_STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='MainEKSClusterName'].OutputValue" --output text)
    - echo Using Role -- $EKS_CLUSTER_MGMT_ROLE
    - aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER_NAME --role-arn $EKS_CLUSTER_MGMT_ROLE
    #Some CLIs require a restrictive KUBECONFIG file
    - chmod 644 $KUBECONFIG
    - export CONTAINER_IMAGE=`kubectl -n ${AWS_SERVICE_NAMESPACE:-osdu-services} get deployment/${AWS_EKS_DEPLOYMENT_NAME} -o jsonpath='{.spec.template.spec.containers[0].name}'`
    - kubectl -n ${AWS_SERVICE_NAMESPACE:-osdu-services} set image deployment/${AWS_EKS_DEPLOYMENT_NAME} $CONTAINER_IMAGE=$AWS_IMAGE_TAG_BASE:$CI_COMMIT_SHA
    - kubectl -n ${AWS_SERVICE_NAMESPACE:-osdu-services} rollout restart deployment/${AWS_EKS_DEPLOYMENT_NAME}
    - kubectl -n ${AWS_SERVICE_NAMESPACE:-osdu-services} rollout status -w deployment/${AWS_EKS_DEPLOYMENT_NAME} --timeout=300s
  only:
    changes:
      - devops/**/*
      - app/sdms/**/*
    refs:
      - branches
      - main
      - merge_requests
    
sdms_aws-test-newman:
  extends:
    - .aws
    - .aws_common_variables
    - .aws_variables
  stage: integration
  image: $CI_REGISTRY/osdu/platform/deployment-and-operations/base-containers-aws/aws-node/aws-node:v1.0-node14
  needs: [{ job: 'sdms_aws-update-eks', optional: true }]
  script:
    - cd app/$SDMS_SERVICE
    - pip3 install -r devops/aws/requirements.txt
    - svctoken=$(python3 ../../devops/scripts/aws_jwt_client.py)
    - > 
      curl --insecure --location --request POST "$LEGAL_BASE_URL"'legaltags' \
        --header 'accept: application/json' \
        --header 'authorization: Bearer '"$svctoken" \
        --header 'content-type: application/json' \
        --header 'data-partition-id: opendes' \
        --data '{
          "name": "sdmstestlegaltag",
          "description": "test legal for Seismic DMS test",
          "properties": {
            "countryOfOrigin":["US"],
            "contractId":"A1234",
            "expirationDate":"2099-01-25",
            "dataType":"Public Domain Data", 
            "originator":"MyCompany",
            "securityClassification":"Public",
            "exportClassification":"EAR99",
            "personalData":"No Personal Data"
          }
        }'
    - echo 'Register SeismicStore.tenants before Integration Tests ...'
    - >
      curl --insecure --location --request POST "$SEISMICSTORE_SVC_URL"'/tenant/opendes' \
        --header 'accept: application/json' \
        --header 'authorization: Bearer '"$svctoken" \
        --header 'content-type: application/json' \
        --header 'data-partition-id: opendes' \
        --data '{
          "default_acls": "users.datalake.admins@opendes.example.com",
          "esd": "opendes.example.com",
          "gcpid": "aws_project_id"
        }'
    - npm install -g newman
    - chmod +x ./tests/e2e/run_e2e_tests.sh
    - ./tests/e2e/run_e2e_tests.sh --seistore-svc-url=${AWS_BASE_URL}${AWS_SDMS_PREFIX} --seistore-svc-api-key="NA" --user-idtoken="$svctoken" --user-idtoken="$svctoken" --tenant=opendes --admin-email="${AWS_COGNITO_AUTH_PARAMS_USER}" --datapartition=opendes --legaltag01=opendes-sdmstestlegaltag --legaltag02=opendes-sdmstestlegaltag --VCS-Provider="${ISGITLAB}" --subproject=awsdemosubproject
  only:
    variables:
      -  $AWS == 'true'
    changes:
      - devops/**/*
      - app/sdms/**/*
    refs:
      - branches
      - main
      - merge_requests
  artifacts:
    when: always
    paths:
      - app/$SDMS_SERVICE/$INTEGRATION_TEST_DIR
    expire_in: 14 days
    