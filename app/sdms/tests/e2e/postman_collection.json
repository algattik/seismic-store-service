{
	"info": {
		"_postman_id": "9e0ad568-3090-4ab9-8796-4b25f448230f",
		"name": "SDMS-E2E ver.M18 - Release 0.21",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17166992"
	},
	"item": [
		{
			"name": "general",
			"item": [
				{
					"name": "STATUS SET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.environment.set('serviceCloudProvider', pm.response.headers.get('Service-Provider'));",
									"});",
									"",
									"pm.environment.set('appAdminEmail', pm.environment.get('adminEmail'));",
									"if(pm.environment.get('serviceCloudProvider') !== 'google' && pm.environment.get('serviceCloudProvider') !== 'ibm') {",
									"    pm.environment.set('adminEmail', pm.environment.get('adminEmail').split('@')[0]);",
									"};",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"service OK\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function makeID_general(length) {\r",
									"   var result           = '';\r",
									"   var characters       = 'abcdefghijklmnopqrstuvwxyz';\r",
									"   var charactersLength = characters.length;\r",
									"   for ( var i = 0; i < length; i++ ) {\r",
									"      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"   }\r",
									"   return result;\r",
									"}\r",
									"\r",
									"// if subproject name is not provided then create random name, else keep subproject alive\r",
									"if (!pm.environment.get(\"subproject\")) {\r",
									"    postman.setEnvironmentVariable(\"subproject\", makeID_general(16));\r",
									"    postman.setEnvironmentVariable(\"hold_subproject\", \"false\")\r",
									"} else {\r",
									"    postman.setEnvironmentVariable(\"hold_subproject\", \"true\")\r",
									"}\r",
									"\r",
									"// Create function that provide known amount of retries\r",
									"if (pm.environment.get(\"maxAmountOfRetries\") == null) {\r",
									"    postman.setEnvironmentVariable(\"maxAmountOfRetries\", 4);\r",
									"}\r",
									"\r",
									"Object.prototype.retryOnFailure = function(postman, failureCode, requestName, numberOfRetrys) {\r",
									"        var key = requestName + '_counter';\r",
									"        var execCounter = postman.getEnvironmentVariable(key) || 1;\r",
									"        var sleepDuration = 1000;\r",
									"        var waitUntilTime = new Date().getTime() + sleepDuration;\r",
									"        if (execCounter <= numberOfRetrys) {\r",
									"            while (new Date().getTime() < waitUntilTime) {\r",
									"                // Do Nothing -> Wait\r",
									"            }\r",
									"            console.log('Retrying: ' + requestName + '\\nGot: ' + failureCode + '\\nWaiting: ' + sleepDuration / 1000 + 'sec  \\nRetry Number: ' + execCounter + ' of max ' + numberOfRetrys);\r",
									"            execCounter++;\r",
									"            postman.setEnvironmentVariable(key, execCounter);\r",
									"            postman.setNextRequest(requestName);\r",
									"        } else {\r",
									"            console.log('Max amount of retries is reached after ' + numberOfRetrys + ' attempts ');\r",
									"            console.log('Status code is ' + failureCode);\r",
									"\r",
									"            pm.test(\"Internal Server Error\", function(){\r",
									"                pm.expect.fail(\"Test \" + requestName + \" failed with response code \" + failureCode);\r",
									"            });\r",
									"\r",
									"            postman.clearEnvironmentVariable(key);\r",
									"        }\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/svcstatus",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"svcstatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "ACCESS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Body matches string\", function () {",
									"        pm.expect(jsonData.status).to.eql(\"running\");",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/svcstatus/access",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"svcstatus",
								"access"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "tenant",
			"item": [
				{
					"name": "TENANT GET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Tenant details\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"tenant\"));",
									"        pm.expect(jsonData.gcpid).to.exist;",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/tenant/{{tenant}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"tenant",
								"{{tenant}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET sdpath",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Body is correct\", function () {",
									"        pm.response.to.have.body(\"sd://\" + pm.environment.get(\"datapartition\"));",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}",
								"type": "text"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/tenant/sdpath?datapartition={{datapartition}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"tenant",
								"sdpath"
							],
							"query": [
								{
									"key": "datapartition",
									"value": "{{datapartition}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "subproject",
			"item": [
				{
					"name": "SUBPROJECT REGISTER NEGATIVE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 400) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function makeID_dataset(length) {\r",
									"   var result           = '';\r",
									"   var characters       = 'abcdefghijklmnopqrstuvwxyz';\r",
									"   var charactersLength = characters.length;\r",
									"   for ( var i = 0; i < length - 1; i++ ) {\r",
									"      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"   }\r",
									"   return result;\r",
									"}\r",
									"\r",
									"postman.setEnvironmentVariable(\"subprojectLongName\", makeID_dataset(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "ltag",
								"value": "{{legaltag01}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"admin\": \"{{adminEmail}}\",\n\t\"storage_class\": \"REGIONAL\",\n\t\"storage_location\": \"US-CENTRAL1\"\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/subproject/tenant/{{tenant}}/subproject/{{subprojectLongName}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"subproject",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subprojectLongName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SUBPROJECT DELETE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if ( (responseCode.code != 200) === (responseCode.code != 404) ) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200 or 404\", function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([200,404]);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/subproject/tenant/{{tenant}}/subproject/{{subprojectLongName}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"subproject",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subprojectLongName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SUBPROJECT GET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if ( (responseCode.code != 200) === (responseCode.code != 404) ) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else if (responseCode.code === 404) {",
									"    pm.test(\"Status code is 404\", function () {",
									"        pm.response.to.have.status(404);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"",
									"    postman.setNextRequest(\"SUBPROJECT REGISTER default admin\");",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"subproject\"))",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"",
									"    postman.setNextRequest(\"SUBPROJECT LIST\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/subproject/tenant/{{tenant}}/subproject/{{subproject}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"subproject",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SUBPROJECT REGISTER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Subproject created\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"subproject\"));",
									"        pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"        pm.expect(jsonData.ltag).to.exist;",
									"        pm.expect(jsonData.gcs_bucket).to.exist;",
									"        if(pm.environment.get('serviceCloudProvider') === 'google') {",
									"            pm.expect(jsonData.storage_class).to.eql('REGIONAL');",
									"            pm.expect(jsonData.storage_location).to.eql('US-CENTRAL1');",
									"        }",
									"    });",
									"    ",
									"    postman.setNextRequest(\"SUBPROJECT GET NEW\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "ltag",
								"value": "{{legaltag01}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"admin\": \"{{adminEmail}}\",\n\t\"storage_class\": \"REGIONAL\",\n\t\"storage_location\": \"US-CENTRAL1\"\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/subproject/tenant/{{tenant}}/subproject/{{subproject}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"subproject",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SUBPROJECT REGISTER default admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if ( (responseCode.code != 200) && (responseCode.code != 409)) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200 or 409\", function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([200,409]);",
									"    });",
									"",
									"    if (pm.response.code === 200) {",
									"        pm.test(\"Subproject created\", function () {",
									"            var jsonData = pm.response.json();",
									"            pm.expect(jsonData.name).to.eql(pm.environment.get(\"subproject\"));",
									"            pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"            pm.expect(jsonData.ltag).to.exist;",
									"            pm.expect(jsonData.gcs_bucket).to.exist;",
									"        });",
									"    };",
									"    ",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "ltag",
								"value": "{{legaltag01}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"storage_class\": \"REGIONAL\",\n\t\"storage_location\": \"US-CENTRAL1\"\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/subproject/tenant/{{tenant}}/subproject/{{subproject}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"subproject",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SUBPROJECT GET NEW",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Validate Subproject Details\", function () {",
									"        var child = Object.keys(jsonData);",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"subproject\"));",
									"        pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"        pm.expect(jsonData.ltag).to.eql(pm.environment.get(\"legaltag01\"));",
									"        pm.expect(jsonData.gcs_bucket).to.exist;",
									"        if(pm.environment.get('serviceCloudProvider') === 'google') {",
									"            pm.expect(jsonData.storage_class).to.eql('REGIONAL');",
									"            pm.expect(jsonData.storage_location).to.eql('US-CENTRAL1');",
									"        }",
									"    });",
									"    ",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/subproject/tenant/{{tenant}}/subproject/{{subproject}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"subproject",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SUBPROJECT LIST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Find the subproject in list\", function () {",
									"        if(pm.environment.get('serviceCloudProvider') !== 'ibm') { ",
									"            var subproject = _.find(pm.response.json(), { ",
									"                name: pm.environment.get(\"subproject\")",
									"            });",
									"            pm.expect(subproject.name).to.eql(pm.environment.get(\"subproject\"));",
									"        };",
									"    });",
									"",
									"    pm.test('Subproject details are present in response', () => {",
									"        _.each(pm.response.json(), (item) => {",
									"            pm.expect(item).to.have.property('gcs_bucket');",
									"            pm.expect(item).to.have.property('tenant');",
									"            pm.expect(item).to.have.property('name');",
									"            if(pm.environment.get('serviceCloudProvider') === 'google') {",
									"                pm.expect(item).to.have.property('storage_location');",
									"                pm.expect(item).to.have.property('storage_class');",
									"            } ",
									"        });",
									"        pm.expect(jsonData.length).to.be.above(0);",
									"    });",
									"    ",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/subproject/tenant/{{tenant}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"subproject",
								"tenant",
								"{{tenant}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SUBPROJECT PATCH",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Subproject created\", function () {",
									"        var child = Object.keys(jsonData);",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"subproject\"));",
									"        pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"        pm.expect(jsonData.ltag).to.eql(pm.environment.get(\"legaltag02\"));",
									"        pm.expect(jsonData.gcs_bucket).to.exist;",
									"        if(pm.environment.get('serviceCloudProvider') === 'google') {",
									"            pm.expect(jsonData.storage_class).to.eql('REGIONAL');",
									"            pm.expect(jsonData.storage_location).to.eql('US-CENTRAL1');",
									"        }",
									"    });",
									"    ",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}",
									"",
									"var sleepDuration = 15 * 1000;",
									"var waitUntilTime = new Date().getTime() + sleepDuration;",
									"while (new Date().getTime() < waitUntilTime) {",
									"    // Do Nothing -> Wait",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "ltag",
								"value": "{{legaltag02}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/subproject/tenant/{{tenant}}/subproject/{{subproject}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"subproject",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SUBPROJECT PATCH 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Subproject created\", function () {",
									"        var child = Object.keys(jsonData);",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"subproject\"));",
									"        pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"        pm.expect(jsonData.ltag).to.eql(pm.environment.get(\"legaltag01\"));",
									"        pm.expect(jsonData.gcs_bucket).to.exist;",
									"        if(pm.environment.get('serviceCloudProvider') === 'google') {",
									"            pm.expect(jsonData.storage_class).to.eql('REGIONAL');",
									"            pm.expect(jsonData.storage_location).to.eql('US-CENTRAL1');",
									"        }",
									"    });",
									"    ",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}",
									"",
									"var sleepDuration = 15 * 1000;",
									"var waitUntilTime = new Date().getTime() + sleepDuration;",
									"while (new Date().getTime() < waitUntilTime) {",
									"    // Do Nothing -> Wait",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "ltag",
								"value": "{{legaltag01}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/subproject/tenant/{{tenant}}/subproject/{{subproject}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"subproject",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "datasets",
			"item": [
				{
					"name": "STATUS SET DATASETS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('Dataset variables are initialized for datasets folder');",
									"",
									"postman.setEnvironmentVariable('execCounter', 1)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function makeID_dataset(length) {\r",
									"   var result           = '';\r",
									"   var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"   var charactersLength = characters.length;\r",
									"   for ( var i = 0; i < length - 1; i++ ) {\r",
									"      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"   }\r",
									"   return 'W' + result;\r",
									"}\r",
									"\r",
									"postman.setEnvironmentVariable(\"dsx01\", makeID_dataset(16) + \"_.ds-x\");\r",
									"postman.setEnvironmentVariable(\"dsx02\", makeID_dataset(16) + \"_.ds-x\");\r",
									"var path = \"/\" + makeID_dataset(8) + \"/\" + makeID_dataset(4) + \"/\" + makeID_dataset(4) + \"/\"\r",
									"postman.setEnvironmentVariable(\"testPath\", path);\r",
									"postman.setEnvironmentVariable(\"testPathEncoded\", encodeURIComponent(path));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/svcstatus",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"svcstatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET REGISTER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check content type\", function () {",
									"        pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"    });",
									"",
									"    pm.test(\"Dataset name\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get('dsx01'));",
									"    });",
									"",
									"    pm.test(\"tenant\", function () {",
									"        pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"    });",
									"",
									"    pm.test(\"subproject\", function () {",
									"        pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"    });",
									"",
									"    pm.test(\"path\", function () {",
									"        pm.expect(jsonData.path).to.eql(pm.environment.get(\"testPath\"));",
									"    });",
									"",
									"    pm.test(\"ltag\", function () {",
									"        pm.expect(jsonData.ltag).to.eql(pm.environment.get(\"legaltag01\"));",
									"    });",
									"",
									"    pm.test(\"Dates are present\", function () {",
									"        pm.expect(jsonData.created_date).to.exist;",
									"        pm.expect(jsonData.last_modified_date).to.exist;",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(1);",
									"    });",
									"",
									"    pm.test(\"Check gtag\", function () {",
									"        pm.expect(jsonData.gtags.length).to.eql(1);",
									"        pm.expect(jsonData.gtags[0]).to.eql(\"tagA\");",
									"    }); ",
									"    ",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"gtags\": [\r\n    \"tagA\"\r\n  ]\r\n} \r\n \r\n"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET REGISTER 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check content type\", function () {",
									"        pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"    });",
									"",
									"    pm.test(\"Dataset name\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get('dsx02'));",
									"    });",
									"",
									"    pm.test(\"tenant\", function () {",
									"        pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"    });",
									"",
									"    pm.test(\"subproject\", function () {",
									"        pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"    });",
									"",
									"    pm.test(\"path\", function () {",
									"        pm.expect(jsonData.path).to.eql(pm.environment.get(\"testPath\"));",
									"    });",
									"",
									"    pm.test(\"ltag\", function () {",
									"        pm.expect(jsonData.ltag).to.eql(pm.environment.get('legaltag01'));",
									"    });",
									"",
									"    pm.test(\"Dates are present\", function () {",
									"        pm.expect(jsonData.created_date).to.exist;",
									"        pm.expect(jsonData.last_modified_date).to.exist;",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(1);",
									"    });",
									"",
									"    pm.test(\"Check gtag\", function () {",
									"        pm.expect(jsonData.gtags.length).to.eql(2);",
									"        pm.expect(jsonData.gtags[1]).to.eql(\"tagB\");",
									"    });",
									"",
									"    function makeID(length) {",
									"        var result           = '';",
									"        var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"        var charactersLength = characters.length;",
									"        for ( var i = 0; i < length - 1; i++ ) {",
									"            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"        }",
									"        return 'W' + result;",
									"    }",
									"",
									"    // datasets with  paths that match the regex /^[\\/A-Za-z0-9_-]*$/g ",
									"    const dataSetsWithPaths = [ {",
									"        \"name\": makeID(16),",
									"        \"path\": \"/a0909090909/b23242/c32423\"",
									"    }, {",
									"        \"name\": makeID(16),",
									"        \"path\": \"/AB/CD/EF\",",
									"    },",
									"    {",
									"        \"name\": makeID(16),",
									"        \"path\": \"/0A0B/0C0D/0E0F0000000\"",
									"    }, {",
									"        \"name\": makeID(16),",
									"        \"path\": \"/_0A_B/_2C_3D/4-z_A-0000\"",
									"    }",
									"    ]",
									"",
									"    pm.environment.set(\"datasetdsx02sbit\", jsonData.sbit);",
									"    pm.environment.set(\"datasetsWithPaths\", JSON.stringify(dataSetsWithPaths));",
									"    pm.environment.set(\"datasetName\", makeID(16));",
									"    pm.environment.set(\"datasetPath\", \"/ab/cd/ef/gh/ij/000/001\");",
									"    ",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1);",
									"    ",
									"    postman.setNextRequest('DATASET REGISTER USING AN ALLOWED HIERARCHY PATH');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"gtags\": [\r\n    \"tagA\",\r\n    \"tagB\"\r\n  ]\r\n} \r\n \r\n"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx02}}?path={{testPathEncoded}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx02}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET REGISTER USING AN ALLOWED HIERARCHY PATH",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set('datasetWithPathSbit', jsonData.sbit)",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"",
									"    postman.setNextRequest('PATCHING DATASET USING AN ALLOWED HIERARCHY PATH');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"type": "text",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{datasetName}}?path={{datasetPath}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{datasetName}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{datasetPath}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCHING DATASET USING AN ALLOWED HIERARCHY PATH",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{datasetName}}?path={{datasetPath}}&close={{datasetWithPathSbit}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{datasetName}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{datasetPath}}"
								},
								{
									"key": "close",
									"value": "{{datasetWithPathSbit}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET DELETE USING AN ALLOWED HIERARCHY PATH",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if ( (responseCode.code != 200) === (responseCode.code != 404) ) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200 or 404\", function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([200,404]);",
									"    });",
									"",
									"    var datasets = JSON.parse(pm.environment.get(\"datasetsWithPaths\"));",
									"    var dataset =  datasets.shift();",
									"",
									"    if (dataset) {",
									"        pm.environment.set(\"datasetName\", dataset.name);",
									"        pm.environment.set(\"datasetPath\", dataset.path);",
									"        pm.environment.set(\"datasetsWithPaths\", JSON.stringify(datasets)); ",
									"        ",
									"        // Reset environment variables if _.retryOnFailure function was used before",
									"        var key = request.name + '_counter';",
									"        pm.environment.unset(key);",
									"        postman.setEnvironmentVariable('execCounter', 1);",
									"        ",
									"        postman.setNextRequest('DATASET REGISTER USING AN ALLOWED HIERARCHY PATH');",
									"",
									"    } else {",
									"        pm.environment.unset(\"datasetName\");",
									"        pm.environment.unset(\"datasetPath\");",
									"        pm.environment.unset('datasetWithPathSbit')",
									"        pm.environment.unset('datasetsWithPaths')",
									"        ",
									"        // Reset environment variables if _.retryOnFailure function was used before",
									"        var key = request.name + '_counter';",
									"        pm.environment.unset(key);",
									"        postman.setEnvironmentVariable('execCounter', 1);",
									"",
									"        postman.setNextRequest('DATASET DSX01 GET')",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{datasetName}}?path={{datasetPath}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{datasetName}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{datasetPath}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET DSX01 GET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check content type\", function () {",
									"        pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"    });",
									"",
									"    pm.test(\"Dataset name\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get('dsx01'));",
									"    });",
									"",
									"    pm.test(\"tenant\", function () {",
									"        pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"    });",
									"",
									"    pm.test(\"subproject\", function () {",
									"        pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"    });",
									"",
									"    pm.test(\"path\", function () {",
									"        pm.expect(jsonData.path).to.eql(pm.environment.get(\"testPath\"));",
									"    });",
									"",
									"    pm.test(\"ltag\", function () {",
									"        pm.expect(jsonData.ltag).to.eql(pm.environment.get('legaltag01'));",
									"    });",
									"",
									"    pm.test(\"Dates are present\", function () {",
									"        pm.expect(jsonData.created_date).to.exist;",
									"        pm.expect(jsonData.last_modified_date).to.exist;",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(1);",
									"    });",
									"",
									"    pm.test(\"sbit\", function () {",
									"        postman.setEnvironmentVariable(\"sbit\", jsonData.sbit);",
									"    });",
									"",
									"    pm.test(\"gcsurl\", () => {",
									"        postman.setEnvironmentVariable(\"gcsBucketName\", jsonData.gcsurl.split('/')[0]);",
									"        postman.setEnvironmentVariable(\"gcsObjectPrefix\", jsonData.gcsurl.split('/')[1]);",
									"    });",
									"",
									"    pm.test(\"Check gtag\", function () {",
									"        pm.expect(jsonData.gtags.length).to.eql(1);",
									"        pm.expect(jsonData.gtags[0]).to.eql(\"tagA\");",
									"    });",
									"",
									"    pm.test(\"ctag\", function () {",
									"        postman.setEnvironmentVariable(\"ctag\", jsonData.ctag);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET LOCK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(1);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}/lock?path={{testPathEncoded}}&openmode=write&wid={{sbit}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}",
								"lock"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								},
								{
									"key": "openmode",
									"value": "write"
								},
								{
									"key": "wid",
									"value": "{{sbit}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET LIST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check content type\", function () {",
									"        pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"    });",
									"",
									"    pm.test(\"Data List\", function () {",
									"        pm.expect(jsonData.length).gte(1);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET DSX01 CHECK CTAG TRUE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Validate ctag\", function () {",
									"        pm.expect(pm.response.json()).eql(true);",
									"    });",
									"    ",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}/ctagcheck?path={{testPathEncoded}}&ctag={{ctag}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}",
								"ctagcheck"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								},
								{
									"key": "ctag",
									"value": "{{ctag}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET PATCH",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(0);",
									"    });",
									"",
									"    pm.test(\"Metadata is saved\", function () {",
									"        pm.expect(jsonData.metadata.k1).to.eql('v1');",
									"        pm.expect(jsonData.metadata.k3.k4).to.eql('v4');",
									"    });",
									"",
									"    pm.test(\"Filemetadata is added\", function () {",
									"        pm.expect(jsonData.filemetadata).to.exist;",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"metadata\": { \"k1\": \"v1\", \"k2\": \"v2\", \"k3\": { \"k4\": \"v4\" } },\n\t\"filemetadata\": {\"type\": \"GENERIC\", \"size\": 1021 },\n\t\"last_modified_date\": true\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded}}&close={{sbit}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								},
								{
									"key": "close",
									"value": "{{sbit}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET DSX01 CHECK CTAG FALSE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Validate ctag\", function () {",
									"        pm.expect(pm.response.json()).eql(false);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}/ctagcheck?path={{testPathEncoded}}&ctag={{ctag}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}",
								"ctagcheck"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								},
								{
									"key": "ctag",
									"value": "{{ctag}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET EXIST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Body matches string\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"[false,true,false,false,true]\");",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"datasets\":[\n\t\t\"/async/{{dsx01}}\",\n\t\t\"{{testPath}}{{dsx02}}\",\n\t\t\"async/fake_Dataset\",\n\t\t\"test/{{dsx01}}\",\n\t\t\"{{testPath}}{{dsx02}}\"\n\t]\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/exist",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"exist"
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET SIZES",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Body matches string\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"[-1,-1,-1,-1,1021]\");",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"datasets\":[\n\t\t\"/async/{{dsx01}}\",\n\t\t\"{{testPath}}{{dsx02}}\",\n\t\t\"async/fake_Dataset\",\n\t\t\"test/{{dsx01}}\",\n\t\t\"{{testPath}}{{dsx01}}\"\n\t]\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/sizes",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"sizes"
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET READDIR",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Read Datasets\", function () {",
									"        pm.expect(jsonData.datasets.length).to.eql(2);",
									"    });",
									"",
									"    pm.test(\"Read Directories\", function () {",
									"        pm.expect(jsonData.directories.length).to.eql(0);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/readdsdirfulllist?path={{testPathEncoded}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"readdsdirfulllist"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET PERMISSIONS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"check Permission\", function () {",
									"        pm.expect(jsonData.read).to.eql(true);",
									"        pm.expect(jsonData.write).to.eql(true);",
									"        pm.expect(jsonData.delete).to.eql(true);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}/permission?path={{testPathEncoded}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}",
								"permission"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET DELETE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET LIST AFTER DELETE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check content type\", function () {",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"    });",
									"",
									"    pm.test(\"Data List\", function () {",
									"        pm.expect(jsonData.length).gte(0);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET PATCH 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(0);",
									"    });",
									"",
									"    pm.environment.unset('datasetdsx02sbit');",
									"    ",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"metadata\": { \"k1\": \"v1\", \"k2\": \"v2\", \"k3\": { \"k4\": \"v4\" } },\n\t\"filemetadata\": {\"type\": \"GENERIC\", \"size\": 1021 },\n\t\"last_modified_date\": true\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx02}}?path={{testPathEncoded}}&close={{datasetdsx02sbit}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx02}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								},
								{
									"key": "close",
									"value": "{{datasetdsx02sbit}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET DELETE 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx02}}?path={{testPathEncoded}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx02}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "STATUS UNSET DATASETS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.unset('dsx01')",
									"pm.environment.unset('dsx02')",
									"pm.environment.unset('testPath')",
									"pm.environment.unset('testPathEncoded')",
									"pm.environment.unset('sbit')",
									"pm.environment.unset('gcsBucketName')",
									"pm.environment.unset('gcsObjectPrefix')",
									"pm.environment.unset('ctag')",
									"postman.setEnvironmentVariable('execCounter', 1)",
									"",
									"console.log('Dataset variables were removed for datasets folder');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/svcstatus",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"svcstatus"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "dataset ls pagination",
			"item": [
				{
					"name": "DATASET LS SET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('Dataset list test variables have been initialized');",
									"postman.setEnvironmentVariable('execCounter', 1)",
									"pm.environment.set('serviceCloudProvider', pm.response.headers.get('Service-Provider'));",
									"",
									"//skip this folder for ibm",
									"const provider = pm.environment.get('serviceCloudProvider');",
									"if( provider === 'aws' ||  provider === 'ibm') {",
									"    postman.setNextRequest('DATASET LS UNSET');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// unset \r",
									"pm.environment.unset('nextPageCursor')\r",
									"pm.environment.unset('resArray')\r",
									"pm.environment.unset('datasetArray')\r",
									"pm.environment.unset('lsDataOriginalSet')\r",
									"pm.environment.unset('lsDataCurrentSet')\r",
									"pm.environment.unset('lsDatasetName')\r",
									"pm.environment.unset('lsDataPath')\r",
									"pm.environment.unset('lsDataBasePath')\r",
									"\r",
									"\r",
									"function makeID_DataLs(length) {\r",
									"   var result           = '';\r",
									"   var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"   var charactersLength = characters.length;\r",
									"   for ( var i = 0; i < length - 1; i++ ) {\r",
									"      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"   }\r",
									"   return 'W' + result;\r",
									"}\r",
									"const lsDataOriginalSet = [];\r",
									"\r",
									"// create 2 datasets\r",
									"for(let ii=0; ii<2; ii++) {\r",
									"    lsDataOriginalSet.push(\"dsx\" + ii);\r",
									"}\r",
									"\r",
									"// create 2 datasets in 1 folder\r",
									"for(let ii=0; ii<1; ii++) {\r",
									"    lsDataOriginalSet.push(\"folder0\" + ii + '/fsx1');\r",
									"    lsDataOriginalSet.push(\"folder0\" + ii + '/fsx2');\r",
									"}\r",
									"\r",
									"postman.setEnvironmentVariable(\"lsDataOriginalSet\", lsDataOriginalSet);\r",
									"postman.setEnvironmentVariable(\"lsDataBasePath\", makeID_DataLs(8));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/svcstatus",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"svcstatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET LS GENERATE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    let lsDataCurrentSet = pm.environment.get(\"lsDataCurrentSet\");",
									"",
									"    if(lsDataCurrentSet.length > 0) {",
									"        postman.setNextRequest('DATASET LS GENERATE');",
									"    } else {",
									"        pm.environment.unset('lsDataCurrentSet');",
									"    }",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let lsDataCurrentSet = pm.environment.get(\"lsDataCurrentSet\");\r",
									"if(!lsDataCurrentSet) {\r",
									"    lsDataCurrentSet = pm.environment.get(\"lsDataOriginalSet\").split(',');\r",
									"}\r",
									"\r",
									"const basePath = pm.environment.get(\"lsDataBasePath\").split(',');\r",
									"\r",
									"lsDatasetName = lsDataCurrentSet[0];\r",
									"const tmp = lsDatasetName.split('/')\r",
									"if(tmp.length == 1) {\r",
									"    pm.environment.set(\"lsDataPath\", \"/\" + basePath + \"/\");\r",
									"    pm.environment.set(\"lsDatasetName\", tmp[0]);\r",
									"} else {\r",
									"    pm.environment.set(\"lsDataPath\", \"/\" + basePath + \"/\" + tmp[0]);\r",
									"    pm.environment.set(\"lsDatasetName\", tmp[1]);\r",
									"}\r",
									"lsDataCurrentSet.shift()\r",
									"pm.environment.set(\"lsDataCurrentSet\", lsDataCurrentSet);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{lsDatasetName}}?path={{lsDataPath}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{lsDatasetName}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{lsDataPath}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET LS GET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check content type\", function () {",
									"        pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"    });",
									"    ",
									"    pm.test(\"Data List\", function () {",
									"        pm.expect(jsonData.length).gte(4);",
									"    });",
									"    ",
									"    //Get the list of datasets and stored it in a variable",
									"    let datasetArray = [];",
									"    for (var i=0;i<jsonData.length;i++) {",
									"        datasetArray.push(jsonData[i].name);",
									"    }",
									"    datasetArray.sort();",
									"    pm.environment.set(\"datasetArray\",datasetArray);",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET LS POST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    // reset retry counter",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"",
									"    // check status code    ",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // extract the response and set next page cursor",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"nextPageCursor\",jsonData.nextPageCursor);",
									"",
									"    // fill the results array",
									"    let resArray = [];",
									"    if ((pm.environment.get(\"resArray\"))) {",
									"        resArray =pm.environment.get(\"resArray\");",
									"    }",
									"    for (var i=0;i<jsonData.datasets.length;i++) {",
									"        resArray.push(jsonData.datasets[i].name);",
									"    }",
									"    resArray.sort();",
									"    pm.environment.set(\"resArray\",resArray);",
									"",
									"    if(!(pm.environment.get(\"limitValue\"))) {",
									"        const reqbody = JSON.parse(pm.request.body.raw);",
									"        const limitValue = parseInt(reqbody.limit);",
									"        pm.environment.set(\"limitValue\",limitValue);",
									"    }",
									"     // Test to compare limit parameter with number of datasets returned",
									"    pm.test(\"Verify number of datasets returned should be less than or equal to limit parameter\", function () {",
									"        // Check if number of datasets returned is less than or equal to limit parameter",
									"        pm.expect(jsonData.datasets.length).to.be.at.most((pm.environment.get(\"limitValue\")));",
									"    });",
									"",
									"    // if there is a next page token re-execute this call for retrieve the new page otherwise check the results and move to the next call",
									"    if (jsonData.nextPageCursor != \"\") {",
									"        postman.setNextRequest('DATASET LS POST');",
									"    } else {",
									"        pm.test(\"Check pagination for dataset list\", function () {",
									"            pm.expect([...new Set(pm.environment.get(\"datasetArray\"))].sort().toString()).to.eql([...new Set(resArray)].sort().toString());",
									"        });",
									"        pm.environment.unset('resArray');",
									"    }",
									"};",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (pm.environment.get(\"nextPageCursor\")) {\r",
									"   const body = JSON.parse(pm.request.body.raw);\r",
									"    body.cursor = pm.environment.get(\"nextPageCursor\");\r",
									"    pm.request.body.raw = body;\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"limit\": \"3\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET LS DELETE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    let lsDataCurrentSet = pm.environment.get(\"lsDataCurrentSet\");",
									"",
									"    // Delete datasets and folders",
									"    if(lsDataCurrentSet.length > 0) {",
									"        postman.setNextRequest('DATASET LS DELETE');",
									"    } else {",
									"        pm.environment.unset('lsDataCurrentSet')",
									"    }        ",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let lsDataCurrentSet = pm.environment.get(\"lsDataCurrentSet\");\r",
									"if(!lsDataCurrentSet) {\r",
									"    lsDataCurrentSet = pm.environment.get(\"lsDataOriginalSet\").split(',');\r",
									"}\r",
									"\r",
									"const basePath = pm.environment.get(\"lsDataBasePath\").split(',');\r",
									"\r",
									"lsDatasetName = lsDataCurrentSet[0];\r",
									"const tmp = lsDatasetName.split('/')\r",
									"if(tmp.length == 1) {\r",
									"    pm.environment.set(\"lsDataPath\", \"/\" + basePath + \"/\");\r",
									"    pm.environment.set(\"lsDatasetName\", tmp[0]);\r",
									"} else {\r",
									"    pm.environment.set(\"lsDataPath\", \"/\" + basePath + \"/\" + tmp[0]);\r",
									"    pm.environment.set(\"lsDatasetName\", tmp[1]);\r",
									"}\r",
									"lsDataCurrentSet.shift()\r",
									"pm.environment.set(\"lsDataCurrentSet\", lsDataCurrentSet);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{lsDatasetName}}?path={{lsDataPath}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{lsDatasetName}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{lsDataPath}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET LS UNSET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.unset('nextPageCursor')",
									"pm.environment.unset('resArray')",
									"pm.environment.unset('datasetArray')",
									"pm.environment.unset('lsDataOriginalSet')",
									"pm.environment.unset('lsDataCurrentSet')",
									"pm.environment.unset('lsDatasetName')",
									"pm.environment.unset('lsDataPath')",
									"pm.environment.unset('lsDataBasePath')",
									"pm.environment.unset('limitValue')",
									"postman.setEnvironmentVariable('execCounter', 1)",
									"",
									"console.log('Dataset list test variables have been uninitialized');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/svcstatus",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"svcstatus"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "dataset lock",
			"item": [
				{
					"name": "STATUS SET LOCKS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('Dataset variables are initialized for dataset lock folder');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function makeID_lock(length) {\r",
									"   var result           = '';\r",
									"   var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"   var charactersLength = characters.length;\r",
									"   for ( var i = 0; i < length; i++ ) {\r",
									"      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"   }\r",
									"   return result;\r",
									"}\r",
									"\r",
									"postman.setEnvironmentVariable(\"dsx01\", makeID_lock(16));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/svcstatus",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"svcstatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET CREATE LOCKS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Dataset name\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get('dsx01'));",
									"    });",
									"",
									"    pm.test(\"tenant\", function () {",
									"        pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"    });",
									"",
									"    pm.test(\"subproject\", function () {",
									"        pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"    });",
									"",
									"    pm.test(\"path\", function () {",
									"        pm.expect(jsonData.path).to.eql('/');",
									"    });",
									"",
									"    pm.test(\"ltag\", function () {",
									"        pm.expect(jsonData.ltag).to.eql(pm.environment.get('legaltag01'));",
									"    });",
									"",
									"    pm.test(\"Dates are present\", function () {",
									"        pm.expect(jsonData.created_date).to.exist;",
									"        pm.expect(jsonData.last_modified_date).to.exist;",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(1);",
									"    });",
									"",
									"    pm.test(\"sbit\", function () {",
									"        pm.expect(jsonData.sbit).not.to.eql(null);",
									"        postman.setEnvironmentVariable(\"sbit\", jsonData.sbit);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET LOCK READ 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 423) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 423 locked\", function () {",
									"        pm.response.to.have.status(423);",
									"    });",
									"",
									"    pm.test(\"Read a data locked for writing\", function () {",
									"        pm.expect(pm.response.text()).to.include('locked for write');",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}/lock?openmode=read",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}",
								"lock"
							],
							"query": [
								{
									"key": "openmode",
									"value": "read"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET LOCK READ SBIT 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}/lock?openmode=read&wid={{sbit}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}",
								"lock"
							],
							"query": [
								{
									"key": "openmode",
									"value": "read"
								},
								{
									"key": "wid",
									"value": "{{sbit}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET LOCK WRITE 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 423) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 423 locked\", function () {",
									"        pm.response.to.have.status(423);",
									"    });",
									"",
									"    pm.test(\"Write a data already locked for writing\", function () {",
									"        pm.expect(pm.response.text()).to.include('locked for write');",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}/lock?openmode=write",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}",
								"lock"
							],
							"query": [
								{
									"key": "openmode",
									"value": "write"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET LOCK WRITE SBIT 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Dataset name\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get('dsx01'));",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(1);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}/lock?openmode=write&wid={{sbit}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}",
								"lock"
							],
							"query": [
								{
									"key": "openmode",
									"value": "write"
								},
								{
									"key": "wid",
									"value": "{{sbit}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET CLOSE WRONG SBIT 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 404) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 404\", function () {",
									"        pm.response.to.have.status(404);",
									"    });",
									"",
									"    pm.test(\"Close data using wrong sbit\", function () {",
									"        pm.expect(pm.response.text()).to.include('locked with different ID');",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"metadata\": { \"k1\": \"v1\", \"k2\": \"v2\", \"k3\": { \"k4\": \"v4\" } },\n\t\"filemetadata\": {\"type\": \"GENERIC\", \"size\": 1021 },\n\t\"last_modified_date\": true\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?close=acbdefgh12345678",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "close",
									"value": "acbdefgh12345678"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET CLOSE SBIT 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(0);",
									"    });",
									"",
									"    pm.test(\"sbit\", function () {",
									"        pm.expect(jsonData.sbit).to.eql(null);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"metadata\": { \"k1\": \"v1\", \"k2\": \"v2\", \"k3\": { \"k4\": \"v4\" } },\n\t\"filemetadata\": {\"type\": \"GENERIC\", \"size\": 1021 },\n\t\"last_modified_date\": true\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?close={{sbit}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "close",
									"value": "{{sbit}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET GET LOCKS 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Dataset name\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get('dsx01'));",
									"    });",
									"",
									"    pm.test(\"tenant\", function () {",
									"        pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"    });",
									"",
									"    pm.test(\"subproject\", function () {",
									"        pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"    });",
									"",
									"    pm.test(\"path\", function () {",
									"        pm.expect(jsonData.path).to.eql('/');",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(0);",
									"    });",
									"",
									"    pm.test(\"sbit\", function () {",
									"        pm.expect(jsonData.sbit).to.eql(null);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET LOCK WRITE 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(1);",
									"    });",
									"",
									"    pm.test(\"sbit\", function () {",
									"        pm.expect(jsonData.sbit).not.to.eql(null);",
									"        postman.setEnvironmentVariable(\"sbit_new\", jsonData.sbit);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}/lock?openmode=write",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}",
								"lock"
							],
							"query": [
								{
									"key": "openmode",
									"value": "write"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET LOCK READ 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 423) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 423 locked\", function () {",
									"        pm.response.to.have.status(423);",
									"    });",
									"",
									"    pm.test(\"Read a data locked for writing\", function () {",
									"        pm.expect(pm.response.text()).to.include('locked for write');",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}/lock?openmode=read",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}",
								"lock"
							],
							"query": [
								{
									"key": "openmode",
									"value": "read"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET LOCK WRITE 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 423) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 423 locked\", function () {",
									"        pm.response.to.have.status(423);",
									"    });",
									"",
									"    pm.test(\"Write a data already locked for writing\", function () {",
									"        pm.expect(pm.response.text()).to.include('locked for write');",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}/lock?openmode=write",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}",
								"lock"
							],
							"query": [
								{
									"key": "openmode",
									"value": "write"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET LOCK WRITE SBIT 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Dataset name\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get('dsx01'));",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(1);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}/lock?openmode=write&wid={{sbit_new}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}",
								"lock"
							],
							"query": [
								{
									"key": "openmode",
									"value": "write"
								},
								{
									"key": "wid",
									"value": "{{sbit_new}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET CLOSE WRONG SBIT 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 404) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 404\", function () {",
									"        pm.response.to.have.status(404);",
									"    });",
									"",
									"    pm.test(\"Close data using wrong sbit\", function () {",
									"        pm.expect(pm.response.text()).to.include('locked with different ID');",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"metadata\": { \"k1\": \"v1\", \"k2\": \"v2\", \"k3\": { \"k4\": \"v4\" } },\n\t\"filemetadata\": {\"type\": \"GENERIC\", \"size\": 1021 },\n\t\"last_modified_date\": true\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?close={{sbit}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "close",
									"value": "{{sbit}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET CLOSE SBIT 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(0);",
									"    });",
									"",
									"    pm.test(\"sbit\", function () {",
									"        pm.expect(jsonData.sbit).to.eql(null);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"metadata\": { \"k1\": \"v1\", \"k2\": \"v2\", \"k3\": { \"k4\": \"v4\" } },\n\t\"filemetadata\": {\"type\": \"GENERIC\", \"size\": 1021 },\n\t\"last_modified_date\": true\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?close={{sbit_new}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "close",
									"value": "{{sbit_new}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET GET LOCKS 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Dataset name\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get('dsx01'));",
									"    });",
									"",
									"    pm.test(\"tenant\", function () {",
									"        pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"    });",
									"",
									"    pm.test(\"subproject\", function () {",
									"        pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"    });",
									"",
									"    pm.test(\"path\", function () {",
									"        pm.expect(jsonData.path).to.eql('/');",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(0);",
									"    });",
									"",
									"    pm.test(\"sbit\", function () {",
									"        pm.expect(jsonData.sbit).to.eql(null);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET LOCK READ  3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Lock a data for reading\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(1);",
									"        pm.expect(jsonData.sbit).not.to.eql(null);",
									"        postman.setEnvironmentVariable(\"sbit_new_01\", jsonData.sbit);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}/lock?openmode=read&wid=R",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}",
								"lock"
							],
							"query": [
								{
									"key": "openmode",
									"value": "read"
								},
								{
									"key": "wid",
									"value": "R"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET LOCK WRITE 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 423) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 423 locked\", function () {",
									"        pm.response.to.have.status(423);",
									"    });",
									"",
									"    pm.test(\"Write a data locked for reading\", function () {",
									"        pm.expect(pm.response.text()).to.include('locked for read');",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}/lock?openmode=write",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}",
								"lock"
							],
							"query": [
								{
									"key": "openmode",
									"value": "write"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET LOCK READ 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Read a data locked for reading\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(2);",
									"        postman.setEnvironmentVariable(\"sbit_new_02\", jsonData.sbit);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}/lock?openmode=read",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}",
								"lock"
							],
							"query": [
								{
									"key": "openmode",
									"value": "read"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET CLOSE LOCKS 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(1);",
									"    });",
									"",
									"    pm.test(\"sbit\", function () {",
									"        pm.expect(jsonData.sbit).not.to.eql(null);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"metadata\": { \"k1\": \"v1\", \"k2\": \"v2\", \"k3\": { \"k4\": \"v4\" } },\n\t\"filemetadata\": {\"type\": \"GENERIC\", \"size\": 1021 },\n\t\"last_modified_date\": true\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?close={{sbit_new_01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "close",
									"value": "{{sbit_new_01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET CLOSE LOCKS 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(0);",
									"    });",
									"",
									"    pm.test(\"sbit\", function () {",
									"        pm.expect(jsonData.sbit).to.eql(null);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"metadata\": { \"k1\": \"v1\", \"k2\": \"v2\", \"k3\": { \"k4\": \"v4\" } },\n\t\"filemetadata\": {\"type\": \"GENERIC\", \"size\": 1021 },\n\t\"last_modified_date\": true\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?close={{sbit_new_02}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "close",
									"value": "{{sbit_new_02}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET GET LOCKS 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Dataset name\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get('dsx01'));",
									"    });",
									"",
									"    pm.test(\"tenant\", function () {",
									"        pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"    });",
									"",
									"    pm.test(\"subproject\", function () {",
									"        pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"    });",
									"",
									"    pm.test(\"path\", function () {",
									"        pm.expect(jsonData.path).to.eql('/');",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(0);",
									"    });",
									"",
									"    pm.test(\"sbit\", function () {",
									"        pm.expect(jsonData.sbit).to.eql(null);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET DELETE LOCKS 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE DATASET LOCKS 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Dataset name\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get('dsx01'));",
									"    });",
									"",
									"    pm.test(\"tenant\", function () {",
									"        pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"    });",
									"",
									"    pm.test(\"subproject\", function () {",
									"        pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"    });",
									"",
									"    pm.test(\"path\", function () {",
									"        pm.expect(jsonData.path).to.eql('/');",
									"    });",
									"",
									"    pm.test(\"ltag\", function () {",
									"        pm.expect(jsonData.ltag).to.eql(pm.environment.get('legaltag01'));",
									"    });",
									"",
									"    pm.test(\"Dates are present\", function () {",
									"        pm.expect(jsonData.created_date).to.exist;",
									"        pm.expect(jsonData.last_modified_date).to.exist;",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(1);",
									"    });",
									"",
									"    pm.test(\"sbit\", function () {",
									"        pm.expect(jsonData.sbit).not.to.eql(null);",
									"        postman.setEnvironmentVariable(\"sbit\", jsonData.sbit);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET CLOSE LOCKS 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(0);",
									"    });",
									"",
									"    pm.test(\"sbit\", function () {",
									"        pm.expect(jsonData.sbit).to.eql(null);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"metadata\": { \"k1\": \"v1\", \"k2\": \"v2\", \"k3\": { \"k4\": \"v4\" } },\n\t\"filemetadata\": {\"type\": \"GENERIC\", \"size\": 1021 },\n\t\"last_modified_date\": true\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?close={{sbit}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "close",
									"value": "{{sbit}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET MAKE READONLY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"readonly\", function () {",
									"        pm.expect(jsonData.readonly).to.eql(true);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"readonly\": true\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET READONLY LOCK READ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}/lock?openmode=read",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}",
								"lock"
							],
							"query": [
								{
									"key": "openmode",
									"value": "read"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET READONLY LOCK WRITE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 400) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 400 Bad Request\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Read a data locked for writing\", function () {",
									"        pm.expect(pm.response.text()).to.include('cannot be locked');",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}/lock?openmode=write",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}",
								"lock"
							],
							"query": [
								{
									"key": "openmode",
									"value": "write"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET DELETE LOCKS 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "STATUS UNSET LOCKS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.unset('dsx01')",
									"pm.environment.unset('sbit')",
									"pm.environment.unset('sbit_new')",
									"pm.environment.unset('sbit_new_01')",
									"pm.environment.unset('sbit_new_02')",
									"postman.setEnvironmentVariable('execCounter', 1)",
									"",
									"console.log('Dataset variables were removed for dataset lock folder');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/svcstatus",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"svcstatus"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "seismicmeta",
			"item": [
				{
					"name": "STATUS SET SEISMICMETA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('Dataset variables are initialized for seismicmeta folder');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function makeID_seismicmeta(length) {\r",
									"   var result           = '';\r",
									"   var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"   var charactersLength = characters.length;\r",
									"   for ( var i = 0; i < length; i++ ) {\r",
									"      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"   }\r",
									"   return result;\r",
									"}\r",
									"\r",
									"postman.setEnvironmentVariable(\"dsx01\", makeID_seismicmeta(16));\r",
									"postman.setEnvironmentVariable(\"dsx02\", makeID_seismicmeta(16));\r",
									"var path = \"/\" + makeID_seismicmeta(8) + \"/\" + makeID_seismicmeta(4) + \"/\" + makeID_seismicmeta(4) + \"/\"\r",
									"postman.setEnvironmentVariable(\"testPath\", path);\r",
									"postman.setEnvironmentVariable(\"testPathEncoded\", encodeURIComponent(path));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/svcstatus",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"svcstatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET REGISTER + SEISMICMETA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check content type\", function () {",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"    });",
									"",
									"    pm.test(\"Dataset name\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get('dsx01'));",
									"    });",
									"",
									"    pm.test(\"tenant\", function () {",
									"        pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"    });",
									"",
									"    pm.test(\"subproject\", function () {",
									"        pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"    });",
									"",
									"    pm.test(\"path\", function () {",
									"        pm.expect(jsonData.path).to.eql(pm.environment.get('testPath'));",
									"    });",
									"",
									"    pm.test(\"ltag\", function () {",
									"        pm.expect(jsonData.ltag).to.eql(pm.environment.get('legaltag01'));",
									"    });",
									"",
									"    pm.test(\"Dates are present\", function () {",
									"        pm.expect(jsonData.created_date).to.exist;",
									"        pm.expect(jsonData.last_modified_date).to.exist;",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(1);",
									"        postman.setEnvironmentVariable(\"sbit\", jsonData.sbit);",
									"    });",
									"",
									"    pm.test(\"Check gtag\", function () {",
									"        pm.expect(jsonData.gtags.length).to.eql(1);",
									"        pm.expect(jsonData.gtags[0]).to.eql(\"tagA\");",
									"    });",
									"",
									"    pm.test(\"Check seismicmetadata\", () => {",
									"        pm.expect(jsonData.seismicmeta_guid).not.equal(null);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"gtags\": [\r\n        \"tagA\"\r\n    ],\r\n    \"seismicmeta\": {\r\n        \"data\": {\r\n            \"additionalMetaData\": [\r\n                {\r\n                    \"name\": \"SOURCE BARCODE\",\r\n                    \"value\": 3843967263,\r\n                    \"valueAsString\": \"3843967263\"\r\n                },\r\n                {\r\n                    \"name\": \"ORIGINAL FILE NAME\",\r\n                    \"value\": \"1_67_Srv3D_1_8_Original.sgy\",\r\n                    \"valueAsString\": \"1_67_Srv3D_1_8_Original.sgy\"\r\n                },\r\n                {\r\n                    \"name\": \"BIN SPACING\",\r\n                    \"value\": 90,\r\n                    \"valueAsString\": \"90\"\r\n                }\r\n            ],\r\n            \"binGridOperation\": {\r\n                \"binGridOriginEasting\": 1276435.2,\r\n                \"binGridOriginI\": 1,\r\n                \"binGridOriginJ\": 1,\r\n                \"binGridOriginNorthing\": 242030.61,\r\n                \"binGridScaleFactor\": 1,\r\n                \"binNodeIncrementI\": 1,\r\n                \"binNodeIncrementJ\": 1,\r\n                \"binWidthI\": 83.39992,\r\n                \"binWidthJ\": 91.77242,\r\n                \"crsKey\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                \"mapGridBearingJ\": 206.58368,\r\n                \"persistableReferenceCrs\": {\r\n                    \"lateBoundCRS\": {\r\n                        \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"26782\"\r\n                        },\r\n                        \"type\": \"LBC\"\r\n                    },\r\n                    \"singleCT\": {\r\n                        \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"15851\"\r\n                        },\r\n                        \"type\": \"ST\"\r\n                    },\r\n                    \"ver\": \"PE_10_3_1\",\r\n                    \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                    \"authCode\": {\r\n                        \"auth\": \"SLB\",\r\n                        \"code\": \"26782079\"\r\n                    },\r\n                    \"type\": \"EBC\"\r\n                },\r\n                \"transformationMethodNumber\": 1049,\r\n                \"unitKeyBearing\": \"dega\"\r\n            },\r\n            \"binNodePositions\": [\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        1276435.2,\r\n                                        242030.61\r\n                                    ],\r\n                                    [\r\n                                        1281357.8,\r\n                                        239567.36\r\n                                    ],\r\n                                    [\r\n                                        1280002.5,\r\n                                        236859.05\r\n                                    ],\r\n                                    [\r\n                                        1275080,\r\n                                        239322.28\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsMultiPoint\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ]\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"26782\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"26782079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                },\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        -93.60371,\r\n                                        29.312513\r\n                                    ],\r\n                                    [\r\n                                        -93.58811,\r\n                                        29.306007\r\n                                    ],\r\n                                    [\r\n                                        -93.59219,\r\n                                        29.298489\r\n                                    ],\r\n                                    [\r\n                                        -93.60779,\r\n                                        29.304993\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsMultiPoint\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ]\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433],AUTHORITY[\\\"EPSG\\\",4267]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"GCS_North_American_1927\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"4267\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus [4267,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"4267079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                },\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        -93.60387,\r\n                                        29.312752\r\n                                    ],\r\n                                    [\r\n                                        -93.58827,\r\n                                        29.306248\r\n                                    ],\r\n                                    [\r\n                                        -93.592354,\r\n                                        29.298727\r\n                                    ],\r\n                                    [\r\n                                        -93.60795,\r\n                                        29.305231\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsMultiPoint\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ]\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"wkt\": \"GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433],AUTHORITY[\\\"EPSG\\\",4326]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"GCS_WGS_1984\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"4326\"\r\n                        },\r\n                        \"type\": \"LBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                }\r\n            ],\r\n            \"classification\": \"Post-stack, time-migrated\",\r\n            \"dateCreated\": \"2013-03-22T11:16:03Z\",\r\n            \"dateModified\": \"2013-03-22T11:16:03Z\",\r\n            \"derivedBulk\": [\r\n                {\r\n                    \"size\": 1223488818,\r\n                    \"type\": \"ZGY\",\r\n                    \"url\": \"sd://SNTC/colors/test.zgy\"\r\n                },\r\n                {\r\n                    \"size\": 2653649950,\r\n                    \"type\": \"DIO\",\r\n                    \"url\": \"sd://SNTC/colors/test.DIO\"\r\n                }\r\n            ],\r\n            \"description\": \"A comment or a remark.\",\r\n            \"elevationReferenceTime\": {\r\n                \"elevationFromMsl\": {\r\n                    \"unitKey\": \"ft\",\r\n                    \"value\": 0\r\n                },\r\n                \"name\": \"SRD\",\r\n                \"replacementVelocity\": {\r\n                    \"unitKey\": \"ft/s\",\r\n                    \"value\": 4800\r\n                }\r\n            },\r\n            \"externalIds\": [\r\n                \"Petrel:tenant1/ProjectLouisiana/3491763/a9b46fc4-1840-450a-ac01-d15bdaa086ba:aef0e55c-4fcb-4546-a7a2-9df8f27277a1\"\r\n            ],\r\n            \"locationAtIndexZero\": {\r\n                \"features\": [\r\n                    {\r\n                        \"geometry\": {\r\n                            \"coordinates\": [\r\n                                1276435.2,\r\n                                242030.61,\r\n                                -1234\r\n                            ],\r\n                            \"type\": \"AnyCrsPoint\"\r\n                        },\r\n                        \"type\": \"AnyCrsFeature\"\r\n                    }\r\n                ],\r\n                \"persistableReferenceCrs\": {\r\n                    \"lateBoundCRS\": {\r\n                        \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"26782\"\r\n                        },\r\n                        \"type\": \"LBC\"\r\n                    },\r\n                    \"singleCT\": {\r\n                        \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"15851\"\r\n                        },\r\n                        \"type\": \"ST\"\r\n                    },\r\n                    \"ver\": \"PE_10_3_1\",\r\n                    \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                    \"authCode\": {\r\n                        \"auth\": \"SLB\",\r\n                        \"code\": \"26782079\"\r\n                    },\r\n                    \"type\": \"EBC\"\r\n                },\r\n                \"persistableReferenceUnitZ\": {\r\n                    \"scaleOffset\": {\r\n                        \"scale\": 0.001,\r\n                        \"offset\": 0\r\n                    },\r\n                    \"symbol\": \"ms\",\r\n                    \"baseMeasurement\": {\r\n                        \"ancestry\": \"Time\",\r\n                        \"type\": \"UM\"\r\n                    },\r\n                    \"type\": \"USO\"\r\n                },\r\n                \"type\": \"AnyCrsFeatureCollection\"\r\n            },\r\n            \"locationWGS84\": {\r\n                \"features\": [\r\n                    {\r\n                        \"geometry\": {\r\n                            \"coordinates\": [\r\n                                [\r\n                                    [\r\n                                        -93.60387,\r\n                                        29.312752\r\n                                    ],\r\n                                    [\r\n                                        -93.58827,\r\n                                        29.306248\r\n                                    ],\r\n                                    [\r\n                                        -93.592354,\r\n                                        29.298727\r\n                                    ],\r\n                                    [\r\n                                        -93.60795,\r\n                                        29.305231\r\n                                    ],\r\n                                    [\r\n                                        -93.60387,\r\n                                        29.312752\r\n                                    ]\r\n                                ]\r\n                            ],\r\n                            \"type\": \"Polygon\"\r\n                        },\r\n                        \"properties\": {\r\n                            \"name\": \"Survey 4 INLINE_1_67_Srv3D_1_8_Original\"\r\n                        },\r\n                        \"type\": \"Feature\"\r\n                    }\r\n                ],\r\n                \"type\": \"FeatureCollection\"\r\n            },\r\n            \"name\": \"Survey 4 INLINE_1_67_Srv3D_1_8_Original\",\r\n            \"originalBulk\": {\r\n                \"size\": 2873437400,\r\n                \"type\": \"SEGY\",\r\n                \"url\": \"sd://SNTC/colors/test.segy\"\r\n            },\r\n            \"perimeters\": [\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        [\r\n                                            1276435.2,\r\n                                            242030.61\r\n                                        ],\r\n                                        [\r\n                                            1281357.8,\r\n                                            239567.36\r\n                                        ],\r\n                                        [\r\n                                            1280002.5,\r\n                                            236859.05\r\n                                        ],\r\n                                        [\r\n                                            1275080,\r\n                                            239322.28\r\n                                        ],\r\n                                        [\r\n                                            1276435.2,\r\n                                            242030.61\r\n                                        ]\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsPolygon\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ],\r\n                                \"perimeterType\": \"Full Fold Coverage\"\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"26782\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"26782079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                },\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        [\r\n                                            -93.60371,\r\n                                            29.312513\r\n                                        ],\r\n                                        [\r\n                                            -93.58811,\r\n                                            29.306007\r\n                                        ],\r\n                                        [\r\n                                            -93.59219,\r\n                                            29.298489\r\n                                        ],\r\n                                        [\r\n                                            -93.60779,\r\n                                            29.304993\r\n                                        ],\r\n                                        [\r\n                                            -93.60371,\r\n                                            29.312513\r\n                                        ]\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsPolygon\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ],\r\n                                \"perimeterType\": \"Full Fold Coverage\"\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433],AUTHORITY[\\\"EPSG\\\",4267]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"GCS_North_American_1927\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"4267\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus [4267,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"4267079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                }\r\n            ],\r\n            \"rangeAmplitudeMax\": {\r\n                \"unitKey\": \"amplitude\",\r\n                \"value\": 232467.8\r\n            },\r\n            \"rangeAmplitudeMin\": {\r\n                \"unitKey\": \"amplitude\",\r\n                \"value\": -226153.4\r\n            },\r\n            \"rangeCrosslineIncrement\": 1,\r\n            \"rangeCrosslineStart\": 1,\r\n            \"rangeCrosslineStop\": 34,\r\n            \"rangeInlineIncrement\": 1,\r\n            \"rangeInlineStart\": 1,\r\n            \"rangeInlineStop\": 67,\r\n            \"relationships\": {\r\n                \"binGrid\": {\r\n                    \"id\": \"slb:wke:binGrid-5067af51fe6542968ce8868c01af6cb7\"\r\n                },\r\n                \"seismicSurvey\": {\r\n                    \"id\": \"slb:wke:seismicSurvey3d-62d8fe58-c044-537a-b354-7f3f8e860421\",\r\n                    \"name\": \"ST2013-L\"\r\n                },\r\n                \"usesAssociations\": true\r\n            },\r\n            \"seismicProperty\": \"Instantaneous Amplitude\",\r\n            \"stackAngleRangeMax\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": 10\r\n            },\r\n            \"stackAngleRangeMin\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": 0\r\n            },\r\n            \"stackAzimuthRangeMax\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": 20\r\n            },\r\n            \"stackAzimuthRangeMin\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": -20\r\n            },\r\n            \"stackOffsetRangeMax\": {\r\n                \"unitKey\": \"ftUS\",\r\n                \"value\": 3000\r\n            },\r\n            \"stackOffsetRangeMin\": {\r\n                \"unitKey\": \"ftUS\",\r\n                \"value\": 0\r\n            },\r\n            \"stackSubType\": \"Full\",\r\n            \"stackType\": \"Full\",\r\n            \"storageType\": \"32-BIT\",\r\n            \"textualFileHeader\": [\r\n                \"C 1 CLIENT COMPANY CREW NO                                                      C 2 LINE line1dS AREA MAP ID                                                    C 3 REEL NO DAY-START OF REEL YEAR OBSERVER                                     C 4 INSTRUMENT: DELPH MODEL xx SERIAL NO                                        C 5 DATA TRACES/RECORD 1 AUXILIARY TRACES/RECORD 0 CDP FOLD                     C 6 SAMPLE INTERVAL 333 SAMPLES/TRACE 1496 BITS/IN 16 BYTES/SAMPLE 2            C 7 RECORDING FORMAT FORMAT THIS REEL MEASUREMENT SYSTEM                        C 8 SAMPLE CODE: FIXED PT                                                       C 9 GAIN TYPE: FIXED                                                            C10 FILTERS: ALIAS 1500HZ NOTCH HZ BAND - HZ SLOPE - DB/OCT                     C11 SOURCE: TYPE NUMBER/POINT POINT INTERVAL                                    C12 PATTERN: LENGTH WIDTH                                                       C13 SWEEP: START HZ END HZ LENGTH MS CHANEL NO TYPE                             C14 TAPER: START LENGTH MS END LENGTH MS TYPE                                   C15 SPREAD: OFFSET MAX DISTANCE GROUP INTERVAL                                  C16 GEOPHONES: PER GROUP SPACING FREQUENCY MFG MODEL                            C17 PATTERN: LENGTH WIDTH                                                       C18 TRACES SORTED BY: RECORD                                                    C19 AMPLITUDE RECOVERY: NONE                                                    C20 MAP PROJECTION ZONE ID COORDINATE UNITS                                     C21 PROCESSING:                                                                 C22 PROCESSING:                                                                 C23                                                                             C24                                                                             C25                                                                             C26                                                                             C27                                                                             C28                                                                             C29                                                                             C30                                                                             C31                                                                             C32                                                                             C33                                                                             C34                                                                             C35                                                                             C36                                                                             C37                                                                             C38                                                                             C39                                                                             C40 END EBCDIC                                                                  \"\r\n            ],\r\n            \"verticalDomain\": \"Elevation time (two-way travel time)\",\r\n            \"verticalIncrement\": {\r\n                \"unitKey\": \"ms\",\r\n                \"value\": -4\r\n            },\r\n            \"verticalSampleCount\": 1000,\r\n            \"verticalStart\": {\r\n                \"unitKey\": \"ms\",\r\n                \"value\": 0\r\n            },\r\n            \"verticalStop\": {\r\n                \"unitKey\": \"ms\",\r\n                \"value\": -3996\r\n            },\r\n            \"vintage\": \"ST2013-InstantaneousAmplitude\",\r\n            \"waveType\": \"PP\"\r\n        },\r\n        \"kind\": \"{{datapartition}}:wks:seismic3d:1.0.5\",\r\n        \"legal\": {\r\n            \"legaltags\": [\r\n                \"{{legaltag01}}\"\r\n            ],\r\n            \"otherRelevantDataCountries\": [\r\n                \"US\",\r\n                \"BE\",\r\n                \"NO\",\r\n                \"IN\"\r\n            ]\r\n        },\r\n        \"version\": 1040891613125385\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET GET + SEISMICMETA (FROM POST)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check content type\", function () {",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"    });",
									"",
									"    pm.test(\"Dataset name\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get('dsx01'));",
									"    });",
									"",
									"    pm.test(\"tenant\", function () {",
									"        pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"    });",
									"",
									"    pm.test(\"subproject\", function () {",
									"        pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"    });",
									"",
									"    pm.test(\"path\", function () {",
									"        pm.expect(jsonData.path).to.eql(pm.environment.get('testPath'));",
									"",
									"    });",
									"",
									"    pm.test(\"ltag\", function () {",
									"        pm.expect(jsonData.ltag).to.eql(pm.environment.get('legaltag01'));",
									"    });",
									"",
									"    pm.test(\"Dates are present\", function () {",
									"        pm.expect(jsonData.created_date).to.exist;",
									"        pm.expect(jsonData.last_modified_date).to.exist;",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(1);",
									"    });",
									"",
									"    pm.test(\"sbit\", function () {",
									"        postman.setEnvironmentVariable(\"sbit\", jsonData.sbit);",
									"    });",
									"",
									"    pm.test(\"gcsurl\", () => {",
									"        postman.setEnvironmentVariable(\"gcsBucketName\", jsonData.gcsurl.split('/')[0]);",
									"        postman.setEnvironmentVariable(\"gcsObjectPrefix\", jsonData.gcsurl.split('/')[1]);",
									"    })",
									"",
									"    pm.test(\"Check gtag\", function () {",
									"        pm.expect(jsonData.gtags.length).to.eql(1);",
									"        pm.expect(jsonData.gtags[0]).to.eql(\"tagA\");",
									"    });",
									"",
									"    pm.test(\"Check seismicmetadata\", () => {",
									"        pm.expect(jsonData.seismicmeta).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.id).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.kind).to.eql(pm.environment.get('datapartition') + \":wks:seismic3d:1.0.5\");",
									"        pm.expect(jsonData.seismicmeta.acl).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.acl.viewers).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.acl.owners).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.legal).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.legal.legaltags).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.legal.otherRelevantDataCountries).to.contain(\"US\");",
									"        pm.expect(jsonData.seismicmeta.data.binNodePositions[0].features[0].geometry.coordinates[0][1]).to.equal(242030.61);",
									"        pm.expect(jsonData.seismicmeta.data.binNodePositions[0].features[0].geometry.type).to.equal(\"AnyCrsMultiPoint\");",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded}}&seismicmeta=true",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								},
								{
									"key": "seismicmeta",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET PATCH + SEISMICMETA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check content type\", function () {",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"    });",
									"",
									"    pm.test(\"Dataset name\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get('dsx01'));",
									"    });",
									"",
									"    pm.test(\"tenant\", function () {",
									"        pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"    });",
									"",
									"    pm.test(\"subproject\", function () {",
									"        pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"    });",
									"",
									"    pm.test(\"path\", function () {",
									"        pm.expect(jsonData.path).to.eql(pm.environment.get('testPath'));",
									"    });",
									"",
									"    pm.test(\"ltag\", function () {",
									"        pm.expect(jsonData.ltag).to.eql(pm.environment.get('legaltag01'));",
									"    });",
									"",
									"    pm.test(\"Dates are present\", function () {",
									"        pm.expect(jsonData.created_date).to.exist;",
									"        pm.expect(jsonData.last_modified_date).to.exist;",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(0);",
									"    });",
									"",
									"    pm.test(\"Check gtag\", function () {",
									"        pm.expect(jsonData.gtags.length).to.eql(1);",
									"        pm.expect(jsonData.gtags[0]).to.eql(\"tagA\");",
									"    });",
									"",
									"    pm.test(\"Check seismicmetadata\", () => {",
									"        pm.expect(jsonData.seismicmeta_guid).not.equal(null);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var result           = '';\r",
									"var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"var charactersLength = characters.length;\r",
									"for ( var i = 0; i < 16; i++ ) {\r",
									"    result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"}\r",
									"pm.variables.set(\"randomString16\", result);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"gtags\": [\n    \"tagA\"\n  ],\n  \"seismicmeta\": {\n  \"id\": \"{{datapartition}}:seismic3d:{{randomString16}}\",\n  \"kind\": \"{{datapartition}}:wks:seismic3d:1.0.5\",\n    \"legal\": {\n    \"legaltags\": [\n      \"{{legaltag01}}\"\n    ],\n      \"otherRelevantDataCountries\": [\n        \"US\"\n      ]\n  },\n  \"data\": {\n    \"geometry\": {\n      \"coordinates\": [\n        [\n          -93.61,\n          9.32\n        ],\n        [\n          -93.78,\n          29.44\n        ]\n      ],\n        \"type\": \"Polygon\"\n     }\n   },\n  \"meta\": [\n\t    {\n\t        \"kind\": \"Unit\",\n\t        \"name\": \"ft/s\",\n\t        \"persistableReference\": {\n\t            \"scaleOffset\": {\n\t                \"scale\": 0.3048,\n\t                \"offset\": 0\n\t            },\n\t            \"symbol\": \"ft/s\",\n\t            \"baseMeasurement\": {\n\t                \"ancestry\": \"Velocity\",\n\t                \"type\": \"UM\"\n\t            },\n\t            \"type\": \"USO\"\n\t        },\n\t        \"propertyNames\": [\n\t            \"elevationReferenceTime.replacementVelocity.value\"\n\t        ]\n\t    }\n    ]\n  }\n} \n \n"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded}}&close={{sbit}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								},
								{
									"key": "close",
									"value": "{{sbit}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET GET + SEISMICMETA (FROM PATCH)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check content type\", function () {",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"    });",
									"",
									"    pm.test(\"Dataset name\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get('dsx01'));",
									"    });",
									"",
									"    pm.test(\"tenant\", function () {",
									"        pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"    });",
									"",
									"    pm.test(\"subproject\", function () {",
									"        pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"    });",
									"",
									"    pm.test(\"path\", function () {",
									"        pm.expect(jsonData.path).to.eql(pm.environment.get('testPath'));",
									"    });",
									"",
									"    pm.test(\"ltag\", function () {",
									"        pm.expect(jsonData.ltag).to.eql(pm.environment.get('legaltag01'));",
									"    });",
									"",
									"    pm.test(\"Dates are present\", function () {",
									"        pm.expect(jsonData.created_date).to.exist;",
									"        pm.expect(jsonData.last_modified_date).to.exist;",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(0);",
									"    });",
									"",
									"    pm.test(\"sbit\", function () {",
									"        postman.setEnvironmentVariable(\"sbit\", jsonData.sbit);",
									"    });",
									"",
									"    pm.test(\"gcsurl\", () => {",
									"        postman.setEnvironmentVariable(\"gcsBucketName\", jsonData.gcsurl.split('/')[0]);",
									"        postman.setEnvironmentVariable(\"gcsObjectPrefix\", jsonData.gcsurl.split('/')[1]);",
									"    })",
									"",
									"    pm.test(\"Check gtag\", function () {",
									"        pm.expect(jsonData.gtags.length).to.eql(1);",
									"        pm.expect(jsonData.gtags[0]).to.eql(\"tagA\");",
									"    });",
									"",
									"    pm.test(\"Check seismicmetadata\", () => {",
									"        pm.expect(jsonData.seismicmeta).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.kind).to.eql(pm.environment.get('datapartition') +\":wks:seismic3d:1.0.5\");",
									"        pm.expect(jsonData.seismicmeta.acl).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.acl.viewers).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.acl.owners).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.legal).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.legal.legaltags).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.legal.otherRelevantDataCountries).to.contain(\"US\");",
									"        pm.expect(jsonData.seismicmeta.data.geometry.coordinates[0][1]).to.equal(9.32);",
									"        pm.expect(jsonData.seismicmeta.data.geometry.type).to.equal(\"Polygon\");",
									"        pm.expect(jsonData.seismicmeta.meta[0].kind).to.eql(\"Unit\");",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded}}&seismicmeta=true",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								},
								{
									"key": "seismicmeta",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET DELETE SEISMICMETA 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET REGISTER WITH SEISMICMETA (RECORD_TYPE USED)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check content type\", function () {",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"    });",
									"",
									"    pm.test(\"Dataset name\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get('dsx01'));",
									"    });",
									"",
									"    pm.test(\"tenant\", function () {",
									"        pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"    });",
									"",
									"    pm.test(\"subproject\", function () {",
									"        pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"    });",
									"",
									"    pm.test(\"path\", function () {",
									"        pm.expect(jsonData.path).to.eql(pm.environment.get('testPath'));",
									"    });",
									"",
									"    pm.test(\"ltag\", function () {",
									"        pm.expect(jsonData.ltag).to.eql(pm.environment.get('legaltag01'));",
									"    });",
									"",
									"    pm.test(\"Dates are present\", function () {",
									"        pm.expect(jsonData.created_date).to.exist;",
									"        pm.expect(jsonData.last_modified_date).to.exist;",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(1);",
									"        postman.setEnvironmentVariable(\"sbit\", jsonData.sbit);",
									"    });",
									"",
									"    pm.test(\"Check gtag\", function () {",
									"        pm.expect(jsonData.gtags.length).to.eql(1);",
									"        pm.expect(jsonData.gtags[0]).to.eql(\"tagA\");",
									"    });",
									"",
									"    pm.test(\"Check seismicmetadata\", () => {",
									"        pm.expect(jsonData.seismicmeta_guid).not.equal(null);",
									"    });",
									"",
									"    pm.test(\"Set record_type as env variable\", function () {",
									"        var req = JSON.parse(pm.request.body.raw);",
									"        pm.environment.set(\"dsx01_record_type\", req.seismicmeta.recordType);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"gtags\": [\r\n        \"tagA\"\r\n    ],\r\n    \"seismicmeta\": {\r\n        \"recordType\": \"seismic3d\",\r\n        \"data\": {\r\n            \"additionalMetaData\": [\r\n                {\r\n                    \"name\": \"SOURCE BARCODE\",\r\n                    \"value\": 3843967263,\r\n                    \"valueAsString\": \"3843967263\"\r\n                },\r\n                {\r\n                    \"name\": \"ORIGINAL FILE NAME\",\r\n                    \"value\": \"1_67_Srv3D_1_8_Original.sgy\",\r\n                    \"valueAsString\": \"1_67_Srv3D_1_8_Original.sgy\"\r\n                },\r\n                {\r\n                    \"name\": \"BIN SPACING\",\r\n                    \"value\": 90,\r\n                    \"valueAsString\": \"90\"\r\n                }\r\n            ],\r\n            \"binGridOperation\": {\r\n                \"binGridOriginEasting\": 1276435.2,\r\n                \"binGridOriginI\": 1,\r\n                \"binGridOriginJ\": 1,\r\n                \"binGridOriginNorthing\": 242030.61,\r\n                \"binGridScaleFactor\": 1,\r\n                \"binNodeIncrementI\": 1,\r\n                \"binNodeIncrementJ\": 1,\r\n                \"binWidthI\": 83.39992,\r\n                \"binWidthJ\": 91.77242,\r\n                \"crsKey\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                \"mapGridBearingJ\": 206.58368,\r\n                \"persistableReferenceCrs\": {\r\n                    \"lateBoundCRS\": {\r\n                        \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"26782\"\r\n                        },\r\n                        \"type\": \"LBC\"\r\n                    },\r\n                    \"singleCT\": {\r\n                        \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"15851\"\r\n                        },\r\n                        \"type\": \"ST\"\r\n                    },\r\n                    \"ver\": \"PE_10_3_1\",\r\n                    \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                    \"authCode\": {\r\n                        \"auth\": \"SLB\",\r\n                        \"code\": \"26782079\"\r\n                    },\r\n                    \"type\": \"EBC\"\r\n                },\r\n                \"transformationMethodNumber\": 1049,\r\n                \"unitKeyBearing\": \"dega\"\r\n            },\r\n            \"binNodePositions\": [\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        1276435.2,\r\n                                        242030.61\r\n                                    ],\r\n                                    [\r\n                                        1281357.8,\r\n                                        239567.36\r\n                                    ],\r\n                                    [\r\n                                        1280002.5,\r\n                                        236859.05\r\n                                    ],\r\n                                    [\r\n                                        1275080,\r\n                                        239322.28\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsMultiPoint\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ]\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"26782\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"26782079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                },\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        -93.60371,\r\n                                        29.312513\r\n                                    ],\r\n                                    [\r\n                                        -93.58811,\r\n                                        29.306007\r\n                                    ],\r\n                                    [\r\n                                        -93.59219,\r\n                                        29.298489\r\n                                    ],\r\n                                    [\r\n                                        -93.60779,\r\n                                        29.304993\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsMultiPoint\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ]\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433],AUTHORITY[\\\"EPSG\\\",4267]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"GCS_North_American_1927\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"4267\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus [4267,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"4267079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                },\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        -93.60387,\r\n                                        29.312752\r\n                                    ],\r\n                                    [\r\n                                        -93.58827,\r\n                                        29.306248\r\n                                    ],\r\n                                    [\r\n                                        -93.592354,\r\n                                        29.298727\r\n                                    ],\r\n                                    [\r\n                                        -93.60795,\r\n                                        29.305231\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsMultiPoint\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ]\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"wkt\": \"GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433],AUTHORITY[\\\"EPSG\\\",4326]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"GCS_WGS_1984\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"4326\"\r\n                        },\r\n                        \"type\": \"LBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                }\r\n            ],\r\n            \"classification\": \"Post-stack, time-migrated\",\r\n            \"dateCreated\": \"2013-03-22T11:16:03Z\",\r\n            \"dateModified\": \"2013-03-22T11:16:03Z\",\r\n            \"derivedBulk\": [\r\n                {\r\n                    \"size\": 1223488818,\r\n                    \"type\": \"ZGY\",\r\n                    \"url\": \"sd://SNTC/colors/test.zgy\"\r\n                },\r\n                {\r\n                    \"size\": 2653649950,\r\n                    \"type\": \"DIO\",\r\n                    \"url\": \"sd://SNTC/colors/test.DIO\"\r\n                }\r\n            ],\r\n            \"description\": \"A comment or a remark.\",\r\n            \"elevationReferenceTime\": {\r\n                \"elevationFromMsl\": {\r\n                    \"unitKey\": \"ft\",\r\n                    \"value\": 0\r\n                },\r\n                \"name\": \"SRD\",\r\n                \"replacementVelocity\": {\r\n                    \"unitKey\": \"ft/s\",\r\n                    \"value\": 4800\r\n                }\r\n            },\r\n            \"externalIds\": [\r\n                \"Petrel:tenant1/ProjectLouisiana/3491763/a9b46fc4-1840-450a-ac01-d15bdaa086ba:aef0e55c-4fcb-4546-a7a2-9df8f27277a1\"\r\n            ],\r\n            \"locationAtIndexZero\": {\r\n                \"features\": [\r\n                    {\r\n                        \"geometry\": {\r\n                            \"coordinates\": [\r\n                                1276435.2,\r\n                                242030.61,\r\n                                -1234\r\n                            ],\r\n                            \"type\": \"AnyCrsPoint\"\r\n                        },\r\n                        \"type\": \"AnyCrsFeature\"\r\n                    }\r\n                ],\r\n                \"persistableReferenceCrs\": {\r\n                    \"lateBoundCRS\": {\r\n                        \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"26782\"\r\n                        },\r\n                        \"type\": \"LBC\"\r\n                    },\r\n                    \"singleCT\": {\r\n                        \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"15851\"\r\n                        },\r\n                        \"type\": \"ST\"\r\n                    },\r\n                    \"ver\": \"PE_10_3_1\",\r\n                    \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                    \"authCode\": {\r\n                        \"auth\": \"SLB\",\r\n                        \"code\": \"26782079\"\r\n                    },\r\n                    \"type\": \"EBC\"\r\n                },\r\n                \"persistableReferenceUnitZ\": {\r\n                    \"scaleOffset\": {\r\n                        \"scale\": 0.001,\r\n                        \"offset\": 0\r\n                    },\r\n                    \"symbol\": \"ms\",\r\n                    \"baseMeasurement\": {\r\n                        \"ancestry\": \"Time\",\r\n                        \"type\": \"UM\"\r\n                    },\r\n                    \"type\": \"USO\"\r\n                },\r\n                \"type\": \"AnyCrsFeatureCollection\"\r\n            },\r\n            \"locationWGS84\": {\r\n                \"features\": [\r\n                    {\r\n                        \"geometry\": {\r\n                            \"coordinates\": [\r\n                                [\r\n                                    [\r\n                                        -93.60387,\r\n                                        29.312752\r\n                                    ],\r\n                                    [\r\n                                        -93.58827,\r\n                                        29.306248\r\n                                    ],\r\n                                    [\r\n                                        -93.592354,\r\n                                        29.298727\r\n                                    ],\r\n                                    [\r\n                                        -93.60795,\r\n                                        29.305231\r\n                                    ],\r\n                                    [\r\n                                        -93.60387,\r\n                                        29.312752\r\n                                    ]\r\n                                ]\r\n                            ],\r\n                            \"type\": \"Polygon\"\r\n                        },\r\n                        \"properties\": {\r\n                            \"name\": \"Survey 4 INLINE_1_67_Srv3D_1_8_Original\"\r\n                        },\r\n                        \"type\": \"Feature\"\r\n                    }\r\n                ],\r\n                \"type\": \"FeatureCollection\"\r\n            },\r\n            \"name\": \"Survey 4 INLINE_1_67_Srv3D_1_8_Original\",\r\n            \"originalBulk\": {\r\n                \"size\": 2873437400,\r\n                \"type\": \"SEGY\",\r\n                \"url\": \"sd://SNTC/colors/test.segy\"\r\n            },\r\n            \"perimeters\": [\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        [\r\n                                            1276435.2,\r\n                                            242030.61\r\n                                        ],\r\n                                        [\r\n                                            1281357.8,\r\n                                            239567.36\r\n                                        ],\r\n                                        [\r\n                                            1280002.5,\r\n                                            236859.05\r\n                                        ],\r\n                                        [\r\n                                            1275080,\r\n                                            239322.28\r\n                                        ],\r\n                                        [\r\n                                            1276435.2,\r\n                                            242030.61\r\n                                        ]\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsPolygon\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ],\r\n                                \"perimeterType\": \"Full Fold Coverage\"\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"26782\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"26782079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                },\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        [\r\n                                            -93.60371,\r\n                                            29.312513\r\n                                        ],\r\n                                        [\r\n                                            -93.58811,\r\n                                            29.306007\r\n                                        ],\r\n                                        [\r\n                                            -93.59219,\r\n                                            29.298489\r\n                                        ],\r\n                                        [\r\n                                            -93.60779,\r\n                                            29.304993\r\n                                        ],\r\n                                        [\r\n                                            -93.60371,\r\n                                            29.312513\r\n                                        ]\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsPolygon\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ],\r\n                                \"perimeterType\": \"Full Fold Coverage\"\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433],AUTHORITY[\\\"EPSG\\\",4267]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"GCS_North_American_1927\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"4267\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus [4267,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"4267079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                }\r\n            ],\r\n            \"rangeAmplitudeMax\": {\r\n                \"unitKey\": \"amplitude\",\r\n                \"value\": 232467.8\r\n            },\r\n            \"rangeAmplitudeMin\": {\r\n                \"unitKey\": \"amplitude\",\r\n                \"value\": -226153.4\r\n            },\r\n            \"rangeCrosslineIncrement\": 1,\r\n            \"rangeCrosslineStart\": 1,\r\n            \"rangeCrosslineStop\": 34,\r\n            \"rangeInlineIncrement\": 1,\r\n            \"rangeInlineStart\": 1,\r\n            \"rangeInlineStop\": 67,\r\n            \"relationships\": {\r\n                \"binGrid\": {\r\n                    \"id\": \"slb:wke:binGrid-5067af51fe6542968ce8868c01af6cb7\"\r\n                },\r\n                \"seismicSurvey\": {\r\n                    \"id\": \"slb:wke:seismicSurvey3d-62d8fe58-c044-537a-b354-7f3f8e860421\",\r\n                    \"name\": \"ST2013-L\"\r\n                },\r\n                \"usesAssociations\": true\r\n            },\r\n            \"seismicProperty\": \"Instantaneous Amplitude\",\r\n            \"stackAngleRangeMax\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": 10\r\n            },\r\n            \"stackAngleRangeMin\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": 0\r\n            },\r\n            \"stackAzimuthRangeMax\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": 20\r\n            },\r\n            \"stackAzimuthRangeMin\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": -20\r\n            },\r\n            \"stackOffsetRangeMax\": {\r\n                \"unitKey\": \"ftUS\",\r\n                \"value\": 3000\r\n            },\r\n            \"stackOffsetRangeMin\": {\r\n                \"unitKey\": \"ftUS\",\r\n                \"value\": 0\r\n            },\r\n            \"stackSubType\": \"Full\",\r\n            \"stackType\": \"Full\",\r\n            \"storageType\": \"32-BIT\",\r\n            \"textualFileHeader\": [\r\n                \"C 1 CLIENT COMPANY CREW NO                                                      C 2 LINE line1dS AREA MAP ID                                                    C 3 REEL NO DAY-START OF REEL YEAR OBSERVER                                     C 4 INSTRUMENT: DELPH MODEL xx SERIAL NO                                        C 5 DATA TRACES/RECORD 1 AUXILIARY TRACES/RECORD 0 CDP FOLD                     C 6 SAMPLE INTERVAL 333 SAMPLES/TRACE 1496 BITS/IN 16 BYTES/SAMPLE 2            C 7 RECORDING FORMAT FORMAT THIS REEL MEASUREMENT SYSTEM                        C 8 SAMPLE CODE: FIXED PT                                                       C 9 GAIN TYPE: FIXED                                                            C10 FILTERS: ALIAS 1500HZ NOTCH HZ BAND - HZ SLOPE - DB/OCT                     C11 SOURCE: TYPE NUMBER/POINT POINT INTERVAL                                    C12 PATTERN: LENGTH WIDTH                                                       C13 SWEEP: START HZ END HZ LENGTH MS CHANEL NO TYPE                             C14 TAPER: START LENGTH MS END LENGTH MS TYPE                                   C15 SPREAD: OFFSET MAX DISTANCE GROUP INTERVAL                                  C16 GEOPHONES: PER GROUP SPACING FREQUENCY MFG MODEL                            C17 PATTERN: LENGTH WIDTH                                                       C18 TRACES SORTED BY: RECORD                                                    C19 AMPLITUDE RECOVERY: NONE                                                    C20 MAP PROJECTION ZONE ID COORDINATE UNITS                                     C21 PROCESSING:                                                                 C22 PROCESSING:                                                                 C23                                                                             C24                                                                             C25                                                                             C26                                                                             C27                                                                             C28                                                                             C29                                                                             C30                                                                             C31                                                                             C32                                                                             C33                                                                             C34                                                                             C35                                                                             C36                                                                             C37                                                                             C38                                                                             C39                                                                             C40 END EBCDIC                                                                  \"\r\n            ],\r\n            \"verticalDomain\": \"Elevation time (two-way travel time)\",\r\n            \"verticalIncrement\": {\r\n                \"unitKey\": \"ms\",\r\n                \"value\": -4\r\n            },\r\n            \"verticalSampleCount\": 1000,\r\n            \"verticalStart\": {\r\n                \"unitKey\": \"ms\",\r\n                \"value\": 0\r\n            },\r\n            \"verticalStop\": {\r\n                \"unitKey\": \"ms\",\r\n                \"value\": -3996\r\n            },\r\n            \"vintage\": \"ST2013-InstantaneousAmplitude\",\r\n            \"waveType\": \"PP\"\r\n        },\r\n        \"kind\": \"{{datapartition}}:wks:seismic3d:1.0.5\",\r\n        \"legal\": {\r\n            \"legaltags\": [\r\n                \"{{legaltag01}}\"\r\n            ],\r\n            \"otherRelevantDataCountries\": [\r\n                \"US\",\r\n                \"BE\",\r\n                \"NO\",\r\n                \"IN\"\r\n            ]\r\n        },\r\n        \"meta\": [\r\n            {\r\n                \"kind\": \"Unit\",\r\n                \"name\": \"ft/s\",\r\n                \"persistableReference\": {\r\n                    \"scaleOffset\": {\r\n                        \"scale\": 0.3048,\r\n                        \"offset\": 0\r\n                    },\r\n                    \"symbol\": \"ft/s\",\r\n                    \"baseMeasurement\": {\r\n                        \"ancestry\": \"Velocity\",\r\n                        \"type\": \"UM\"\r\n                    },\r\n                    \"type\": \"USO\"\r\n                },\r\n                \"propertyNames\": [\r\n                    \"elevationReferenceTime.replacementVelocity.value\"\r\n                ]\r\n            },\r\n            {\r\n                \"kind\": \"Unit\",\r\n                \"name\": \"ftUS\",\r\n                \"persistableReference\": {\r\n                    \"scaleOffset\": {\r\n                        \"scale\": 0.3048006,\r\n                        \"offset\": 0\r\n                    },\r\n                    \"symbol\": \"ftUS\",\r\n                    \"baseMeasurement\": {\r\n                        \"ancestry\": \"Length\",\r\n                        \"type\": \"UM\"\r\n                    },\r\n                    \"type\": \"USO\"\r\n                },\r\n                \"propertyNames\": [\r\n                    \"stackOffsetRangeMin.value\",\r\n                    \"stackOffsetRangeMax.value\"\r\n                ]\r\n            },\r\n            {\r\n                \"kind\": \"DateTime\",\r\n                \"name\": \"datetime\",\r\n                \"persistableReference\": {\r\n                    \"format\": \"yyyy-MM-ddTHH:mm:ssZ\",\r\n                    \"timeZone\": \"UTC\",\r\n                    \"type\": \"DTM\"\r\n                },\r\n                \"propertyNames\": [\r\n                    \"dateCreated\",\r\n                    \"dateModified\"\r\n                ]\r\n            },\r\n            {\r\n                \"kind\": \"Measurement\",\r\n                \"name\": \"ShortTime\",\r\n                \"persistableReference\": {\r\n                    \"ancestry\": \"Time.Short_Time\",\r\n                    \"type\": \"UM\"\r\n                },\r\n                \"propertyNames\": [\r\n                    \"verticalDomain\"\r\n                ]\r\n            },\r\n            {\r\n                \"kind\": \"Unit\",\r\n                \"name\": \"ms\",\r\n                \"persistableReference\": {\r\n                    \"scaleOffset\": {\r\n                        \"scale\": 0.001,\r\n                        \"offset\": 0\r\n                    },\r\n                    \"symbol\": \"ms\",\r\n                    \"baseMeasurement\": {\r\n                        \"ancestry\": \"Time\",\r\n                        \"type\": \"UM\"\r\n                    },\r\n                    \"type\": \"USO\"\r\n                },\r\n                \"propertyNames\": [\r\n                    \"verticalStart.value\",\r\n                    \"verticalIncrement.value\",\r\n                    \"verticalStop.value\"\r\n                ]\r\n            },\r\n            {\r\n                \"kind\": \"Unit\",\r\n                \"name\": \"amplitude\",\r\n                \"persistableReference\": {\r\n                    \"scaleOffset\": {\r\n                        \"scale\": 1,\r\n                        \"offset\": 0\r\n                    },\r\n                    \"symbol\": \"----\",\r\n                    \"baseMeasurement\": {\r\n                        \"ancestry\": \"Dimensionless\",\r\n                        \"type\": \"UM\"\r\n                    },\r\n                    \"type\": \"USO\"\r\n                },\r\n                \"propertyNames\": [\r\n                    \"rangeAmplitudeMax.value\",\r\n                    \"rangeAmplitudeMin.value\"\r\n                ]\r\n            },\r\n            {\r\n                \"kind\": \"Unit\",\r\n                \"name\": \"ft\",\r\n                \"persistableReference\": {\r\n                    \"scaleOffset\": {\r\n                        \"scale\": 0.3048,\r\n                        \"offset\": 0\r\n                    },\r\n                    \"symbol\": \"ft\",\r\n                    \"baseMeasurement\": {\r\n                        \"ancestry\": \"Length\",\r\n                        \"type\": \"UM\"\r\n                    },\r\n                    \"type\": \"USO\"\r\n                },\r\n                \"propertyNames\": [\r\n                    \"elevationReferenceTime.elevationFromMsl.value\"\r\n                ]\r\n            },\r\n            {\r\n                \"kind\": \"Measurement\",\r\n                \"name\": \"seismicProperty\",\r\n                \"persistableReference\": {\r\n                    \"ancestry\": \"Dimensionless.Amplitude.Acoustic_Amplitude.Analytic_Trace.Instantaneous_Amplitude\",\r\n                    \"type\": \"UM\"\r\n                },\r\n                \"propertyNames\": [\r\n                    \"seismicProperty\"\r\n                ]\r\n            },\r\n            {\r\n                \"kind\": \"Unit\",\r\n                \"name\": \"deg\",\r\n                \"persistableReference\": {\r\n                    \"scaleOffset\": {\r\n                        \"scale\": 0.017453292,\r\n                        \"offset\": 0\r\n                    },\r\n                    \"symbol\": \"dega\",\r\n                    \"baseMeasurement\": {\r\n                        \"ancestry\": \"Plane_Angle\",\r\n                        \"type\": \"UM\"\r\n                    },\r\n                    \"type\": \"USO\"\r\n                },\r\n                \"propertyNames\": [\r\n                    \"stackAngleRangeMin.value\",\r\n                    \"stackAngleRangeMax.value\",\r\n                    \"stackAzimuthRangeMin.value\",\r\n                    \"stackAzimuthRangeMax.value\"\r\n                ]\r\n            }\r\n        ],\r\n        \"version\": 1040891613125385\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET CLOSE SEISMICMETA 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded}}&close={{sbit}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								},
								{
									"key": "close",
									"value": "{{sbit}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET GET AND CHECK IF THE RECORD_TYPE IS USED IN THE SEISMICMETA_GUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check content type\", function () {",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"    });",
									"",
									"    pm.test(\"Dataset name\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get('dsx01'));",
									"    });",
									"",
									"    pm.test(\"tenant\", function () {",
									"        pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"    });",
									"",
									"    pm.test(\"subproject\", function () {",
									"        pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"    });",
									"",
									"    pm.test(\"path\", function () {",
									"        pm.expect(jsonData.path).to.eql(pm.environment.get('testPath'));",
									"    });",
									"",
									"    pm.test(\"ltag\", function () {",
									"        pm.expect(jsonData.ltag).to.eql(pm.environment.get('legaltag01'));",
									"    });",
									"",
									"    pm.test(\"Dates are present\", function () {",
									"        pm.expect(jsonData.created_date).to.exist;",
									"        pm.expect(jsonData.last_modified_date).to.exist;",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(0);",
									"    });",
									"",
									"    pm.test(\"sbit\", function () {",
									"        postman.setEnvironmentVariable(\"sbit\", jsonData.sbit);",
									"    });",
									"",
									"    pm.test(\"gcsurl\", () => {",
									"        postman.setEnvironmentVariable(\"gcsBucketName\", jsonData.gcsurl.split('/')[0]);",
									"        postman.setEnvironmentVariable(\"gcsObjectPrefix\", jsonData.gcsurl.split('/')[1]);",
									"    })",
									"",
									"    pm.test(\"Check gtag\", function () {",
									"        pm.expect(jsonData.gtags.length).to.eql(1);",
									"        pm.expect(jsonData.gtags[0]).to.eql(\"tagA\");",
									"    });",
									"",
									"    pm.test(\"Check seismicmetadata\", () => {",
									"        pm.expect(jsonData.seismicmeta).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.id).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.kind).to.eql(pm.environment.get('datapartition') + \":wks:seismic3d:1.0.5\");",
									"        pm.expect(jsonData.seismicmeta.acl).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.acl.viewers).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.acl.owners).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.legal).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.legal.legaltags).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.legal.otherRelevantDataCountries).to.contain(\"US\");",
									"        pm.expect(jsonData.seismicmeta.data.binNodePositions[0].features[0].geometry.coordinates[0][1]).to.equal(242030.61);",
									"        pm.expect(jsonData.seismicmeta.data.binNodePositions[0].features[0].geometry.type).to.equal(\"AnyCrsMultiPoint\");",
									"    });",
									"",
									"    pm.test(\"Check the record_type inclusion in dataset seismicmeta_guid\", ()=> {",
									"        const dsx01_record_type = pm.environment.get(\"dsx01_record_type\")",
									"        const record_type = jsonData.seismicmeta_guid.split(\":\")[1] ",
									"        pm.expect(dsx01_record_type).to.equal(record_type)",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded}}&seismicmeta=true",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								},
								{
									"key": "seismicmeta",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET DELETE SEISMICMETA 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET REGISTER WITH SEISMICMETA (Customer_acl_ID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check content type\", function () {",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"    });",
									"",
									"    pm.test(\"Dataset name\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get('dsx01'));",
									"    });",
									"",
									"    pm.test(\"tenant\", function () {",
									"        pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"    });",
									"",
									"    pm.test(\"subproject\", function () {",
									"        pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"    });",
									"",
									"    pm.test(\"path\", function () {",
									"        pm.expect(jsonData.path).to.eql(pm.environment.get('testPath'));",
									"    });",
									"",
									"    pm.test(\"ltag\", function () {",
									"        pm.expect(jsonData.ltag).to.eql(pm.environment.get('legaltag01'));",
									"    });",
									"",
									"    pm.test(\"Dates are present\", function () {",
									"        pm.expect(jsonData.created_date).to.exist;",
									"        pm.expect(jsonData.last_modified_date).to.exist;",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(1);",
									"        postman.setEnvironmentVariable(\"sbit\", jsonData.sbit);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\r\n    \"kind\": \"slb:wks:seismic3d:1.0.5\",\r\n  \"acl\": {\r\n\r\n    \"viewers\": [\r\n\r\n      \"data.default.viewers@slb.p4d.cloud.slb-ds.com\"\r\n\r\n    ],\r\n\r\n    \"owners\": [\r\n\r\n      \"data.default.owners@slb.p4d.cloud.slb-ds.com\"\r\n\r\n    ]\r\n\r\n },\r\n\r\n    \"id\": \"slb:seismic3d:XGdNU3Wa5TEST\",\r\n    \"legal\": {\r\n      \"legaltags\": [\r\n        \"slb-NO-Testdata\"\r\n      ],\r\n      \"otherRelevantDataCountries\": [\r\n        \"US\"\r\n      ]\r\n    },\r\n    \"data\": {\r\n      \"msg\": \"hello world, from Data Ecosystem\"\r\n    }\r\n  }"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET CLOSE SEISMICMETA 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded}}&close={{sbit}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								},
								{
									"key": "close",
									"value": "{{sbit}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET GET AND CHECK IF  it exist or not",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check content type\", function () {",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"    });",
									"",
									"    pm.test(\"Dataset name\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get('dsx01'));",
									"    });",
									"",
									"    pm.test(\"tenant\", function () {",
									"        pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"    });",
									"",
									"    pm.test(\"subproject\", function () {",
									"        pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"    });",
									"",
									"    pm.test(\"path\", function () {",
									"        pm.expect(jsonData.path).to.eql(pm.environment.get('testPath'));",
									"    });",
									"",
									"    pm.test(\"ltag\", function () {",
									"        pm.expect(jsonData.ltag).to.eql(pm.environment.get('legaltag01'));",
									"    });",
									"",
									"    pm.test(\"Dates are present\", function () {",
									"        pm.expect(jsonData.created_date).to.exist;",
									"        pm.expect(jsonData.last_modified_date).to.exist;",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(0);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded}}&seismicmeta=true",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								},
								{
									"key": "seismicmeta",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET DELETE SEISMICMETA 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET REGISTER WITHOUT SEISMICMETA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"        postman.setEnvironmentVariable(\"sbit\", pm.response.json().sbit);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET PATCH + SEISMICMETA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check seismicmetadata\", () => {",
									"        pm.expect(jsonData.seismicmeta_guid).not.equal(null);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"seismicmeta\": {\r\n        \"data\": {\r\n            \"additionalMetaData\": [\r\n                {\r\n                    \"name\": \"SOURCE BARCODE\",\r\n                    \"value\": 3843967263,\r\n                    \"valueAsString\": \"3843967263\"\r\n                },\r\n                {\r\n                    \"name\": \"ORIGINAL FILE NAME\",\r\n                    \"value\": \"1_67_Srv3D_1_8_Original.sgy\",\r\n                    \"valueAsString\": \"1_67_Srv3D_1_8_Original.sgy\"\r\n                },\r\n                {\r\n                    \"name\": \"BIN SPACING\",\r\n                    \"value\": 90,\r\n                    \"valueAsString\": \"90\"\r\n                }\r\n            ],\r\n            \"binGridOperation\": {\r\n                \"binGridOriginEasting\": 1276435.2,\r\n                \"binGridOriginI\": 1,\r\n                \"binGridOriginJ\": 1,\r\n                \"binGridOriginNorthing\": 242030.61,\r\n                \"binGridScaleFactor\": 1,\r\n                \"binNodeIncrementI\": 1,\r\n                \"binNodeIncrementJ\": 1,\r\n                \"binWidthI\": 83.39992,\r\n                \"binWidthJ\": 91.77242,\r\n                \"crsKey\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                \"mapGridBearingJ\": 206.58368,\r\n                \"persistableReferenceCrs\": {\r\n                    \"lateBoundCRS\": {\r\n                        \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"26782\"\r\n                        },\r\n                        \"type\": \"LBC\"\r\n                    },\r\n                    \"singleCT\": {\r\n                        \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"15851\"\r\n                        },\r\n                        \"type\": \"ST\"\r\n                    },\r\n                    \"ver\": \"PE_10_3_1\",\r\n                    \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                    \"authCode\": {\r\n                        \"auth\": \"SLB\",\r\n                        \"code\": \"26782079\"\r\n                    },\r\n                    \"type\": \"EBC\"\r\n                },\r\n                \"transformationMethodNumber\": 1049,\r\n                \"unitKeyBearing\": \"dega\"\r\n            },\r\n            \"binNodePositions\": [\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        1276435.2,\r\n                                        242030.61\r\n                                    ],\r\n                                    [\r\n                                        1281357.8,\r\n                                        239567.36\r\n                                    ],\r\n                                    [\r\n                                        1280002.5,\r\n                                        236859.05\r\n                                    ],\r\n                                    [\r\n                                        1275080,\r\n                                        239322.28\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsMultiPoint\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ]\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"26782\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"26782079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                },\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        -93.60371,\r\n                                        29.312513\r\n                                    ],\r\n                                    [\r\n                                        -93.58811,\r\n                                        29.306007\r\n                                    ],\r\n                                    [\r\n                                        -93.59219,\r\n                                        29.298489\r\n                                    ],\r\n                                    [\r\n                                        -93.60779,\r\n                                        29.304993\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsMultiPoint\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ]\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433],AUTHORITY[\\\"EPSG\\\",4267]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"GCS_North_American_1927\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"4267\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus [4267,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"4267079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                },\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        -93.60387,\r\n                                        29.312752\r\n                                    ],\r\n                                    [\r\n                                        -93.58827,\r\n                                        29.306248\r\n                                    ],\r\n                                    [\r\n                                        -93.592354,\r\n                                        29.298727\r\n                                    ],\r\n                                    [\r\n                                        -93.60795,\r\n                                        29.305231\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsMultiPoint\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ]\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"wkt\": \"GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433],AUTHORITY[\\\"EPSG\\\",4326]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"GCS_WGS_1984\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"4326\"\r\n                        },\r\n                        \"type\": \"LBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                }\r\n            ],\r\n            \"classification\": \"Post-stack, time-migrated\",\r\n            \"dateCreated\": \"2013-03-22T11:16:03Z\",\r\n            \"dateModified\": \"2013-03-22T11:16:03Z\",\r\n            \"derivedBulk\": [\r\n                {\r\n                    \"size\": 1223488818,\r\n                    \"type\": \"ZGY\",\r\n                    \"url\": \"sd://SNTC/colors/test.zgy\"\r\n                },\r\n                {\r\n                    \"size\": 2653649950,\r\n                    \"type\": \"DIO\",\r\n                    \"url\": \"sd://SNTC/colors/test.DIO\"\r\n                }\r\n            ],\r\n            \"description\": \"A comment or a remark.\",\r\n            \"elevationReferenceTime\": {\r\n                \"elevationFromMsl\": {\r\n                    \"unitKey\": \"ft\",\r\n                    \"value\": 0\r\n                },\r\n                \"name\": \"SRD\",\r\n                \"replacementVelocity\": {\r\n                    \"unitKey\": \"ft/s\",\r\n                    \"value\": 4800\r\n                }\r\n            },\r\n            \"externalIds\": [\r\n                \"Petrel:tenant1/ProjectLouisiana/3491763/a9b46fc4-1840-450a-ac01-d15bdaa086ba:aef0e55c-4fcb-4546-a7a2-9df8f27277a1\"\r\n            ],\r\n            \"locationAtIndexZero\": {\r\n                \"features\": [\r\n                    {\r\n                        \"geometry\": {\r\n                            \"coordinates\": [\r\n                                1276435.2,\r\n                                242030.61,\r\n                                -1234\r\n                            ],\r\n                            \"type\": \"AnyCrsPoint\"\r\n                        },\r\n                        \"type\": \"AnyCrsFeature\"\r\n                    }\r\n                ],\r\n                \"persistableReferenceCrs\": {\r\n                    \"lateBoundCRS\": {\r\n                        \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"26782\"\r\n                        },\r\n                        \"type\": \"LBC\"\r\n                    },\r\n                    \"singleCT\": {\r\n                        \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"15851\"\r\n                        },\r\n                        \"type\": \"ST\"\r\n                    },\r\n                    \"ver\": \"PE_10_3_1\",\r\n                    \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                    \"authCode\": {\r\n                        \"auth\": \"SLB\",\r\n                        \"code\": \"26782079\"\r\n                    },\r\n                    \"type\": \"EBC\"\r\n                },\r\n                \"persistableReferenceUnitZ\": {\r\n                    \"scaleOffset\": {\r\n                        \"scale\": 0.001,\r\n                        \"offset\": 0\r\n                    },\r\n                    \"symbol\": \"ms\",\r\n                    \"baseMeasurement\": {\r\n                        \"ancestry\": \"Time\",\r\n                        \"type\": \"UM\"\r\n                    },\r\n                    \"type\": \"USO\"\r\n                },\r\n                \"type\": \"AnyCrsFeatureCollection\"\r\n            },\r\n            \"locationWGS84\": {\r\n                \"features\": [\r\n                    {\r\n                        \"geometry\": {\r\n                            \"coordinates\": [\r\n                                [\r\n                                    [\r\n                                        -93.60387,\r\n                                        29.312752\r\n                                    ],\r\n                                    [\r\n                                        -93.58827,\r\n                                        29.306248\r\n                                    ],\r\n                                    [\r\n                                        -93.592354,\r\n                                        29.298727\r\n                                    ],\r\n                                    [\r\n                                        -93.60795,\r\n                                        29.305231\r\n                                    ],\r\n                                    [\r\n                                        -93.60387,\r\n                                        29.312752\r\n                                    ]\r\n                                ]\r\n                            ],\r\n                            \"type\": \"Polygon\"\r\n                        },\r\n                        \"properties\": {\r\n                            \"name\": \"Survey 4 INLINE_1_67_Srv3D_1_8_Original\"\r\n                        },\r\n                        \"type\": \"Feature\"\r\n                    }\r\n                ],\r\n                \"type\": \"FeatureCollection\"\r\n            },\r\n            \"name\": \"Survey 4 INLINE_1_67_Srv3D_1_8_Original\",\r\n            \"originalBulk\": {\r\n                \"size\": 2873437400,\r\n                \"type\": \"SEGY\",\r\n                \"url\": \"sd://SNTC/colors/test.segy\"\r\n            },\r\n            \"perimeters\": [\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        [\r\n                                            1276435.2,\r\n                                            242030.61\r\n                                        ],\r\n                                        [\r\n                                            1281357.8,\r\n                                            239567.36\r\n                                        ],\r\n                                        [\r\n                                            1280002.5,\r\n                                            236859.05\r\n                                        ],\r\n                                        [\r\n                                            1275080,\r\n                                            239322.28\r\n                                        ],\r\n                                        [\r\n                                            1276435.2,\r\n                                            242030.61\r\n                                        ]\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsPolygon\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ],\r\n                                \"perimeterType\": \"Full Fold Coverage\"\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"26782\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"26782079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                },\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        [\r\n                                            -93.60371,\r\n                                            29.312513\r\n                                        ],\r\n                                        [\r\n                                            -93.58811,\r\n                                            29.306007\r\n                                        ],\r\n                                        [\r\n                                            -93.59219,\r\n                                            29.298489\r\n                                        ],\r\n                                        [\r\n                                            -93.60779,\r\n                                            29.304993\r\n                                        ],\r\n                                        [\r\n                                            -93.60371,\r\n                                            29.312513\r\n                                        ]\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsPolygon\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ],\r\n                                \"perimeterType\": \"Full Fold Coverage\"\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433],AUTHORITY[\\\"EPSG\\\",4267]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"GCS_North_American_1927\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"4267\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus [4267,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"4267079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                }\r\n            ],\r\n            \"rangeAmplitudeMax\": {\r\n                \"unitKey\": \"amplitude\",\r\n                \"value\": 232467.8\r\n            },\r\n            \"rangeAmplitudeMin\": {\r\n                \"unitKey\": \"amplitude\",\r\n                \"value\": -226153.4\r\n            },\r\n            \"rangeCrosslineIncrement\": 1,\r\n            \"rangeCrosslineStart\": 1,\r\n            \"rangeCrosslineStop\": 34,\r\n            \"rangeInlineIncrement\": 1,\r\n            \"rangeInlineStart\": 1,\r\n            \"rangeInlineStop\": 67,\r\n            \"relationships\": {\r\n                \"binGrid\": {\r\n                    \"id\": \"slb:wke:binGrid-5067af51fe6542968ce8868c01af6cb7\"\r\n                },\r\n                \"seismicSurvey\": {\r\n                    \"id\": \"slb:wke:seismicSurvey3d-62d8fe58-c044-537a-b354-7f3f8e860421\",\r\n                    \"name\": \"ST2013-L\"\r\n                },\r\n                \"usesAssociations\": true\r\n            },\r\n            \"seismicProperty\": \"Instantaneous Amplitude\",\r\n            \"stackAngleRangeMax\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": 10\r\n            },\r\n            \"stackAngleRangeMin\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": 0\r\n            },\r\n            \"stackAzimuthRangeMax\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": 20\r\n            },\r\n            \"stackAzimuthRangeMin\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": -20\r\n            },\r\n            \"stackOffsetRangeMax\": {\r\n                \"unitKey\": \"ftUS\",\r\n                \"value\": 3000\r\n            },\r\n            \"stackOffsetRangeMin\": {\r\n                \"unitKey\": \"ftUS\",\r\n                \"value\": 0\r\n            },\r\n            \"stackSubType\": \"Full\",\r\n            \"stackType\": \"Full\",\r\n            \"storageType\": \"32-BIT\",\r\n            \"textualFileHeader\": [\r\n                \"C 1 CLIENT COMPANY CREW NO                                                      C 2 LINE line1dS AREA MAP ID                                                    C 3 REEL NO DAY-START OF REEL YEAR OBSERVER                                     C 4 INSTRUMENT: DELPH MODEL xx SERIAL NO                                        C 5 DATA TRACES/RECORD 1 AUXILIARY TRACES/RECORD 0 CDP FOLD                     C 6 SAMPLE INTERVAL 333 SAMPLES/TRACE 1496 BITS/IN 16 BYTES/SAMPLE 2            C 7 RECORDING FORMAT FORMAT THIS REEL MEASUREMENT SYSTEM                        C 8 SAMPLE CODE: FIXED PT                                                       C 9 GAIN TYPE: FIXED                                                            C10 FILTERS: ALIAS 1500HZ NOTCH HZ BAND - HZ SLOPE - DB/OCT                     C11 SOURCE: TYPE NUMBER/POINT POINT INTERVAL                                    C12 PATTERN: LENGTH WIDTH                                                       C13 SWEEP: START HZ END HZ LENGTH MS CHANEL NO TYPE                             C14 TAPER: START LENGTH MS END LENGTH MS TYPE                                   C15 SPREAD: OFFSET MAX DISTANCE GROUP INTERVAL                                  C16 GEOPHONES: PER GROUP SPACING FREQUENCY MFG MODEL                            C17 PATTERN: LENGTH WIDTH                                                       C18 TRACES SORTED BY: RECORD                                                    C19 AMPLITUDE RECOVERY: NONE                                                    C20 MAP PROJECTION ZONE ID COORDINATE UNITS                                     C21 PROCESSING:                                                                 C22 PROCESSING:                                                                 C23                                                                             C24                                                                             C25                                                                             C26                                                                             C27                                                                             C28                                                                             C29                                                                             C30                                                                             C31                                                                             C32                                                                             C33                                                                             C34                                                                             C35                                                                             C36                                                                             C37                                                                             C38                                                                             C39                                                                             C40 END EBCDIC                                                                  \"\r\n            ],\r\n            \"verticalDomain\": \"Elevation time (two-way travel time)\",\r\n            \"verticalIncrement\": {\r\n                \"unitKey\": \"ms\",\r\n                \"value\": -4\r\n            },\r\n            \"verticalSampleCount\": 1000,\r\n            \"verticalStart\": {\r\n                \"unitKey\": \"ms\",\r\n                \"value\": 0\r\n            },\r\n            \"verticalStop\": {\r\n                \"unitKey\": \"ms\",\r\n                \"value\": -3996\r\n            },\r\n            \"vintage\": \"ST2013-InstantaneousAmplitude\",\r\n            \"waveType\": \"PP\"\r\n        },\r\n        \"kind\": \"{{datapartition}}:wks:seismic3d:1.0.5\",\r\n        \"legal\": {\r\n            \"legaltags\": [\r\n                \"{{legaltag01}}\"\r\n            ],\r\n            \"otherRelevantDataCountries\": [\r\n                \"US\",\r\n                \"BE\",\r\n                \"NO\",\r\n                \"IN\"\r\n            ]\r\n        },\r\n        \"version\": 1040891613125385\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded}}&close={{sbit}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								},
								{
									"key": "close",
									"value": "{{sbit}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET DELETE SEISMICMETA 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "STATUS UNSET SEISMICMETA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.unset('dsx01')",
									"pm.environment.unset('dsx02')",
									"pm.environment.unset('testPath')",
									"pm.environment.unset('testPathEncoded')",
									"pm.environment.unset('sbit')",
									"pm.environment.unset('gcsBucketName')",
									"pm.environment.unset('gcsObjectPrefix')",
									"pm.environment.unset('dsx01_record_type')",
									"postman.setEnvironmentVariable('execCounter', 1)",
									"console.log('Dataset variables were removed for seismicmeta folder');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/svcstatus",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"svcstatus"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "domain-api-schema-management",
			"item": [
				{
					"name": "CHECK IF DOMAIN API TESTS ARE ENABLED Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code >= 500) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Body matches string\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"service OK\");",
									"    });",
									"",
									"    if(pm.environment.get(\"runDomainAPITests\") == 'false' || pm.environment.get(\"runDomainAPITests\") == undefined  ){",
									"        postman.setNextRequest(\"STATUS SET TAGS\")",
									"    }",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/svcstatus",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"svcstatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "INITIALIZE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code >= 500) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Body matches string\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"service OK\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function makeID_seismicmeta(length) {\r",
									"   var result           = '';\r",
									"   var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"   var charactersLength = characters.length;\r",
									"   for ( var i = 0; i < length; i++ ) {\r",
									"      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"   }\r",
									"   return result;\r",
									"}\r",
									"\r",
									"postman.setEnvironmentVariable(\"dsx01\", makeID_seismicmeta(16));\r",
									"postman.setEnvironmentVariable(\"dsx02\", makeID_seismicmeta(16));\r",
									"postman.setEnvironmentVariable(\"dsx03\", makeID_seismicmeta(16));\r",
									"var path = \"/\" + makeID_seismicmeta(8) + \"/\" + makeID_seismicmeta(4) + \"/\" + makeID_seismicmeta(4) + \"/\"\r",
									"postman.setEnvironmentVariable(\"testPath\", path);\r",
									"postman.setEnvironmentVariable(\"testPathEncoded\", encodeURIComponent(path));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/svcstatus",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"svcstatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET REGISTER WITH MORE THAN ONE STORAGE SCHEMA RECORD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code >= 500) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 400 as the request has more than one storage schema record type\", function () {",
									"        pm.response.to.have.status(400);",
									"    }) ",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"seismicmeta\": {},\r\n  \"openzgy_v1\": {}\r\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET REGISTER + SEISMICMETA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code >= 500) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check content type\", function () {",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"    });",
									"",
									"    pm.test(\"Dataset name\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get('dsx01'));",
									"    });",
									"",
									"    pm.test(\"tenant\", function () {",
									"        pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"    });",
									"",
									"    pm.test(\"subproject\", function () {",
									"        pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"    });",
									"",
									"    pm.test(\"path\", function () {",
									"        pm.expect(jsonData.path).to.eql(pm.environment.get('testPath'));",
									"    });",
									"",
									"    pm.test(\"ltag\", function () {",
									"        pm.expect(jsonData.ltag).to.eql(pm.environment.get('legaltag01'));",
									"    });",
									"",
									"    pm.test(\"Dates are present\", function () {",
									"        pm.expect(jsonData.created_date).to.exist;",
									"        pm.expect(jsonData.last_modified_date).to.exist;",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(1);",
									"        postman.setEnvironmentVariable(\"sbit\", jsonData.sbit);",
									"    });",
									"",
									"    pm.test(\"Check gtag\", function () {",
									"        pm.expect(jsonData.gtags.length).to.eql(1);",
									"        pm.expect(jsonData.gtags[0]).to.eql(\"tagA\");",
									"    });",
									"",
									"    pm.test(\"Check seismicmetadata\", () => {",
									"        pm.expect(jsonData.seismicmeta_guid).not.equal(null);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"gtags\": [\r\n        \"tagA\"\r\n    ],\r\n    \"seismicmeta\": {\r\n        \"data\": {\r\n            \"additionalMetaData\": [\r\n                {\r\n                    \"name\": \"SOURCE BARCODE\",\r\n                    \"value\": 3843967263,\r\n                    \"valueAsString\": \"3843967263\"\r\n                },\r\n                {\r\n                    \"name\": \"ORIGINAL FILE NAME\",\r\n                    \"value\": \"1_67_Srv3D_1_8_Original.sgy\",\r\n                    \"valueAsString\": \"1_67_Srv3D_1_8_Original.sgy\"\r\n                },\r\n                {\r\n                    \"name\": \"BIN SPACING\",\r\n                    \"value\": 90,\r\n                    \"valueAsString\": \"90\"\r\n                }\r\n            ],\r\n            \"binGridOperation\": {\r\n                \"binGridOriginEasting\": 1276435.2,\r\n                \"binGridOriginI\": 1,\r\n                \"binGridOriginJ\": 1,\r\n                \"binGridOriginNorthing\": 242030.61,\r\n                \"binGridScaleFactor\": 1,\r\n                \"binNodeIncrementI\": 1,\r\n                \"binNodeIncrementJ\": 1,\r\n                \"binWidthI\": 83.39992,\r\n                \"binWidthJ\": 91.77242,\r\n                \"crsKey\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                \"mapGridBearingJ\": 206.58368,\r\n                \"persistableReferenceCrs\": {\r\n                    \"lateBoundCRS\": {\r\n                        \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"26782\"\r\n                        },\r\n                        \"type\": \"LBC\"\r\n                    },\r\n                    \"singleCT\": {\r\n                        \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"15851\"\r\n                        },\r\n                        \"type\": \"ST\"\r\n                    },\r\n                    \"ver\": \"PE_10_3_1\",\r\n                    \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                    \"authCode\": {\r\n                        \"auth\": \"SLB\",\r\n                        \"code\": \"26782079\"\r\n                    },\r\n                    \"type\": \"EBC\"\r\n                },\r\n                \"transformationMethodNumber\": 1049,\r\n                \"unitKeyBearing\": \"dega\"\r\n            },\r\n            \"binNodePositions\": [\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        1276435.2,\r\n                                        242030.61\r\n                                    ],\r\n                                    [\r\n                                        1281357.8,\r\n                                        239567.36\r\n                                    ],\r\n                                    [\r\n                                        1280002.5,\r\n                                        236859.05\r\n                                    ],\r\n                                    [\r\n                                        1275080,\r\n                                        239322.28\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsMultiPoint\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ]\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"26782\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"26782079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                },\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        -93.60371,\r\n                                        29.312513\r\n                                    ],\r\n                                    [\r\n                                        -93.58811,\r\n                                        29.306007\r\n                                    ],\r\n                                    [\r\n                                        -93.59219,\r\n                                        29.298489\r\n                                    ],\r\n                                    [\r\n                                        -93.60779,\r\n                                        29.304993\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsMultiPoint\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ]\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433],AUTHORITY[\\\"EPSG\\\",4267]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"GCS_North_American_1927\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"4267\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus [4267,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"4267079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                },\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        -93.60387,\r\n                                        29.312752\r\n                                    ],\r\n                                    [\r\n                                        -93.58827,\r\n                                        29.306248\r\n                                    ],\r\n                                    [\r\n                                        -93.592354,\r\n                                        29.298727\r\n                                    ],\r\n                                    [\r\n                                        -93.60795,\r\n                                        29.305231\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsMultiPoint\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ]\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"wkt\": \"GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433],AUTHORITY[\\\"EPSG\\\",4326]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"GCS_WGS_1984\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"4326\"\r\n                        },\r\n                        \"type\": \"LBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                }\r\n            ],\r\n            \"classification\": \"Post-stack, time-migrated\",\r\n            \"dateCreated\": \"2013-03-22T11:16:03Z\",\r\n            \"dateModified\": \"2013-03-22T11:16:03Z\",\r\n            \"derivedBulk\": [\r\n                {\r\n                    \"size\": 1223488818,\r\n                    \"type\": \"ZGY\",\r\n                    \"url\": \"sd://SNTC/colors/test.zgy\"\r\n                },\r\n                {\r\n                    \"size\": 2653649950,\r\n                    \"type\": \"DIO\",\r\n                    \"url\": \"sd://SNTC/colors/test.DIO\"\r\n                }\r\n            ],\r\n            \"description\": \"A comment or a remark.\",\r\n            \"elevationReferenceTime\": {\r\n                \"elevationFromMsl\": {\r\n                    \"unitKey\": \"ft\",\r\n                    \"value\": 0\r\n                },\r\n                \"name\": \"SRD\",\r\n                \"replacementVelocity\": {\r\n                    \"unitKey\": \"ft/s\",\r\n                    \"value\": 4800\r\n                }\r\n            },\r\n            \"externalIds\": [\r\n                \"Petrel:tenant1/ProjectLouisiana/3491763/a9b46fc4-1840-450a-ac01-d15bdaa086ba:aef0e55c-4fcb-4546-a7a2-9df8f27277a1\"\r\n            ],\r\n            \"locationAtIndexZero\": {\r\n                \"features\": [\r\n                    {\r\n                        \"geometry\": {\r\n                            \"coordinates\": [\r\n                                1276435.2,\r\n                                242030.61,\r\n                                -1234\r\n                            ],\r\n                            \"type\": \"AnyCrsPoint\"\r\n                        },\r\n                        \"type\": \"AnyCrsFeature\"\r\n                    }\r\n                ],\r\n                \"persistableReferenceCrs\": {\r\n                    \"lateBoundCRS\": {\r\n                        \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"26782\"\r\n                        },\r\n                        \"type\": \"LBC\"\r\n                    },\r\n                    \"singleCT\": {\r\n                        \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"15851\"\r\n                        },\r\n                        \"type\": \"ST\"\r\n                    },\r\n                    \"ver\": \"PE_10_3_1\",\r\n                    \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                    \"authCode\": {\r\n                        \"auth\": \"SLB\",\r\n                        \"code\": \"26782079\"\r\n                    },\r\n                    \"type\": \"EBC\"\r\n                },\r\n                \"persistableReferenceUnitZ\": {\r\n                    \"scaleOffset\": {\r\n                        \"scale\": 0.001,\r\n                        \"offset\": 0\r\n                    },\r\n                    \"symbol\": \"ms\",\r\n                    \"baseMeasurement\": {\r\n                        \"ancestry\": \"Time\",\r\n                        \"type\": \"UM\"\r\n                    },\r\n                    \"type\": \"USO\"\r\n                },\r\n                \"type\": \"AnyCrsFeatureCollection\"\r\n            },\r\n            \"locationWGS84\": {\r\n                \"features\": [\r\n                    {\r\n                        \"geometry\": {\r\n                            \"coordinates\": [\r\n                                [\r\n                                    [\r\n                                        -93.60387,\r\n                                        29.312752\r\n                                    ],\r\n                                    [\r\n                                        -93.58827,\r\n                                        29.306248\r\n                                    ],\r\n                                    [\r\n                                        -93.592354,\r\n                                        29.298727\r\n                                    ],\r\n                                    [\r\n                                        -93.60795,\r\n                                        29.305231\r\n                                    ],\r\n                                    [\r\n                                        -93.60387,\r\n                                        29.312752\r\n                                    ]\r\n                                ]\r\n                            ],\r\n                            \"type\": \"Polygon\"\r\n                        },\r\n                        \"properties\": {\r\n                            \"name\": \"Survey 4 INLINE_1_67_Srv3D_1_8_Original\"\r\n                        },\r\n                        \"type\": \"Feature\"\r\n                    }\r\n                ],\r\n                \"type\": \"FeatureCollection\"\r\n            },\r\n            \"name\": \"Survey 4 INLINE_1_67_Srv3D_1_8_Original\",\r\n            \"originalBulk\": {\r\n                \"size\": 2873437400,\r\n                \"type\": \"SEGY\",\r\n                \"url\": \"sd://SNTC/colors/test.segy\"\r\n            },\r\n            \"perimeters\": [\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        [\r\n                                            1276435.2,\r\n                                            242030.61\r\n                                        ],\r\n                                        [\r\n                                            1281357.8,\r\n                                            239567.36\r\n                                        ],\r\n                                        [\r\n                                            1280002.5,\r\n                                            236859.05\r\n                                        ],\r\n                                        [\r\n                                            1275080,\r\n                                            239322.28\r\n                                        ],\r\n                                        [\r\n                                            1276435.2,\r\n                                            242030.61\r\n                                        ]\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsPolygon\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ],\r\n                                \"perimeterType\": \"Full Fold Coverage\"\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"26782\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"26782079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                },\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        [\r\n                                            -93.60371,\r\n                                            29.312513\r\n                                        ],\r\n                                        [\r\n                                            -93.58811,\r\n                                            29.306007\r\n                                        ],\r\n                                        [\r\n                                            -93.59219,\r\n                                            29.298489\r\n                                        ],\r\n                                        [\r\n                                            -93.60779,\r\n                                            29.304993\r\n                                        ],\r\n                                        [\r\n                                            -93.60371,\r\n                                            29.312513\r\n                                        ]\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsPolygon\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ],\r\n                                \"perimeterType\": \"Full Fold Coverage\"\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433],AUTHORITY[\\\"EPSG\\\",4267]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"GCS_North_American_1927\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"4267\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus [4267,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"4267079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                }\r\n            ],\r\n            \"rangeAmplitudeMax\": {\r\n                \"unitKey\": \"amplitude\",\r\n                \"value\": 232467.8\r\n            },\r\n            \"rangeAmplitudeMin\": {\r\n                \"unitKey\": \"amplitude\",\r\n                \"value\": -226153.4\r\n            },\r\n            \"rangeCrosslineIncrement\": 1,\r\n            \"rangeCrosslineStart\": 1,\r\n            \"rangeCrosslineStop\": 34,\r\n            \"rangeInlineIncrement\": 1,\r\n            \"rangeInlineStart\": 1,\r\n            \"rangeInlineStop\": 67,\r\n            \"relationships\": {\r\n                \"binGrid\": {\r\n                    \"id\": \"slb:wke:binGrid-5067af51fe6542968ce8868c01af6cb7\"\r\n                },\r\n                \"seismicSurvey\": {\r\n                    \"id\": \"slb:wke:seismicSurvey3d-62d8fe58-c044-537a-b354-7f3f8e860421\",\r\n                    \"name\": \"ST2013-L\"\r\n                },\r\n                \"usesAssociations\": true\r\n            },\r\n            \"seismicProperty\": \"Instantaneous Amplitude\",\r\n            \"stackAngleRangeMax\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": 10\r\n            },\r\n            \"stackAngleRangeMin\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": 0\r\n            },\r\n            \"stackAzimuthRangeMax\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": 20\r\n            },\r\n            \"stackAzimuthRangeMin\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": -20\r\n            },\r\n            \"stackOffsetRangeMax\": {\r\n                \"unitKey\": \"ftUS\",\r\n                \"value\": 3000\r\n            },\r\n            \"stackOffsetRangeMin\": {\r\n                \"unitKey\": \"ftUS\",\r\n                \"value\": 0\r\n            },\r\n            \"stackSubType\": \"Full\",\r\n            \"stackType\": \"Full\",\r\n            \"storageType\": \"32-BIT\",\r\n            \"textualFileHeader\": [\r\n                \"C 1 CLIENT COMPANY CREW NO                                                      C 2 LINE line1dS AREA MAP ID                                                    C 3 REEL NO DAY-START OF REEL YEAR OBSERVER                                     C 4 INSTRUMENT: DELPH MODEL xx SERIAL NO                                        C 5 DATA TRACES/RECORD 1 AUXILIARY TRACES/RECORD 0 CDP FOLD                     C 6 SAMPLE INTERVAL 333 SAMPLES/TRACE 1496 BITS/IN 16 BYTES/SAMPLE 2            C 7 RECORDING FORMAT FORMAT THIS REEL MEASUREMENT SYSTEM                        C 8 SAMPLE CODE: FIXED PT                                                       C 9 GAIN TYPE: FIXED                                                            C10 FILTERS: ALIAS 1500HZ NOTCH HZ BAND - HZ SLOPE - DB/OCT                     C11 SOURCE: TYPE NUMBER/POINT POINT INTERVAL                                    C12 PATTERN: LENGTH WIDTH                                                       C13 SWEEP: START HZ END HZ LENGTH MS CHANEL NO TYPE                             C14 TAPER: START LENGTH MS END LENGTH MS TYPE                                   C15 SPREAD: OFFSET MAX DISTANCE GROUP INTERVAL                                  C16 GEOPHONES: PER GROUP SPACING FREQUENCY MFG MODEL                            C17 PATTERN: LENGTH WIDTH                                                       C18 TRACES SORTED BY: RECORD                                                    C19 AMPLITUDE RECOVERY: NONE                                                    C20 MAP PROJECTION ZONE ID COORDINATE UNITS                                     C21 PROCESSING:                                                                 C22 PROCESSING:                                                                 C23                                                                             C24                                                                             C25                                                                             C26                                                                             C27                                                                             C28                                                                             C29                                                                             C30                                                                             C31                                                                             C32                                                                             C33                                                                             C34                                                                             C35                                                                             C36                                                                             C37                                                                             C38                                                                             C39                                                                             C40 END EBCDIC                                                                  \"\r\n            ],\r\n            \"verticalDomain\": \"Elevation time (two-way travel time)\",\r\n            \"verticalIncrement\": {\r\n                \"unitKey\": \"ms\",\r\n                \"value\": -4\r\n            },\r\n            \"verticalSampleCount\": 1000,\r\n            \"verticalStart\": {\r\n                \"unitKey\": \"ms\",\r\n                \"value\": 0\r\n            },\r\n            \"verticalStop\": {\r\n                \"unitKey\": \"ms\",\r\n                \"value\": -3996\r\n            },\r\n            \"vintage\": \"ST2013-InstantaneousAmplitude\",\r\n            \"waveType\": \"PP\"\r\n        },\r\n        \"kind\": \"{{datapartition}}:wks:seismic3d:1.0.5\",\r\n        \"legal\": {\r\n            \"legaltags\": [\r\n                \"{{legaltag01}}\"\r\n            ],\r\n            \"otherRelevantDataCountries\": [\r\n                \"US\",\r\n                \"BE\",\r\n                \"NO\",\r\n                \"IN\"\r\n            ]\r\n        },\r\n        \"version\": 1040891613125385\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET GET + SEISMICMETA (FROM POST)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code >= 500) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check content type\", function () {",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"    });",
									"",
									"    pm.test(\"Dataset name\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get('dsx01'));",
									"    });",
									"",
									"    pm.test(\"tenant\", function () {",
									"        pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"    });",
									"",
									"    pm.test(\"subproject\", function () {",
									"        pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"    });",
									"",
									"    pm.test(\"path\", function () {",
									"        pm.expect(jsonData.path).to.eql(pm.environment.get('testPath'));",
									"",
									"    });",
									"",
									"    pm.test(\"ltag\", function () {",
									"        pm.expect(jsonData.ltag).to.eql(pm.environment.get('legaltag01'));",
									"    });",
									"",
									"    pm.test(\"Dates are present\", function () {",
									"        pm.expect(jsonData.created_date).to.exist;",
									"        pm.expect(jsonData.last_modified_date).to.exist;",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(1);",
									"    });",
									"",
									"    pm.test(\"sbit\", function () {",
									"        postman.setEnvironmentVariable(\"sbit\", jsonData.sbit);",
									"    });",
									"",
									"    pm.test(\"gcsurl\", () => {",
									"        postman.setEnvironmentVariable(\"gcsBucketName\", jsonData.gcsurl.split('/')[0]);",
									"        postman.setEnvironmentVariable(\"gcsObjectPrefix\", jsonData.gcsurl.split('/')[1]);",
									"    })",
									"",
									"    pm.test(\"Check gtag\", function () {",
									"        pm.expect(jsonData.gtags.length).to.eql(1);",
									"        pm.expect(jsonData.gtags[0]).to.eql(\"tagA\");",
									"    });",
									"",
									"    pm.test(\"Check seismicmetadata\", () => {",
									"        pm.expect(jsonData.seismicmeta).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.id).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.kind).to.eql(pm.environment.get('datapartition') + \":wks:seismic3d:1.0.5\");",
									"        pm.expect(jsonData.seismicmeta.acl).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.acl.viewers).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.acl.owners).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.legal).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.legal.legaltags).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.legal.otherRelevantDataCountries).to.contain(\"US\");",
									"        pm.expect(jsonData.seismicmeta.data.binNodePositions[0].features[0].geometry.coordinates[0][1]).to.equal(242030.61);",
									"        pm.expect(jsonData.seismicmeta.data.binNodePositions[0].features[0].geometry.type).to.equal(\"AnyCrsMultiPoint\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded}}&seismicmeta=true",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								},
								{
									"key": "seismicmeta",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET PATCH + SEISMICMETA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code >= 500) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check content type\", function () {",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"    });",
									"",
									"    pm.test(\"Dataset name\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get('dsx01'));",
									"    });",
									"",
									"    pm.test(\"tenant\", function () {",
									"        pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"    });",
									"",
									"    pm.test(\"subproject\", function () {",
									"        pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"    });",
									"",
									"    pm.test(\"path\", function () {",
									"        pm.expect(jsonData.path).to.eql(pm.environment.get('testPath'));",
									"    });",
									"",
									"    pm.test(\"ltag\", function () {",
									"        pm.expect(jsonData.ltag).to.eql(pm.environment.get('legaltag01'));",
									"    });",
									"",
									"    pm.test(\"Dates are present\", function () {",
									"        pm.expect(jsonData.created_date).to.exist;",
									"        pm.expect(jsonData.last_modified_date).to.exist;",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(0);",
									"    });",
									"",
									"    pm.test(\"Check gtag\", function () {",
									"        pm.expect(jsonData.gtags.length).to.eql(1);",
									"        pm.expect(jsonData.gtags[0]).to.eql(\"tagA\");",
									"    });",
									"",
									"    pm.test(\"Check seismicmetadata\", () => {",
									"        pm.expect(jsonData.seismicmeta_guid).not.equal(null);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var result           = '';\r",
									"var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"var charactersLength = characters.length;\r",
									"for ( var i = 0; i < 16; i++ ) {\r",
									"    result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"}\r",
									"pm.variables.set(\"randomString16\", result);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"gtags\": [\n    \"tagA\"\n  ],\n  \"seismicmeta\": {\n  \"id\": \"{{datapartition}}:seismic3d:{{randomString16}}\",\n  \"kind\": \"{{datapartition}}:wks:seismic3d:1.0.5\",\n    \"legal\": {\n    \"legaltags\": [\n      \"{{legaltag01}}\"\n    ],\n      \"otherRelevantDataCountries\": [\n        \"US\"\n      ]\n  },\n  \"data\": {\n    \"geometry\": {\n      \"coordinates\": [\n        [\n          -93.61,\n          9.32\n        ],\n        [\n          -93.78,\n          29.44\n        ]\n      ],\n        \"type\": \"Polygon\"\n     }\n   },\n  \"meta\": [\n\t    {\n\t        \"kind\": \"Unit\",\n\t        \"name\": \"ft/s\",\n\t        \"persistableReference\": {\n\t            \"scaleOffset\": {\n\t                \"scale\": 0.3048,\n\t                \"offset\": 0\n\t            },\n\t            \"symbol\": \"ft/s\",\n\t            \"baseMeasurement\": {\n\t                \"ancestry\": \"Velocity\",\n\t                \"type\": \"UM\"\n\t            },\n\t            \"type\": \"USO\"\n\t        },\n\t        \"propertyNames\": [\n\t            \"elevationReferenceTime.replacementVelocity.value\"\n\t        ]\n\t    }\n    ]\n  }\n} \n \n"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded}}&close={{sbit}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								},
								{
									"key": "close",
									"value": "{{sbit}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET GET + SEISMICMETA (FROM PATCH)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code >= 500) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check content type\", function () {",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"    });",
									"",
									"    pm.test(\"Dataset name\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get('dsx01'));",
									"    });",
									"",
									"    pm.test(\"tenant\", function () {",
									"        pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"    });",
									"",
									"    pm.test(\"subproject\", function () {",
									"        pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"    });",
									"",
									"    pm.test(\"path\", function () {",
									"        pm.expect(jsonData.path).to.eql(pm.environment.get('testPath'));",
									"    });",
									"",
									"    pm.test(\"ltag\", function () {",
									"        pm.expect(jsonData.ltag).to.eql(pm.environment.get('legaltag01'));",
									"    });",
									"",
									"    pm.test(\"Dates are present\", function () {",
									"        pm.expect(jsonData.created_date).to.exist;",
									"        pm.expect(jsonData.last_modified_date).to.exist;",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(0);",
									"    });",
									"",
									"    pm.test(\"sbit\", function () {",
									"        postman.setEnvironmentVariable(\"sbit\", jsonData.sbit);",
									"    });",
									"",
									"    pm.test(\"gcsurl\", () => {",
									"        postman.setEnvironmentVariable(\"gcsBucketName\", jsonData.gcsurl.split('/')[0]);",
									"        postman.setEnvironmentVariable(\"gcsObjectPrefix\", jsonData.gcsurl.split('/')[1]);",
									"    })",
									"",
									"    pm.test(\"Check gtag\", function () {",
									"        pm.expect(jsonData.gtags.length).to.eql(1);",
									"        pm.expect(jsonData.gtags[0]).to.eql(\"tagA\");",
									"    });",
									"",
									"    pm.test(\"Check seismicmetadata\", () => {",
									"        pm.expect(jsonData.seismicmeta).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.kind).to.eql(pm.environment.get('datapartition') +\":wks:seismic3d:1.0.5\");",
									"        pm.expect(jsonData.seismicmeta.acl).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.acl.viewers).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.acl.owners).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.legal).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.legal.legaltags).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.legal.otherRelevantDataCountries).to.contain(\"US\");",
									"        pm.expect(jsonData.seismicmeta.data.geometry.coordinates[0][1]).to.equal(9.32);",
									"        pm.expect(jsonData.seismicmeta.data.geometry.type).to.equal(\"Polygon\");",
									"        pm.expect(jsonData.seismicmeta.meta[0].kind).to.eql(\"Unit\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded}}&seismicmeta=true",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								},
								{
									"key": "seismicmeta",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET DELETE SEISMICMETA 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code >= 500) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.expect(pm.response.code).to.be.eql(200)",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx02}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx02}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET REGISTER WITH OPENZGY_V1(schema validation error for missing kind)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code >= 500) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status to be 400 as the schema body does not contain kind\", function () {",
									"       pm.response.to.have.status(400)",
									"    });",
									"",
									"    pm.test(\"Check error message\", function () {",
									"        pm.response.text().includes(\"must have required property 'kind'\")",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"openzgy_v1\": {\r\n        \"data\": {\r\n            \"ResourceHomeRegionID\": \"opendes:reference-data--OSDURegion:AWSEastUSA:\",\r\n            \"ResourceHostRegionIDs\": [\r\n                \"opendes:reference-data--OSDURegion:AWSEastUSA:\"\r\n            ],\r\n            \"ResourceCurationStatus\": \"opendes:reference-data--ResourceCurationStatus:CREATED:\",\r\n            \"ResourceLifecycleStatus\": \"opendes:reference-data--ResourceLifecycleStatus:LOADING:\",\r\n            \"ResourceSecurityClassification\": \"opendes:reference-data--ResourceSecurityClassification:RESTRICTED:\",\r\n            \"Source\": \"Example Data Source\",\r\n            \"ExistenceKind\": \"opendes:reference-data--ExistenceKind:Prototype:\",\r\n            \"Name\": \"Dataset X221/15\",\r\n            \"Description\": \"As originally delivered by ACME.com.\",\r\n            \"TotalSize\": \"13245217273\",\r\n            \"EncodingFormatTypeID\": \"opendes:reference-data--EncodingFormatType:text%2Fcsv:\",\r\n            \"SchemaFormatTypeID\": \"opendes:reference-data--SchemaFormatType:CWLS%20LAS3:\",\r\n            \"Endian\": \"BIG\",\r\n            \"DatasetProperties\": {\r\n                \"FileCollectionPath\": \"s3://default_bucket/opendes/data/vds-dataset/\",\r\n                \"IndexFilePath\": \"s3://default_bucket/opendes/data/vds-dataset/vds-dataset.index\",\r\n                \"FileSourceInfos\": [\r\n                    {\r\n                        \"FileSource\": \"s3://default_bucket/opendes/data/vds-dataset/vds-file-1\",\r\n                        \"PreloadFilePath\": \"s3://staging-area/r7/raw-data/provided/documents/vds-file-1\",\r\n                        \"Name\": \"vds-file-1\",\r\n                        \"PreloadFileCreateUser\": \"somebody@acme.org\",\r\n                        \"PreloadFileCreateDate\": \"2019-12-16T11:46:20.163Z\",\r\n                        \"PreloadFileModifyUser\": \"somebody.else@acme.org\",\r\n                        \"PreloadFileModifyDate\": \"2019-12-20T17:20:05.356Z\",\r\n                        \"FileSize\": \"439452464\",\r\n                        \"Checksum\": \"d41d8cd98f00b204e9800998ecf8427e\",\r\n                        \"ChecksumAlgorithm\": \"MD5\"\r\n                    },\r\n                    {\r\n                        \"FileSource\": \"s3://default_bucket/opendes/data/vds-dataset/vds-file-2\",\r\n                        \"PreloadFilePath\": \"s3://staging-area/r7/raw-data/provided/documents/vds-file-2\",\r\n                        \"Name\": \"vds-file-2\",\r\n                        \"PreloadFileCreateUser\": \"somebody@acme.org\",\r\n                        \"PreloadFileCreateDate\": \"2019-12-16T11:50:40.321Z\",\r\n                        \"PreloadFileModifyUser\": \"somebody.else@acme.org\",\r\n                        \"PreloadFileModifyDate\": \"2019-12-20T17:59:03.456Z\",\r\n                        \"FileSize\": \"433645463\",\r\n                        \"Checksum\": \"204e9800998ecf8427ed41d8cd98f00b\",\r\n                        \"ChecksumAlgorithm\": \"MD5\"\r\n                    }\r\n                ],\r\n                \"Checksum\": \"d41d8cd98f00b204e9800998ecf8427e\"\r\n            },\r\n            \"ExtensionProperties\": {}\r\n        },\r\n        \"meta\": [],\r\n        \"id\": \"opendes:dataset--FileCollection.Slb.OpenZGY:5771c352-dc52-5d26-9351-2b8dbc9eb475\",\r\n        \"version\": 1637208623527796,\r\n        \"acl\": {\r\n            \"viewers\": [\r\n                \"data.default.viewers@opendes.enterprisedata.cloud.slb-ds.com\"\r\n            ],\r\n            \"owners\": [\r\n                \"data.default.viewers@opendes.enterprisedata.cloud.slb-ds.com\"\r\n            ]\r\n        },\r\n        \"legal\": {\r\n            \"legaltags\": [\r\n                \"opendes-seistore-test-01\"\r\n            ],\r\n            \"otherRelevantDataCountries\": [\r\n                \"US\"\r\n            ],\r\n            \"status\": \"compliant\"\r\n        },\r\n        \"tags\": {\r\n            \"NameOfKey\": \"String value\"\r\n        },\r\n        \"createUser\": \"vmanohar@slb.com\",\r\n        \"createTime\": \"2021-11-16T02:08:16.420Z\",\r\n        \"modifyUser\": \"39916b94-71a9-409e-856e-0f29558fa908\",\r\n        \"modifyTime\": \"2021-11-18T04:10:23.817Z\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx02}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx02}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET REGISTER WITH OPENZGY_V1 (schema validation errors for incorrect kind)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code >= 500) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Check error message\", function () {",
									"        pm.response.text().includes(\"/kind must match pattern \\\"osdu:wks:dataset--FileCollection.Slb.OpenZGY:1.0.0\\\"\")",
									"    });",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"openzgy_v1\": {\r\n        \"data\": {\r\n            \"ResourceHomeRegionID\": \"opendes:reference-data--OSDURegion:AWSEastUSA:\",\r\n            \"ResourceHostRegionIDs\": [\r\n                \"opendes:reference-data--OSDURegion:AWSEastUSA:\"\r\n            ],\r\n            \"ResourceCurationStatus\": \"opendes:reference-data--ResourceCurationStatus:CREATED:\",\r\n            \"ResourceLifecycleStatus\": \"opendes:reference-data--ResourceLifecycleStatus:LOADING:\",\r\n            \"ResourceSecurityClassification\": \"opendes:reference-data--ResourceSecurityClassification:RESTRICTED:\",\r\n            \"Source\": \"Example Data Source\",\r\n            \"ExistenceKind\": \"opendes:reference-data--ExistenceKind:Prototype:\",\r\n            \"Name\": \"Dataset X221/15\",\r\n            \"Description\": \"As originally delivered by ACME.com.\",\r\n            \"TotalSize\": \"13245217273\",\r\n            \"EncodingFormatTypeID\": \"opendes:reference-data--EncodingFormatType:text%2Fcsv:\",\r\n            \"SchemaFormatTypeID\": \"opendes:reference-data--SchemaFormatType:CWLS%20LAS3:\",\r\n            \"Endian\": \"BIG\",\r\n            \"DatasetProperties\": {\r\n                \"FileCollectionPath\": \"s3://default_bucket/opendes/data/vds-dataset/\",\r\n                \"IndexFilePath\": \"s3://default_bucket/opendes/data/vds-dataset/vds-dataset.index\",\r\n                \"FileSourceInfos\": [\r\n                    {\r\n                        \"FileSource\": \"s3://default_bucket/opendes/data/vds-dataset/vds-file-1\",\r\n                        \"PreloadFilePath\": \"s3://staging-area/r7/raw-data/provided/documents/vds-file-1\",\r\n                        \"Name\": \"vds-file-1\",\r\n                        \"PreloadFileCreateUser\": \"somebody@acme.org\",\r\n                        \"PreloadFileCreateDate\": \"2019-12-16T11:46:20.163Z\",\r\n                        \"PreloadFileModifyUser\": \"somebody.else@acme.org\",\r\n                        \"PreloadFileModifyDate\": \"2019-12-20T17:20:05.356Z\",\r\n                        \"FileSize\": \"439452464\",\r\n                        \"Checksum\": \"d41d8cd98f00b204e9800998ecf8427e\",\r\n                        \"ChecksumAlgorithm\": \"MD5\"\r\n                    },\r\n                    {\r\n                        \"FileSource\": \"s3://default_bucket/opendes/data/vds-dataset/vds-file-2\",\r\n                        \"PreloadFilePath\": \"s3://staging-area/r7/raw-data/provided/documents/vds-file-2\",\r\n                        \"Name\": \"vds-file-2\",\r\n                        \"PreloadFileCreateUser\": \"somebody@acme.org\",\r\n                        \"PreloadFileCreateDate\": \"2019-12-16T11:50:40.321Z\",\r\n                        \"PreloadFileModifyUser\": \"somebody.else@acme.org\",\r\n                        \"PreloadFileModifyDate\": \"2019-12-20T17:59:03.456Z\",\r\n                        \"FileSize\": \"433645463\",\r\n                        \"Checksum\": \"204e9800998ecf8427ed41d8cd98f00b\",\r\n                        \"ChecksumAlgorithm\": \"MD5\"\r\n                    }\r\n                ],\r\n                \"Checksum\": \"d41d8cd98f00b204e9800998ecf8427e\"\r\n            },\r\n            \"ExtensionProperties\": {}\r\n        },\r\n        \"meta\": [],\r\n        \"id\": \"opendes:dataset--FileCollection.Slb.OpenZGY:5771c352-dc52-5d26-9351-2b8dbc9eb475\",\r\n        \"kind\": \"incorrect-kind\",\r\n        \"version\": 1637208623527796,\r\n        \"acl\": {\r\n            \"viewers\": [\r\n                \"data.default.viewers@opendes.enterprisedata.cloud.slb-ds.com\"\r\n            ],\r\n            \"owners\": [\r\n                \"data.default.viewers@opendes.enterprisedata.cloud.slb-ds.com\"\r\n            ]\r\n        },\r\n        \"legal\": {\r\n            \"legaltags\": [\r\n                \"opendes-seistore-test-01\"\r\n            ],\r\n            \"otherRelevantDataCountries\": [\r\n                \"US\"\r\n            ],\r\n            \"status\": \"compliant\"\r\n        },\r\n        \"tags\": {\r\n            \"NameOfKey\": \"String value\"\r\n        },\r\n        \"createUser\": \"vmanohar@slb.com\",\r\n        \"createTime\": \"2021-11-16T02:08:16.420Z\",\r\n        \"modifyUser\": \"39916b94-71a9-409e-856e-0f29558fa908\",\r\n        \"modifyTime\": \"2021-11-18T04:10:23.817Z\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx02}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx02}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET REGISTER WITH OPENZGY_V1 (storage record id is computed by backend and returned to client)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code >= 500) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check content type\", function () {",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"    });",
									"",
									"    pm.test(\"Dataset name\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get('dsx02'));",
									"    });",
									"",
									"    pm.test(\"tenant\", function () {",
									"        pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"    });",
									"",
									"    pm.test(\"subproject\", function () {",
									"        pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"    });",
									"",
									"    pm.test(\"ltag\", function () {",
									"        pm.expect(jsonData.ltag).to.eql(pm.environment.get('legaltag01'));",
									"    });",
									"",
									"    pm.test(\"Dates are present\", function () {",
									"        pm.expect(jsonData.created_date).to.exist;",
									"        pm.expect(jsonData.last_modified_date).to.exist;",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(1);",
									"        postman.setEnvironmentVariable(\"sbit\", jsonData.sbit);",
									"    });",
									"",
									"    pm.test(\"Check openzgy_v1 schema record\", () => {",
									"        pm.expect(jsonData.seismicmeta_guid).not.equal(null);",
									"        // pm.expect(jsonData.seismicmeta_guid).eql(jsonData.openzgy_v1.id);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"openzgy_v1\": {\r\n        \"data\": {\r\n            \"ResourceHomeRegionID\": \"opendes:reference-data--OSDURegion:AWSEastUSA:\",\r\n            \"ResourceHostRegionIDs\": [\r\n                \"opendes:reference-data--OSDURegion:AWSEastUSA:\"\r\n            ],\r\n            \"ResourceCurationStatus\": \"opendes:reference-data--ResourceCurationStatus:CREATED:\",\r\n            \"ResourceLifecycleStatus\": \"opendes:reference-data--ResourceLifecycleStatus:LOADING:\",\r\n            \"ResourceSecurityClassification\": \"opendes:reference-data--ResourceSecurityClassification:RESTRICTED:\",\r\n            \"Source\": \"Example Data Source\",\r\n            \"ExistenceKind\": \"opendes:reference-data--ExistenceKind:Prototype:\",\r\n            \"Name\": \"Dataset X221/15\",\r\n            \"Description\": \"As originally delivered by ACME.com.\",\r\n            \"TotalSize\": \"13245217273\",\r\n            \"EncodingFormatTypeID\": \"opendes:reference-data--EncodingFormatType:text%2Fcsv:\",\r\n            \"SchemaFormatTypeID\": \"opendes:reference-data--SchemaFormatType:CWLS%20LAS3:\",\r\n            \"Endian\": \"BIG\",\r\n            \"DatasetProperties\": {\r\n                \"FileCollectionPath\": \"s3://default_bucket/opendes/data/vds-dataset/\",\r\n                \"IndexFilePath\": \"s3://default_bucket/opendes/data/vds-dataset/vds-dataset.index\",\r\n                \"FileSourceInfos\": [\r\n                    {\r\n                        \"FileSource\": \"s3://default_bucket/opendes/data/vds-dataset/vds-file-1\",\r\n                        \"PreloadFilePath\": \"s3://staging-area/r7/raw-data/provided/documents/vds-file-1\",\r\n                        \"Name\": \"vds-file-1\",\r\n                        \"PreloadFileCreateUser\": \"somebody@acme.org\",\r\n                        \"PreloadFileCreateDate\": \"2019-12-16T11:46:20.163Z\",\r\n                        \"PreloadFileModifyUser\": \"somebody.else@acme.org\",\r\n                        \"PreloadFileModifyDate\": \"2019-12-20T17:20:05.356Z\",\r\n                        \"FileSize\": \"439452464\",\r\n                        \"Checksum\": \"d41d8cd98f00b204e9800998ecf8427e\",\r\n                        \"ChecksumAlgorithm\": \"MD5\"\r\n                    },\r\n                    {\r\n                        \"FileSource\": \"s3://default_bucket/opendes/data/vds-dataset/vds-file-2\",\r\n                        \"PreloadFilePath\": \"s3://staging-area/r7/raw-data/provided/documents/vds-file-2\",\r\n                        \"Name\": \"vds-file-2\",\r\n                        \"PreloadFileCreateUser\": \"somebody@acme.org\",\r\n                        \"PreloadFileCreateDate\": \"2019-12-16T11:50:40.321Z\",\r\n                        \"PreloadFileModifyUser\": \"somebody.else@acme.org\",\r\n                        \"PreloadFileModifyDate\": \"2019-12-20T17:59:03.456Z\",\r\n                        \"FileSize\": \"433645463\",\r\n                        \"Checksum\": \"204e9800998ecf8427ed41d8cd98f00b\",\r\n                        \"ChecksumAlgorithm\": \"MD5\"\r\n                    }\r\n                ],\r\n                \"Checksum\": \"d41d8cd98f00b204e9800998ecf8427e\"\r\n            },\r\n            \"ExtensionProperties\": {}\r\n        },\r\n        \"meta\": [],\r\n        \"version\": 1637223275655929,\r\n        \"kind\": \"osdu:wks:dataset--FileCollection.Slb.OpenZGY:1.0.0\",\r\n        \"acl\": {\r\n            \"viewers\": [\r\n                \"data.default.viewers@opendes.enterprisedata.cloud.slb-ds.com\"\r\n            ],\r\n            \"owners\": [\r\n                \"data.default.viewers@opendes.enterprisedata.cloud.slb-ds.com\"\r\n            ]\r\n        },\r\n        \"legal\": {\r\n            \"legaltags\": [\r\n                \"opendes-seistore-test-01\"\r\n            ],\r\n            \"otherRelevantDataCountries\": [\r\n                \"US\"\r\n            ],\r\n            \"status\": \"compliant\"\r\n        },\r\n        \"tags\": {\r\n            \"NameOfKey\": \"String value\"\r\n        },\r\n        \"createUser\": \"vmanohar@slb.com\",\r\n        \"createTime\": \"2021-11-16T02:08:16.420Z\",\r\n        \"modifyUser\": \"39916b94-71a9-409e-856e-0f29558fa908\",\r\n        \"modifyTime\": \"2021-11-18T08:14:36.310Z\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx02}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx02}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET GET WITH OPENZGY_V1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code >= 500) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check content type\", function () {",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"    });",
									"",
									"    pm.test(\"Dataset name\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get('dsx02'));",
									"    });",
									"",
									"    pm.test(\"tenant\", function () {",
									"        pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"    });",
									"",
									"    pm.test(\"subproject\", function () {",
									"        pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"    });",
									"",
									"    pm.test(\"ltag\", function () {",
									"        pm.expect(jsonData.ltag).to.eql(pm.environment.get('legaltag01'));",
									"    });",
									"",
									"    pm.test(\"Dates are present\", function () {",
									"        pm.expect(jsonData.created_date).to.exist;",
									"        pm.expect(jsonData.last_modified_date).to.exist;",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(1);",
									"    });",
									"",
									"    pm.test(\"sbit\", function () {",
									"        postman.setEnvironmentVariable(\"sbit\", jsonData.sbit);",
									"    });",
									"",
									"    pm.test(\"gcsurl\", () => {",
									"        postman.setEnvironmentVariable(\"gcsBucketName\", jsonData.gcsurl.split('/')[0]);",
									"        postman.setEnvironmentVariable(\"gcsObjectPrefix\", jsonData.gcsurl.split('/')[1]);",
									"    })",
									"",
									"    pm.test(\"Check openzgy_v1 record matches the post from previous request\", () => {",
									"        pm.expect(jsonData.openzgy_v1).not.equal(null);",
									"        pm.expect(jsonData.openzgy_v1.id).not.equal(null);",
									"        pm.expect(jsonData.openzgy_v1.data.ResourceHomeRegionID).equal('opendes:reference-data--OSDURegion:AWSEastUSA:');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx02}}?seismicmeta=true",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx02}}"
							],
							"query": [
								{
									"key": "seismicmeta",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET DELETE WITH SEGY_V1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code >= 500) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.expect(pm.response.code).to.be.eql(200)",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx03}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx03}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET REGISTER WITH SEGY_V1 (storage record id is computed by backend and returned to client)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code >= 500) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check content type\", function () {",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"    });",
									"",
									"    pm.test(\"Dataset name\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get('dsx03'));",
									"    });",
									"",
									"    pm.test(\"tenant\", function () {",
									"        pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"    });",
									"",
									"    pm.test(\"subproject\", function () {",
									"        pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"    });",
									"",
									"    pm.test(\"ltag\", function () {",
									"        pm.expect(jsonData.ltag).to.eql(pm.environment.get('legaltag01'));",
									"    });",
									"",
									"    pm.test(\"Dates are present\", function () {",
									"        pm.expect(jsonData.created_date).to.exist;",
									"        pm.expect(jsonData.last_modified_date).to.exist;",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(1);",
									"        postman.setEnvironmentVariable(\"sbit\", jsonData.sbit);",
									"    });",
									"",
									"    pm.test(\"Check segy_v1 schema record\", () => {",
									"        pm.expect(jsonData.seismicmeta_guid).not.equal(null);",
									"        // pm.expect(jsonData.seismicmeta_guid).eql(jsonData.segy_v1.id);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"segy_v1\": {\r\n        \"kind\": \"osdu:wks:dataset--FileCollection.SEGY:1.0.0\",\r\n        \"version\": 1562066009929332,\r\n        \"tags\": {\r\n            \"NameOfKey\": \"String value\"\r\n        },\r\n        \"createTime\": \"2020-12-16T11:46:20.163Z\",\r\n        \"createUser\": \"vmanohar@slb.com\",\r\n        \"modifyTime\": \"2020-12-16T11:52:24.477Z\",\r\n        \"modifyUser\": \"vmanohar@slb.com\",\r\n        \"ancestry\": {\r\n            \"parents\": []\r\n        },\r\n        \"meta\": [],\r\n        \"data\": {\r\n            \"ResourceHomeRegionID\": \"namespace:reference-data--OSDURegion:AWSEastUSA:\",\r\n            \"ResourceHostRegionIDs\": [\r\n                \"namespace:reference-data--OSDURegion:AWSEastUSA:\"\r\n            ],\r\n            \"ResourceCurationStatus\": \"namespace:reference-data--ResourceCurationStatus:CREATED:\",\r\n            \"ResourceLifecycleStatus\": \"namespace:reference-data--ResourceLifecycleStatus:LOADING:\",\r\n            \"ResourceSecurityClassification\": \"namespace:reference-data--ResourceSecurityClassification:RESTRICTED:\",\r\n            \"Source\": \"Example Data Source\",\r\n            \"ExistenceKind\": \"namespace:reference-data--ExistenceKind:Prototype:\",\r\n            \"Name\": \"Dataset X221/15\",\r\n            \"Description\": \"As originally delivered by ACME.com.\",\r\n            \"TotalSize\": \"13245217273\",\r\n            \"EncodingFormatTypeID\": \"namespace:reference-data--EncodingFormatType:text%2Fcsv:\",\r\n            \"SchemaFormatTypeID\": \"namespace:reference-data--SchemaFormatType:CWLS%20LAS3:\",\r\n            \"Endian\": \"BIG\",\r\n            \"DatasetProperties\": {\r\n                \"FileCollectionPath\": \"s3://default_bucket/opendes/data/vds-dataset/\",\r\n                \"IndexFilePath\": \"s3://default_bucket/opendes/data/vds-dataset/vds-dataset.index\",\r\n                \"FileSourceInfos\": [\r\n                    {\r\n                        \"FileSource\": \"s3://default_bucket/opendes/data/vds-dataset/vds-file-1\",\r\n                        \"PreloadFilePath\": \"s3://staging-area/r7/raw-data/provided/documents/vds-file-1\",\r\n                        \"Name\": \"vds-file-1\",\r\n                        \"PreloadFileCreateUser\": \"somebody@acme.org\",\r\n                        \"PreloadFileCreateDate\": \"2019-12-16T11:46:20.163Z\",\r\n                        \"PreloadFileModifyUser\": \"somebody.else@acme.org\",\r\n                        \"PreloadFileModifyDate\": \"2019-12-20T17:20:05.356Z\",\r\n                        \"FileSize\": \"439452464\",\r\n                        \"Checksum\": \"d41d8cd98f00b204e9800998ecf8427e\",\r\n                        \"ChecksumAlgorithm\": \"MD5\"\r\n                    },\r\n                    {\r\n                        \"FileSource\": \"s3://default_bucket/opendes/data/vds-dataset/vds-file-2\",\r\n                        \"PreloadFilePath\": \"s3://staging-area/r7/raw-data/provided/documents/vds-file-2\",\r\n                        \"Name\": \"vds-file-2\",\r\n                        \"PreloadFileCreateUser\": \"somebody@acme.org\",\r\n                        \"PreloadFileCreateDate\": \"2019-12-16T11:50:40.321Z\",\r\n                        \"PreloadFileModifyUser\": \"somebody.else@acme.org\",\r\n                        \"PreloadFileModifyDate\": \"2019-12-20T17:59:03.456Z\",\r\n                        \"FileSize\": \"433645463\",\r\n                        \"Checksum\": \"204e9800998ecf8427ed41d8cd98f00b\",\r\n                        \"ChecksumAlgorithm\": \"MD5\"\r\n                    }\r\n                ],\r\n                \"Checksum\": \"d41d8cd98f00b204e9800998ecf8427e\"\r\n            },\r\n            \"VectorHeaderMapping\": [\r\n                {\r\n                    \"KeyName\": \"namespace:reference-data--HeaderKeyName:CMPX:\",\r\n                    \"WordFormat\": \"namespace:reference-data--WordFormatType:INT:\",\r\n                    \"WordWidth\": 2,\r\n                    \"Position\": 2,\r\n                    \"UoM\": \"namespace:reference-data--UnitOfMeasure:m:\",\r\n                    \"ScalarIndicator\": \"STANDARD\",\r\n                    \"ScalarOverride\": 12345.6\r\n                }\r\n            ],\r\n            \"SEGYRevision\": \"rev 0\",\r\n            \"ExtensionProperties\": {}\r\n        },\r\n        \"id\": \"opendes:dataset--FileCollection.SEGY:c26bfb75-721a-481b-9b93-cd91fb739d4b\",\r\n        \"acl\": {\r\n            \"owners\": [\r\n                \"data.default.owners@opendes.enterprisedata.cloud.slb-ds.com\"\r\n            ],\r\n            \"viewers\": [\r\n                \"data.default.viewers@opendes.enterprisedata.cloud.slb-ds.com\"\r\n            ]\r\n        },\r\n        \"legal\": {\r\n            \"legaltags\": [\r\n                \"opendes-seistore-test-01\"\r\n            ],\r\n            \"otherRelevantDataCountries\": [\r\n                \"US\"\r\n            ]\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx03}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx03}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET GET WITH SEGY_V1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code >= 500) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check content type\", function () {",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"    });",
									"",
									"    pm.test(\"Dataset name\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get('dsx03'));",
									"    });",
									"",
									"    pm.test(\"tenant\", function () {",
									"        pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"    });",
									"",
									"    pm.test(\"subproject\", function () {",
									"        pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"    });",
									"",
									"    pm.test(\"ltag\", function () {",
									"        pm.expect(jsonData.ltag).to.eql(pm.environment.get('legaltag01'));",
									"    });",
									"",
									"    pm.test(\"Dates are present\", function () {",
									"        pm.expect(jsonData.created_date).to.exist;",
									"        pm.expect(jsonData.last_modified_date).to.exist;",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(1);",
									"    });",
									"",
									"    pm.test(\"sbit\", function () {",
									"        postman.setEnvironmentVariable(\"sbit\", jsonData.sbit);",
									"    });",
									"",
									"    pm.test(\"gcsurl\", () => {",
									"        postman.setEnvironmentVariable(\"gcsBucketName\", jsonData.gcsurl.split('/')[0]);",
									"        postman.setEnvironmentVariable(\"gcsObjectPrefix\", jsonData.gcsurl.split('/')[1]);",
									"    })",
									"",
									"    pm.test(\"Check segy_v1 record matches the post from previous request\", () => {",
									"        pm.expect(jsonData.segy_v1).not.equal(null);",
									"        console.log(jsonData.segy_v1);",
									"        pm.expect(jsonData.segy_v1.id).not.equal(null);",
									"        pm.expect(jsonData.segy_v1.data.TotalSize).equal('13245217273');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx03}}?seismicmeta=true",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx03}}"
							],
							"query": [
								{
									"key": "seismicmeta",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET DELETE WITH SEGY_V1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code >= 500) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.expect(pm.response.code).to.be.eql(200)",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx02}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx02}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "STATUS UNSET SEISMICMETA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code >= 500) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Body matches string\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"service OK\");",
									"    });",
									"",
									"    pm.environment.unset('dsx01')",
									"    pm.environment.unset('dsx02')",
									"    pm.environment.unset('dsx03')",
									"    pm.environment.unset('testPath')",
									"    pm.environment.unset('testPathEncoded')",
									"    pm.environment.unset('sbit')",
									"    pm.environment.unset('gcsBucketName')",
									"    pm.environment.unset('gcsObjectPrefix')",
									"    pm.environment.unset('dsx01_record_type')",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/svcstatus",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"svcstatus"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "tags",
			"item": [
				{
					"name": "STATUS SET TAGS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('Dataset variables are initialized for tags folder');\r",
									"\r",
									"if(pm.environment.get('serviceCloudProvider') === 'ibm') { \r",
									"    postman.setNextRequest(\"STATUS UNSET TAGS\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function makeID_tags(length) {\r",
									"   var result           = '';\r",
									"   var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"   var charactersLength = characters.length;\r",
									"   for ( var i = 0; i < length; i++ ) {\r",
									"      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"   }\r",
									"   return result;\r",
									"}\r",
									"\r",
									"postman.setEnvironmentVariable(\"dsx01\", makeID_tags(16));\r",
									"var path01 = \"/\" + makeID_tags(8) + \"/\" + makeID_tags(4) + \"/\"\r",
									"postman.setEnvironmentVariable(\"testPath01\", path01);\r",
									"postman.setEnvironmentVariable(\"testPathEncoded01\", encodeURIComponent(path01));\r",
									"\r",
									"postman.setEnvironmentVariable(\"dsx02\", makeID_tags(16));\r",
									"var path02 = \"/\" + makeID_tags(8) + \"/\" + makeID_tags(6) + \"/\" + makeID_tags(4) + \"/\"\r",
									"postman.setEnvironmentVariable(\"testPath02\", path02);\r",
									"postman.setEnvironmentVariable(\"testPathEncoded02\", encodeURIComponent(path02));\r",
									"\r",
									"postman.setEnvironmentVariable(\"dsx03\", makeID_tags(16));\r",
									"var path03 = \"/\" + makeID_tags(8) + \"/\" + makeID_tags(48) + \"/\" + makeID_tags(4) + \"/\"\r",
									"postman.setEnvironmentVariable(\"testPath03\", path03);\r",
									"postman.setEnvironmentVariable(\"testPathEncoded03\", encodeURIComponent(path03));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/svcstatus",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"svcstatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "REGISTER TAGGED DATA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"        postman.setEnvironmentVariable(\"sbit\", jsonData.sbit);",
									"    });",
									"",
									"    pm.test(\"Dataset name\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get('dsx01'));",
									"    });",
									"",
									"    pm.test(\"path\", function () {",
									"        pm.expect(jsonData.path).to.eql(pm.environment.get('testPath01'));",
									"    });",
									"",
									"    pm.test(\"Check gtag\", function () {",
									"        pm.expect(jsonData.gtags.length).to.eql(2);",
									"        pm.expect(jsonData.gtags[0]).to.eql(\"tag1\");",
									"        pm.expect(jsonData.gtags[1]).to.eql(\"tag2\");",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"gtags\": [\r\n    \"tag1\",\r\n    \"tag2\"\r\n  ]\r\n} "
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET TAGGED DATASET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Dataset name\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get('dsx01'));",
									"    });",
									"",
									"    pm.test(\"path\", function () {",
									"        pm.expect(jsonData.path).to.eql(pm.environment.get('testPath01'));",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET CLOSE TAGS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// var result           = '';\r",
									"// var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"// var charactersLength = characters.length;\r",
									"// for ( var i = 0; i < 16; i++ ) {\r",
									"//     result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"// }\r",
									"// pm.variables.set(\"randomString16\", result);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded01}}&close={{sbit}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded01}}"
								},
								{
									"key": "close",
									"value": "{{sbit}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE TAGGED DATA 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}    "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx02}}?path={{testPathEncoded02}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx02}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded02}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "REGISTER TAGGED DATA 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"        postman.setEnvironmentVariable(\"sbit\", jsonData.sbit);",
									"    });",
									"",
									"    pm.test(\"Dataset name\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get('dsx02'));",
									"    });",
									"",
									"    pm.test(\"path\", function () {",
									"        pm.expect(jsonData.path).to.eql(pm.environment.get('testPath02'));",
									"    });",
									"",
									"    pm.test(\"Check gtag\", function () {",
									"        pm.expect(jsonData.gtags.length).to.eql(3);",
									"        pm.expect(jsonData.gtags[0]).to.eql(\"tag2\");",
									"        pm.expect(jsonData.gtags[1]).to.eql(\"tag3\");",
									"        pm.expect(jsonData.gtags[2]).to.eql(\"tag4\");",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"gtags\": [\r\n    \"tag2\",\r\n    \"tag3\",\r\n    \"tag4\"\r\n  ]\r\n} \r\n \r\n"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx02}}?path={{testPathEncoded02}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx02}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded02}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET TAGGED DATASET 02",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Dataset name\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get('dsx02'));",
									"    });",
									"",
									"    pm.test(\"path\", function () {",
									"        pm.expect(jsonData.path).to.eql(pm.environment.get('testPath02'));",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx02}}?path={{testPathEncoded02}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx02}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded02}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET CLOSE TAGS 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// var result           = '';\r",
									"// var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"// var charactersLength = characters.length;\r",
									"// for ( var i = 0; i < 16; i++ ) {\r",
									"//     result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"// }\r",
									"// pm.variables.set(\"randomString16\", result);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx02}}?path={{testPathEncoded02}}&close={{sbit}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx02}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded02}}"
								},
								{
									"key": "close",
									"value": "{{sbit}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE TAGGED DATA 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx03}}?path={{testPathEncoded03}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx03}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded03}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "REGISTER TAGGED DATA 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"        postman.setEnvironmentVariable(\"sbit\", jsonData.sbit);",
									"    });",
									"",
									"    pm.test(\"Dataset name\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get('dsx03'));",
									"    });",
									"",
									"    pm.test(\"path\", function () {",
									"        pm.expect(jsonData.path).to.eql(pm.environment.get('testPath03'));",
									"    });",
									"",
									"    pm.test(\"Check gtag\", function () {",
									"        pm.expect(jsonData.gtags.length).to.eql(4);",
									"        pm.expect(jsonData.gtags[0]).to.eql(\"tag1\");",
									"        pm.expect(jsonData.gtags[1]).to.eql(\"tag3\");",
									"        pm.expect(jsonData.gtags[2]).to.eql(\"tag4\");",
									"        pm.expect(jsonData.gtags[3]).to.eql(\"tag5\");",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"gtags\": [\r\n    \"tag1\",\r\n    \"tag3\",\r\n    \"tag4\",\r\n    \"tag5\"\r\n  ]\r\n} "
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx03}}?path={{testPathEncoded03}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx03}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded03}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET TAGGED DATASET 03",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Dataset name\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get('dsx03'));",
									"    });",
									"",
									"    pm.test(\"path\", function () {",
									"        pm.expect(jsonData.path).to.eql(pm.environment.get('testPath03'));",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx03}}?path={{testPathEncoded03}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx03}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded03}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET CLOSE TAGS 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx03}}?path={{testPathEncoded03}}&close={{sbit}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx03}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded03}}"
								},
								{
									"key": "close",
									"value": "{{sbit}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SEARCH BY FAKE TAG",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check content type\", function () {",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"    });",
									"",
									"    pm.test(\"Data List\", function () {",
									"        pm.expect(jsonData.length).to.eql(0);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}?gtag[]=tagXX",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}"
							],
							"query": [
								{
									"key": "gtag[]",
									"value": "tagXX"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SEARCH BY SINGLE TAG",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check content type\", function () {",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"    });",
									"",
									"    pm.test(\"Tagged Data List\", function () {",
									"        pm.expect(jsonData.length).gte(2);",
									"    });",
									"",
									"    pm.test(\"Find tagged data in list\", function () {",
									"        var data1 = _.find(pm.response.json(), { ",
									"        name: pm.environment.get('dsx03')",
									"        });",
									"        pm.expect(data1.path).to.eql(pm.environment.get('testPath03'));",
									"        ",
									"        var data2 = _.find(pm.response.json(), { ",
									"        name: pm.environment.get('dsx01')",
									"        });",
									"        pm.expect(data2.path).to.eql(pm.environment.get('testPath01'));",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}?gtag[]=tag1",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}"
							],
							"query": [
								{
									"key": "gtag[]",
									"value": "tag1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SEARCH BY MULTIPLE TAG",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check content type\", function () {",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"    });",
									"",
									"    pm.test(\"Data List\", function () {",
									"        pm.expect(jsonData.length).gte(2);",
									"    });",
									"",
									"    pm.test(\"Find the tagged data in list\", function () {",
									"        var data1 = _.find(pm.response.json(), { ",
									"        name: pm.environment.get('dsx02')",
									"        });",
									"        pm.expect(data1.path).to.eql(pm.environment.get('testPath02'));",
									"",
									"        var data2 = _.find(pm.response.json(), { ",
									"        name: pm.environment.get('dsx03')",
									"        });",
									"        pm.expect(data2.path).to.eql(pm.environment.get('testPath03'));",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}?gtag=tag3&gtag=tag4&=",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}"
							],
							"query": [
								{
									"key": "gtag",
									"value": "tag3"
								},
								{
									"key": "gtag",
									"value": "tag4"
								},
								{
									"key": "",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ADD TAG",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check content type\", function () {",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx02}}/gtags?path={{testPathEncoded02}}&gtag=tag1",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx02}}",
								"gtags"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded02}}"
								},
								{
									"key": "gtag",
									"value": "tag1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CHECK ADDED TAG",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Dataset name\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get('dsx02'));",
									"    });",
									"",
									"    pm.test(\"path\", function () {",
									"        pm.expect(jsonData.path).to.eql(pm.environment.get('testPath02'));",
									"    });",
									"",
									"    pm.test(\"gtag is added\", function () {",
									"        pm.expect(jsonData.gtags[0]).to.eql('tag2');",
									"        pm.expect(jsonData.gtags[1]).to.eql('tag3');",
									"        pm.expect(jsonData.gtags[2]).to.eql('tag4');",
									"        pm.expect(jsonData.gtags[3]).to.eql('tag1');",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx02}}?path={{testPathEncoded02}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx02}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded02}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SEARCH BY ADDED TAG",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check content type\", function () {",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"    });",
									"",
									"    pm.test(\"Tagged Data List\", function () {",
									"        pm.expect(jsonData.length).gte(3);",
									"    });",
									"",
									"    pm.test(\"Find tagged data in list\", function () {",
									"        var data1 = _.find(pm.response.json(), { ",
									"        name: pm.environment.get('dsx02')",
									"        });",
									"        pm.expect(data1.path).to.eql(pm.environment.get('testPath02'));",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}?gtag[]=tag1",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}"
							],
							"query": [
								{
									"key": "gtag[]",
									"value": "tag1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "REPLACE TAG",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"gtag is replaced\", function () {",
									"        pm.expect(jsonData.gtags[0]).to.eql('tagX');",
									"        pm.expect(jsonData.gtags[1]).to.eql('tag3');",
									"        pm.expect(jsonData.gtags[2]).to.eql('tag4');",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"gtags\": [\n    \"tagX\",\n    \"tag3\",\n    \"tag4\"\n  ]\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx03}}?path={{testPathEncoded03}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx03}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded03}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SEARCH BY OLD TAG",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Tagged Data List\", function () {",
									"        pm.expect(jsonData.length).gte(0);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}?gtag[]=tag5",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}"
							],
							"query": [
								{
									"key": "gtag[]",
									"value": "tag5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SEARCH BY NEW TAG",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Tagged Data List\", function () {",
									"        pm.expect(jsonData.length).gte(1);",
									"    });",
									"",
									"    pm.test(\"Find tagged data in list\", function () {",
									"        var data1 = _.find(pm.response.json(), { ",
									"        name: pm.environment.get('dsx03')",
									"        });",
									"        pm.expect(data1.path).to.eql(pm.environment.get('testPath03'));",
									"        pm.expect(data1.gtags[2]).to.eql('tag4');",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}?gtag=tagX&gtag=tag3",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}"
							],
							"query": [
								{
									"key": "gtag",
									"value": "tagX"
								},
								{
									"key": "gtag",
									"value": "tag3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE TAGGED DATA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE TAGGED DATA 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE TAGGED DATA 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "STATUS UNSET TAGS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.unset('dsx01')",
									"pm.environment.unset('testPath01')",
									"pm.environment.unset('testPathEncoded01')",
									"pm.environment.unset('dsx02')",
									"pm.environment.unset('testPath02')",
									"pm.environment.unset('testPathEncoded02')",
									"pm.environment.unset('dsx03')",
									"pm.environment.unset('testPath03')",
									"pm.environment.unset('testPathEncoded03')",
									"pm.environment.unset('sbit')",
									"postman.setEnvironmentVariable('execCounter', 1);",
									"",
									"console.log('Dataset variables were removed for tags folder');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/svcstatus",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"svcstatus"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "utility",
			"item": [
				{
					"name": "STATUS SET UTILITY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('Dataset variables are initialized for utility folder');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function makeID_utiliy(length) {\r",
									"   var result           = '';\r",
									"   var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"   var charactersLength = characters.length;\r",
									"   for ( var i = 0; i < length; i++ ) {\r",
									"      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"   }\r",
									"   return result;\r",
									"}\r",
									"\r",
									"postman.setEnvironmentVariable(\"dsx01\", makeID_utiliy(16));\r",
									"var path01 = \"/\" + makeID_utiliy(8) + \"/\" + makeID_utiliy(4) + \"/\"\r",
									"postman.setEnvironmentVariable(\"testPath01\", path01);\r",
									"postman.setEnvironmentVariable(\"testPathEncoded01\", encodeURIComponent(path01));\r",
									"\r",
									"postman.setEnvironmentVariable(\"dsx02\", makeID_utiliy(16));\r",
									"var path02 = \"/\" + makeID_utiliy(8) + \"/\" + makeID_utiliy(6) + \"/\" + makeID_utiliy(4) + \"/\"\r",
									"postman.setEnvironmentVariable(\"testPath02\", path02);\r",
									"postman.setEnvironmentVariable(\"testPathEncoded02\", encodeURIComponent(path02));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/svcstatus",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"svcstatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET MAIN REGISTER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check content type\", function () {",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"    });",
									"",
									"    pm.test(\"Dataset name\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get('dsx01'));",
									"    });",
									"",
									"    pm.test(\"tenant\", function () {",
									"        pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"    });",
									"",
									"    pm.test(\"subproject\", function () {",
									"        pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"    });",
									"",
									"    pm.test(\"path\", function () {",
									"        pm.expect(jsonData.path).to.eql(pm.environment.get('testPath01'));",
									"    });",
									"",
									"    pm.test(\"ltag\", function () {",
									"        pm.expect(jsonData.ltag).to.eql(pm.environment.get('legaltag01'));",
									"    });",
									"",
									"    pm.test(\"Dates are present\", function () {",
									"        pm.expect(jsonData.created_date).to.exist;",
									"        pm.expect(jsonData.last_modified_date).to.exist;",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(1);",
									"        postman.setEnvironmentVariable(\"sbit\", jsonData.sbit);",
									"    });",
									"",
									"    pm.test(\"Check gtag\", function () {",
									"        pm.expect(jsonData.gtags.length).to.eql(1);",
									"        pm.expect(jsonData.gtags[0]).to.eql(\"tagA\");",
									"    });",
									"",
									"    pm.test(\"Check seismicmetadata\", () => {",
									"        pm.expect(jsonData.seismicmeta_guid).not.equal(null);",
									"    });",
									"",
									"    pm.test(\"gcsurl\", () => {",
									"        postman.setEnvironmentVariable(\"gcsBucketName\", jsonData.gcsurl.split('/')[0]);",
									"        postman.setEnvironmentVariable(\"gcsObjectPrefix\", jsonData.gcsurl.split('/')[1]);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"gtags\": [\r\n        \"tagA\"\r\n    ],\r\n    \"seismicmeta\": {\r\n        \"data\": {\r\n            \"additionalMetaData\": [\r\n                {\r\n                    \"name\": \"SOURCE BARCODE\",\r\n                    \"value\": 3843967263,\r\n                    \"valueAsString\": \"3843967263\"\r\n                },\r\n                {\r\n                    \"name\": \"ORIGINAL FILE NAME\",\r\n                    \"value\": \"1_67_Srv3D_1_8_Original.sgy\",\r\n                    \"valueAsString\": \"1_67_Srv3D_1_8_Original.sgy\"\r\n                },\r\n                {\r\n                    \"name\": \"BIN SPACING\",\r\n                    \"value\": 90,\r\n                    \"valueAsString\": \"90\"\r\n                }\r\n            ],\r\n            \"binGridOperation\": {\r\n                \"binGridOriginEasting\": 1276435.2,\r\n                \"binGridOriginI\": 1,\r\n                \"binGridOriginJ\": 1,\r\n                \"binGridOriginNorthing\": 242030.61,\r\n                \"binGridScaleFactor\": 1,\r\n                \"binNodeIncrementI\": 1,\r\n                \"binNodeIncrementJ\": 1,\r\n                \"binWidthI\": 83.39992,\r\n                \"binWidthJ\": 91.77242,\r\n                \"crsKey\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                \"mapGridBearingJ\": 206.58368,\r\n                \"persistableReferenceCrs\": {\r\n                    \"lateBoundCRS\": {\r\n                        \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"26782\"\r\n                        },\r\n                        \"type\": \"LBC\"\r\n                    },\r\n                    \"singleCT\": {\r\n                        \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"15851\"\r\n                        },\r\n                        \"type\": \"ST\"\r\n                    },\r\n                    \"ver\": \"PE_10_3_1\",\r\n                    \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                    \"authCode\": {\r\n                        \"auth\": \"SLB\",\r\n                        \"code\": \"26782079\"\r\n                    },\r\n                    \"type\": \"EBC\"\r\n                },\r\n                \"transformationMethodNumber\": 1049,\r\n                \"unitKeyBearing\": \"dega\"\r\n            },\r\n            \"binNodePositions\": [\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        1276435.2,\r\n                                        242030.61\r\n                                    ],\r\n                                    [\r\n                                        1281357.8,\r\n                                        239567.36\r\n                                    ],\r\n                                    [\r\n                                        1280002.5,\r\n                                        236859.05\r\n                                    ],\r\n                                    [\r\n                                        1275080,\r\n                                        239322.28\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsMultiPoint\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ]\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"26782\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"26782079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                },\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        -93.60371,\r\n                                        29.312513\r\n                                    ],\r\n                                    [\r\n                                        -93.58811,\r\n                                        29.306007\r\n                                    ],\r\n                                    [\r\n                                        -93.59219,\r\n                                        29.298489\r\n                                    ],\r\n                                    [\r\n                                        -93.60779,\r\n                                        29.304993\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsMultiPoint\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ]\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433],AUTHORITY[\\\"EPSG\\\",4267]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"GCS_North_American_1927\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"4267\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus [4267,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"4267079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                },\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        -93.60387,\r\n                                        29.312752\r\n                                    ],\r\n                                    [\r\n                                        -93.58827,\r\n                                        29.306248\r\n                                    ],\r\n                                    [\r\n                                        -93.592354,\r\n                                        29.298727\r\n                                    ],\r\n                                    [\r\n                                        -93.60795,\r\n                                        29.305231\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsMultiPoint\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ]\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"wkt\": \"GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433],AUTHORITY[\\\"EPSG\\\",4326]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"GCS_WGS_1984\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"4326\"\r\n                        },\r\n                        \"type\": \"LBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                }\r\n            ],\r\n            \"classification\": \"Post-stack, time-migrated\",\r\n            \"dateCreated\": \"2013-03-22T11:16:03Z\",\r\n            \"dateModified\": \"2013-03-22T11:16:03Z\",\r\n            \"derivedBulk\": [\r\n                {\r\n                    \"size\": 1223488818,\r\n                    \"type\": \"ZGY\",\r\n                    \"url\": \"sd://SNTC/colors/test.zgy\"\r\n                },\r\n                {\r\n                    \"size\": 2653649950,\r\n                    \"type\": \"DIO\",\r\n                    \"url\": \"sd://SNTC/colors/test.DIO\"\r\n                }\r\n            ],\r\n            \"description\": \"A comment or a remark.\",\r\n            \"elevationReferenceTime\": {\r\n                \"elevationFromMsl\": {\r\n                    \"unitKey\": \"ft\",\r\n                    \"value\": 0\r\n                },\r\n                \"name\": \"SRD\",\r\n                \"replacementVelocity\": {\r\n                    \"unitKey\": \"ft/s\",\r\n                    \"value\": 4800\r\n                }\r\n            },\r\n            \"externalIds\": [\r\n                \"Petrel:tenant1/ProjectLouisiana/3491763/a9b46fc4-1840-450a-ac01-d15bdaa086ba:aef0e55c-4fcb-4546-a7a2-9df8f27277a1\"\r\n            ],\r\n            \"locationAtIndexZero\": {\r\n                \"features\": [\r\n                    {\r\n                        \"geometry\": {\r\n                            \"coordinates\": [\r\n                                1276435.2,\r\n                                242030.61,\r\n                                -1234\r\n                            ],\r\n                            \"type\": \"AnyCrsPoint\"\r\n                        },\r\n                        \"type\": \"AnyCrsFeature\"\r\n                    }\r\n                ],\r\n                \"persistableReferenceCrs\": {\r\n                    \"lateBoundCRS\": {\r\n                        \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"26782\"\r\n                        },\r\n                        \"type\": \"LBC\"\r\n                    },\r\n                    \"singleCT\": {\r\n                        \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"15851\"\r\n                        },\r\n                        \"type\": \"ST\"\r\n                    },\r\n                    \"ver\": \"PE_10_3_1\",\r\n                    \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                    \"authCode\": {\r\n                        \"auth\": \"SLB\",\r\n                        \"code\": \"26782079\"\r\n                    },\r\n                    \"type\": \"EBC\"\r\n                },\r\n                \"persistableReferenceUnitZ\": {\r\n                    \"scaleOffset\": {\r\n                        \"scale\": 0.001,\r\n                        \"offset\": 0\r\n                    },\r\n                    \"symbol\": \"ms\",\r\n                    \"baseMeasurement\": {\r\n                        \"ancestry\": \"Time\",\r\n                        \"type\": \"UM\"\r\n                    },\r\n                    \"type\": \"USO\"\r\n                },\r\n                \"type\": \"AnyCrsFeatureCollection\"\r\n            },\r\n            \"locationWGS84\": {\r\n                \"features\": [\r\n                    {\r\n                        \"geometry\": {\r\n                            \"coordinates\": [\r\n                                [\r\n                                    [\r\n                                        -93.60387,\r\n                                        29.312752\r\n                                    ],\r\n                                    [\r\n                                        -93.58827,\r\n                                        29.306248\r\n                                    ],\r\n                                    [\r\n                                        -93.592354,\r\n                                        29.298727\r\n                                    ],\r\n                                    [\r\n                                        -93.60795,\r\n                                        29.305231\r\n                                    ],\r\n                                    [\r\n                                        -93.60387,\r\n                                        29.312752\r\n                                    ]\r\n                                ]\r\n                            ],\r\n                            \"type\": \"Polygon\"\r\n                        },\r\n                        \"properties\": {\r\n                            \"name\": \"Survey 4 INLINE_1_67_Srv3D_1_8_Original\"\r\n                        },\r\n                        \"type\": \"Feature\"\r\n                    }\r\n                ],\r\n                \"type\": \"FeatureCollection\"\r\n            },\r\n            \"name\": \"Survey 4 INLINE_1_67_Srv3D_1_8_Original\",\r\n            \"originalBulk\": {\r\n                \"size\": 2873437400,\r\n                \"type\": \"SEGY\",\r\n                \"url\": \"sd://SNTC/colors/test.segy\"\r\n            },\r\n            \"perimeters\": [\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        [\r\n                                            1276435.2,\r\n                                            242030.61\r\n                                        ],\r\n                                        [\r\n                                            1281357.8,\r\n                                            239567.36\r\n                                        ],\r\n                                        [\r\n                                            1280002.5,\r\n                                            236859.05\r\n                                        ],\r\n                                        [\r\n                                            1275080,\r\n                                            239322.28\r\n                                        ],\r\n                                        [\r\n                                            1276435.2,\r\n                                            242030.61\r\n                                        ]\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsPolygon\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ],\r\n                                \"perimeterType\": \"Full Fold Coverage\"\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"26782\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"26782079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                },\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        [\r\n                                            -93.60371,\r\n                                            29.312513\r\n                                        ],\r\n                                        [\r\n                                            -93.58811,\r\n                                            29.306007\r\n                                        ],\r\n                                        [\r\n                                            -93.59219,\r\n                                            29.298489\r\n                                        ],\r\n                                        [\r\n                                            -93.60779,\r\n                                            29.304993\r\n                                        ],\r\n                                        [\r\n                                            -93.60371,\r\n                                            29.312513\r\n                                        ]\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsPolygon\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ],\r\n                                \"perimeterType\": \"Full Fold Coverage\"\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433],AUTHORITY[\\\"EPSG\\\",4267]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"GCS_North_American_1927\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"4267\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus [4267,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"4267079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                }\r\n            ],\r\n            \"rangeAmplitudeMax\": {\r\n                \"unitKey\": \"amplitude\",\r\n                \"value\": 232467.8\r\n            },\r\n            \"rangeAmplitudeMin\": {\r\n                \"unitKey\": \"amplitude\",\r\n                \"value\": -226153.4\r\n            },\r\n            \"rangeCrosslineIncrement\": 1,\r\n            \"rangeCrosslineStart\": 1,\r\n            \"rangeCrosslineStop\": 34,\r\n            \"rangeInlineIncrement\": 1,\r\n            \"rangeInlineStart\": 1,\r\n            \"rangeInlineStop\": 67,\r\n            \"relationships\": {\r\n                \"binGrid\": {\r\n                    \"id\": \"slb:wke:binGrid-5067af51fe6542968ce8868c01af6cb7\"\r\n                },\r\n                \"seismicSurvey\": {\r\n                    \"id\": \"slb:wke:seismicSurvey3d-62d8fe58-c044-537a-b354-7f3f8e860421\",\r\n                    \"name\": \"ST2013-L\"\r\n                },\r\n                \"usesAssociations\": true\r\n            },\r\n            \"seismicProperty\": \"Instantaneous Amplitude\",\r\n            \"stackAngleRangeMax\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": 10\r\n            },\r\n            \"stackAngleRangeMin\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": 0\r\n            },\r\n            \"stackAzimuthRangeMax\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": 20\r\n            },\r\n            \"stackAzimuthRangeMin\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": -20\r\n            },\r\n            \"stackOffsetRangeMax\": {\r\n                \"unitKey\": \"ftUS\",\r\n                \"value\": 3000\r\n            },\r\n            \"stackOffsetRangeMin\": {\r\n                \"unitKey\": \"ftUS\",\r\n                \"value\": 0\r\n            },\r\n            \"stackSubType\": \"Full\",\r\n            \"stackType\": \"Full\",\r\n            \"storageType\": \"32-BIT\",\r\n            \"textualFileHeader\": [\r\n                \"C 1 CLIENT COMPANY CREW NO                                                      C 2 LINE line1dS AREA MAP ID                                                    C 3 REEL NO DAY-START OF REEL YEAR OBSERVER                                     C 4 INSTRUMENT: DELPH MODEL xx SERIAL NO                                        C 5 DATA TRACES/RECORD 1 AUXILIARY TRACES/RECORD 0 CDP FOLD                     C 6 SAMPLE INTERVAL 333 SAMPLES/TRACE 1496 BITS/IN 16 BYTES/SAMPLE 2            C 7 RECORDING FORMAT FORMAT THIS REEL MEASUREMENT SYSTEM                        C 8 SAMPLE CODE: FIXED PT                                                       C 9 GAIN TYPE: FIXED                                                            C10 FILTERS: ALIAS 1500HZ NOTCH HZ BAND - HZ SLOPE - DB/OCT                     C11 SOURCE: TYPE NUMBER/POINT POINT INTERVAL                                    C12 PATTERN: LENGTH WIDTH                                                       C13 SWEEP: START HZ END HZ LENGTH MS CHANEL NO TYPE                             C14 TAPER: START LENGTH MS END LENGTH MS TYPE                                   C15 SPREAD: OFFSET MAX DISTANCE GROUP INTERVAL                                  C16 GEOPHONES: PER GROUP SPACING FREQUENCY MFG MODEL                            C17 PATTERN: LENGTH WIDTH                                                       C18 TRACES SORTED BY: RECORD                                                    C19 AMPLITUDE RECOVERY: NONE                                                    C20 MAP PROJECTION ZONE ID COORDINATE UNITS                                     C21 PROCESSING:                                                                 C22 PROCESSING:                                                                 C23                                                                             C24                                                                             C25                                                                             C26                                                                             C27                                                                             C28                                                                             C29                                                                             C30                                                                             C31                                                                             C32                                                                             C33                                                                             C34                                                                             C35                                                                             C36                                                                             C37                                                                             C38                                                                             C39                                                                             C40 END EBCDIC                                                                  \"\r\n            ],\r\n            \"verticalDomain\": \"Elevation time (two-way travel time)\",\r\n            \"verticalIncrement\": {\r\n                \"unitKey\": \"ms\",\r\n                \"value\": -4\r\n            },\r\n            \"verticalSampleCount\": 1000,\r\n            \"verticalStart\": {\r\n                \"unitKey\": \"ms\",\r\n                \"value\": 0\r\n            },\r\n            \"verticalStop\": {\r\n                \"unitKey\": \"ms\",\r\n                \"value\": -3996\r\n            },\r\n            \"vintage\": \"ST2013-InstantaneousAmplitude\",\r\n            \"waveType\": \"PP\"\r\n        },\r\n        \"kind\": \"{{datapartition}}:wks:seismic3d:1.0.5\",\r\n        \"legal\": {\r\n            \"legaltags\": [\r\n                \"{{legaltag01}}\"\r\n            ],\r\n            \"otherRelevantDataCountries\": [\r\n                \"US\",\r\n                \"BE\",\r\n                \"NO\",\r\n                \"IN\"\r\n            ]\r\n        },\r\n        \"version\": 1040891613125385\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET MAIN CLOSE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    if ( (pm.environment.get('serviceCloudProvider') != 'azure') && (pm.environment.get('serviceCloudProvider') != 'google') ){",
									"        postman.setNextRequest(\"UTILITY DATASET DELETE\");",
									"    }",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded01}}&close={{sbit}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded01}}"
								},
								{
									"key": "close",
									"value": "{{sbit}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ACCESS TOKEN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"gcstoken\", () => {",
									"        postman.setEnvironmentVariable(\"gcsAccessToken\", jsonData.access_token);",
									"    })",
									"",
									"    if (pm.environment.get('serviceCloudProvider') === 'google') {",
									"        postman.setNextRequest(\"UPLOAD NEW TO GCS\");",
									"    }  ",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/utility/gcs-access-token?sdpath=sd://{{tenant}}/{{subproject}}&readonly=false",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"utility",
								"gcs-access-token"
							],
							"query": [
								{
									"key": "sdpath",
									"value": "sd://{{tenant}}/{{subproject}}"
								},
								{
									"key": "readonly",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET UPLOAD CONNECTION STRING",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Validate Credential Details\", function () {",
									"        pm.expect(jsonData.access_token).to.exist;",
									"        pm.expect(jsonData.token_type).to.exist;",
									"        pm.expect(jsonData.expires_in).to.greaterThan(0);",
									"    });",
									"",
									"    postman.setEnvironmentVariable(\"UploadStorageCredential\", jsonData.access_token);",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"",
									"    if (pm.environment.get('serviceCloudProvider') === 'azure') {",
									"        postman.setNextRequest(\"UPLOAD NEW TO ACS\");",
									"    } else if (pm.environment.get('serviceCloudProvider') === 'google') {",
									"        pm.expect(jsonData.token_type).to.eql('Bearer');",
									"        postman.setNextRequest(\"UPLOAD NEW TO GCS\");",
									"    } else {",
									"        postman.setNextRequest(\"UTILITY DATASET DELETE\");",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/utility/upload-connection-string?sdpath=sd://{{tenant}}/{{subproject}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"utility",
								"upload-connection-string"
							],
							"query": [
								{
									"key": "sdpath",
									"value": "sd://{{tenant}}/{{subproject}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UPLOAD NEW TO GCS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check content type\", function () {",
									"        pm.response.to.be.header(\"Content-Type\", \"application/json; charset=UTF-8\");",
									"    });",
									"",
									"    postman.setEnvironmentVariable(\"gcsXcrc32c\", jsonData.crc32c);",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1);",
									"    ",
									"    postman.setNextRequest(\"DOWNLOAD NEW FROM GCS\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gcsAccessToken}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "hello world from e2e"
						},
						"url": {
							"raw": "https://www.googleapis.com/upload/storage/v1/b/{{gcsBucketName}}/o?uploadType=media&name={{gcsObjectPrefix}}%2FOBJ0000",
							"protocol": "https",
							"host": [
								"www",
								"googleapis",
								"com"
							],
							"path": [
								"upload",
								"storage",
								"v1",
								"b",
								"{{gcsBucketName}}",
								"o"
							],
							"query": [
								{
									"key": "uploadType",
									"value": "media"
								},
								{
									"key": "name",
									"value": "{{gcsObjectPrefix}}%2FOBJ0000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UPLOAD NEW TO ACS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 201) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 201\", function () {",
									"        pm.response.to.have.status(201);",
									"    });",
									"",
									"    pm.test(\"Check content length\", function () {",
									"        pm.response.to.be.header(\"Content-Length\", \"0\");",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1);",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"acsSasUrl\", pm.variables.get(\"gcsAccessToken\").replace('?', '/o?'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-ms-blob-type",
								"value": "BlockBlob",
								"type": "text"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "hello world from e2e"
						},
						"url": {
							"raw": "{{acsSasUrl}}",
							"host": [
								"{{acsSasUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPLOAD NEW TO ACS - CONNECTION STRING",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 201) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 201\", function () {",
									"        pm.response.to.have.status(201);",
									"    });",
									"",
									"    pm.test(\"Check content length\", function () {",
									"        pm.response.to.be.header(\"Content-Length\", \"0\");",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1);",
									"",
									"    postman.setNextRequest(\"DOWNLOAD NEW FROM ACS\");",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"acsSasUrl\", pm.variables.get(\"UploadStorageCredential\").replace('?', '/cs/o?'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-ms-blob-type",
								"value": "BlockBlob",
								"type": "text"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "hello world from e2e"
						},
						"url": {
							"raw": "{{acsSasUrl}}",
							"host": [
								"{{acsSasUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DOWNLOAD NEW FROM GCS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check content type\", function () {",
									"        pm.response.to.be.header(\"Content-Type\", \"application/json; charset=UTF-8\");",
									"    });",
									"",
									"    pm.test(\"check crc32c code\", function () {",
									"        pm.expect(jsonData.crc32c).to.eql(pm.environment.get(\"gcsXcrc32c\"));",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1);",
									"    ",
									"    postman.setNextRequest(\"UTILITY LS\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gcsAccessToken}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://www.googleapis.com/storage/v1/b/{{gcsBucketName}}/o/{{gcsObjectPrefix}}%2FOBJ0000",
							"protocol": "https",
							"host": [
								"www",
								"googleapis",
								"com"
							],
							"path": [
								"storage",
								"v1",
								"b",
								"{{gcsBucketName}}",
								"o",
								"{{gcsObjectPrefix}}%2FOBJ0000"
							]
						}
					},
					"response": []
				},
				{
					"name": "DOWNLOAD NEW FROM ACS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check content type\", function () {",
									"        pm.response.to.be.header(\"Content-Type\", \"text/plain\");",
									"    });",
									"",
									"    pm.test(\"check blob type\", function () {",
									"        pm.expect(pm.response.headers.get(\"x-ms-blob-type\")).to.eql(\"BlockBlob\");",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1);",
									"    ",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"acsSasUrl\", pm.variables.get(\"gcsAccessToken\").replace('?', '/o?'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{acsSasUrl}}",
							"host": [
								"{{acsSasUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DOWNLOAD NEW FROM ACS - CONNECTION STRING",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check content type\", function () {",
									"    pm.response.to.be.header(\"Content-Type\", \"text/plain\");",
									"    });",
									"",
									"    pm.test(\"check blob type\", function () {",
									"        pm.expect(pm.response.headers.get(\"x-ms-blob-type\")).to.eql(\"BlockBlob\");",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1);",
									"",
									"    postman.setNextRequest(\"UTILITY LS\");",
									"    ",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"acsSasUrl\", pm.variables.get(\"UploadStorageCredential\").replace('?', '/cs/o?'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{acsSasUrl}}",
							"host": [
								"{{acsSasUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UTILITY LS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check Data List\", function () {",
									"        pm.expect(jsonData.length).gte(1);",
									"        var test = false;",
									"        for(var i = 0; i < jsonData.length; i++) {",
									"            if(jsonData[i] === pm.environment.get('dsx01')) {",
									"                test = true",
									"            }",
									"        }",
									"        pm.expect(test).to.eql(true);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/utility/ls?sdpath=sd://{{tenant}}/{{subproject}}{{testPath01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"utility",
								"ls"
							],
							"query": [
								{
									"key": "sdpath",
									"value": "sd://{{tenant}}/{{subproject}}{{testPath01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UTILITY DATASET DELETE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UTILITY DATASET GET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 404) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    //var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 404\", function () {",
									"        pm.response.to.have.status(404);",
									"    });",
									"",
									"    pm.test(\"Check response body\", function () {",
									"        var responseText = pm.response.text();",
									"        pm.expect(responseText).includes(\"[seismic-store-service] The dataset sd://\"+pm.environment.get(\"tenant\")+\"/\"+pm.environment.get(\"subproject\")+pm.environment.get(\"testPath01\")+pm.environment.get(\"dsx01\")+\" does not exist\");",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UTILITY LS AFTER DATASET DELETE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check Data List\", function () {",
									"        var test = false;",
									"        if(jsonData.length >=1) {",
									"            for(var i = 0; i < jsonData.length; i++) {",
									"                if(jsonData[i] === pm.environment.get('dsx01')) {",
									"                    test = true",
									"                break;",
									"                }",
									"            }",
									"        } ",
									"        pm.expect(test).to.eql(false);",
									"    });",
									"",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/utility/ls?sdpath=sd://{{tenant}}/{{subproject}}{{testPath01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"utility",
								"ls"
							],
							"query": [
								{
									"key": "sdpath",
									"value": "sd://{{tenant}}/{{subproject}}{{testPath01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NEW DATASET REGISTER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check content type\", function () {",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"    });",
									"",
									"    pm.test(\"Dataset name\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get('dsx02'));",
									"    });",
									"",
									"    pm.test(\"tenant\", function () {",
									"        pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"    });",
									"",
									"    pm.test(\"subproject\", function () {",
									"        pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"    });",
									"",
									"    pm.test(\"path\", function () {",
									"        pm.expect(jsonData.path).to.eql(pm.environment.get('testPath02'));",
									"    });",
									"",
									"    pm.test(\"ltag\", function () {",
									"        pm.expect(jsonData.ltag).to.eql(pm.environment.get('legaltag01'));",
									"    });",
									"",
									"    pm.test(\"Dates are present\", function () {",
									"        pm.expect(jsonData.created_date).to.exist;",
									"        pm.expect(jsonData.last_modified_date).to.exist;",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(1);",
									"    });",
									"",
									"    pm.test(\"sbit\", function () {",
									"        pm.expect(jsonData.sbit).not.to.eql(null);",
									"        postman.setEnvironmentVariable(\"sbit\", jsonData.sbit);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx02}}?path={{testPathEncoded02}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx02}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded02}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET CLOSE SBIT UTILITY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(0);",
									"    });",
									"",
									"    pm.test(\"sbit\", function () {",
									"        pm.expect(jsonData.sbit).to.eql(null);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"metadata\": { \"k1\": \"v1\", \"k2\": \"v2\", \"k3\": { \"k4\": \"v4\" } },\n\t\"filemetadata\": {\"type\": \"GENERIC\", \"size\": 1021 },\n\t\"last_modified_date\": true\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx02}}?path={{testPathEncoded02}}&close={{sbit}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx02}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded02}}"
								},
								{
									"key": "close",
									"value": "{{sbit}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UTILITY CP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 202) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 202\", function () {",
									"        pm.response.to.have.status(202);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/utility/cp?sdpath_from=sd://{{tenant}}/{{subproject}}{{testPath02}}{{dsx02}}&sdpath_to=sd://{{tenant}}/{{subproject}}{{testPath02}}{{dsx02}}Copy",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"utility",
								"cp"
							],
							"query": [
								{
									"key": "sdpath_from",
									"value": "sd://{{tenant}}/{{subproject}}{{testPath02}}{{dsx02}}"
								},
								{
									"key": "sdpath_to",
									"value": "sd://{{tenant}}/{{subproject}}{{testPath02}}{{dsx02}}Copy"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UTILITY LS AFTER COPY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check Data List\", function () {",
									"        pm.expect(jsonData.length).gte(1);",
									"        var test = false;",
									"        for(var i = 0; i < jsonData.length; i++) {",
									"            if(jsonData[i] === (pm.environment.get('dsx02') + \"Copy\") ) {",
									"                test = true",
									"            }",
									"        }",
									"        pm.expect(test).to.eql(true);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/utility/ls?sdpath=sd://{{tenant}}/{{subproject}}{{testPath02}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"utility",
								"ls"
							],
							"query": [
								{
									"key": "sdpath",
									"value": "sd://{{tenant}}/{{subproject}}{{testPath02}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE COPY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx02}}Copy?path={{testPathEncoded02}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx02}}Copy"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded02}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE ORIGINAL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx02}}?path={{testPathEncoded02}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx02}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded02}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET MAIN DELETE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UTILITY DATASET DELETE IN P1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path=/p1",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "/p1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UTILITY DATASET DELETE IN P2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx02}}?path=/p1/p2",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx02}}"
							],
							"query": [
								{
									"key": "path",
									"value": "/p1/p2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "STATUS UNSET UTILITY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.unset('dsx01');",
									"pm.environment.unset('testPath01');",
									"pm.environment.unset('testPathEncoded01');",
									"pm.environment.unset('dsx02');",
									"pm.environment.unset('testPath02');",
									"pm.environment.unset('testPathEncoded02');",
									"pm.environment.unset('gcsBucketName');",
									"pm.environment.unset('gcsObjectPrefix');",
									"pm.environment.unset('gcsXcrc32c');",
									"pm.environment.unset('tokenType');",
									"pm.environment.unset('gcsAccessToken');",
									"pm.environment.unset('sbit');",
									"pm.environment.unset('acsSasUrl');",
									"pm.environment.unset('UploadStorageCredential');",
									"postman.setEnvironmentVariable('execCounter', 1);",
									"",
									"console.log('Dataset variables were removed for utility folder');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/svcstatus",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"svcstatus"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "utility_ls",
			"item": [
				{
					"name": "MULTI LS SET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('Multi ls test variables have been initialized');",
									"postman.setEnvironmentVariable('execCounter', 1)",
									"pm.environment.set('serviceCloudProvider', pm.response.headers.get('Service-Provider'));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function makeID_multiLs(length) {\r",
									"   var result           = '';\r",
									"   var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"   var charactersLength = characters.length;\r",
									"   for ( var i = 0; i < length - 1; i++ ) {\r",
									"      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"   }\r",
									"   return 'W' + result;\r",
									"}\r",
									"\r",
									"// unset \r",
									"pm.environment.unset('lsMultiOriginalSet')\r",
									"pm.environment.unset('lsMultiDatasetsRoot')\r",
									"pm.environment.unset('lsMultiCurrentSet')\r",
									"pm.environment.unset('lsMultiDatasetName')\r",
									"pm.environment.unset('lsMultiPath')\r",
									"pm.environment.unset('lsMultiBasePath')\r",
									"pm.environment.unset('nextPageCursor')\r",
									"pm.environment.unset('resArray')\r",
									"\r",
									"\r",
									"const lsMultiOriginalSet = [];\r",
									"\r",
									"// create 10 datasets\r",
									"for(let ii=0; ii<10; ii++) {\r",
									"    lsMultiOriginalSet.push(\"dsx0\" + ii);\r",
									"}\r",
									"postman.setEnvironmentVariable(\"lsMultiDatasetsRoot\", lsMultiOriginalSet);\r",
									"\r",
									"// create 2 dataset in 5 folders\r",
									"for(let ii=0; ii<5; ii++) {\r",
									"    lsMultiOriginalSet.push(\"folder0\" + ii + '/fsx01');\r",
									"    lsMultiOriginalSet.push(\"folder0\" + ii + '/fsx02');\r",
									"}\r",
									"\r",
									"postman.setEnvironmentVariable(\"lsMultiOriginalSet\", lsMultiOriginalSet);\r",
									"postman.setEnvironmentVariable(\"lsMultiBasePath\", makeID_multiLs(8));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/svcstatus",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"svcstatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "MULTI LS GENERATE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    let lsMultiCurrentSet = pm.environment.get(\"lsMultiCurrentSet\");",
									"",
									"    if(lsMultiCurrentSet.length > 0) {",
									"        postman.setNextRequest('MULTI LS GENERATE');",
									"    } else {",
									"        pm.environment.unset('lsMultiCurrentSet');",
									"        const provider = pm.environment.get('serviceCloudProvider');",
									"        if (provider !== 'azure' && provider !== 'ibm') {",
									"            postman.setNextRequest('MULTI LS DATASETS');",
									"        }",
									"    }",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"let lsMultiCurrentSet = pm.environment.get(\"lsMultiCurrentSet\");\r",
									"if(!lsMultiCurrentSet) {\r",
									"    lsMultiCurrentSet = pm.environment.get(\"lsMultiOriginalSet\").split(',');\r",
									"}\r",
									"\r",
									"const basePath = pm.environment.get(\"lsMultiBasePath\").split(',');\r",
									"\r",
									"lsMultiDatasetName = lsMultiCurrentSet[0];\r",
									"const tmp = lsMultiDatasetName.split('/')\r",
									"if(tmp.length == 1) {\r",
									"    pm.environment.set(\"lsMultiPath\", \"/\" + basePath + \"/\");\r",
									"    pm.environment.set(\"lsMultiDatasetName\", tmp[0]);\r",
									"} else {\r",
									"    pm.environment.set(\"lsMultiPath\", \"/\" + basePath + \"/\" + tmp[0]);\r",
									"    pm.environment.set(\"lsMultiDatasetName\", tmp[1]);\r",
									"}\r",
									"lsMultiCurrentSet.shift()\r",
									"pm.environment.set(\"lsMultiCurrentSet\", lsMultiCurrentSet);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{lsMultiDatasetName}}?path={{lsMultiPath}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{lsMultiDatasetName}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{lsMultiPath}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MULTI LS DIRS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const basePath = pm.environment.get(\"lsMultiBasePath\");\r",
									"pm.environment.set(\"lsMultiPath\", \"/\" + basePath + \"/\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {\r",
									"    console.log(pm.response.text())\r",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));\r",
									"\r",
									"} else {\r",
									"\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    const orignalSet = pm.environment.get(\"lsMultiOriginalSet\").split(',');\r",
									"    let dirs = [];\r",
									"    for(const ele of orignalSet) {\r",
									"        const tmp = ele.split('/');\r",
									"        if(tmp.length > 1) {\r",
									"            dirs.push(tmp[0] + '/')\r",
									"        }\r",
									"    }\r",
									"    pm.test(\"Check if two arrays are equal only for directories\", function () {\r",
									"        pm.expect([...new Set(dirs)].sort().toString()).to.eql(pm.response.json().sort().toString());\r",
									"    });\r",
									"\r",
									"    // Reset environment variables if _.retryOnFailure function was used before\r",
									"    var key = request.name + '_counter';\r",
									"    pm.environment.unset(key);\r",
									"    postman.setEnvironmentVariable('execCounter', 1)\r",
									"\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}",
								"type": "default"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}",
								"type": "default"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "default"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/utility/ls?sdpath=sd://{{tenant}}/{{subproject}}{{lsMultiPath}}&wmode=dirs",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"utility",
								"ls"
							],
							"query": [
								{
									"key": "sdpath",
									"value": "sd://{{tenant}}/{{subproject}}{{lsMultiPath}}"
								},
								{
									"key": "wmode",
									"value": "dirs"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MULTI LS DIRS AND DATASETS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const basePath = pm.environment.get(\"lsMultiBasePath\");\r",
									"pm.environment.set(\"lsMultiPath\", \"/\" + basePath + \"/\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {\r",
									"    console.log(pm.response.text())\r",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));\r",
									"\r",
									"} else {\r",
									"\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    const orignalSet = pm.environment.get(\"lsMultiOriginalSet\").split(',');\r",
									"    let dirs = [];\r",
									"    let datasets = []\r",
									"    for(const ele of orignalSet) {\r",
									"        const tmp = ele.split('/');\r",
									"        if(tmp.length > 1) {\r",
									"            dirs.push(tmp[0] + '/')\r",
									"        } else {\r",
									"            datasets.push(tmp[0])\r",
									"        }\r",
									"    }\r",
									"\r",
									"    var result = pm.response.json();\r",
									"    let resultsDirs = [];\r",
									"    let resultDatasets = [];\r",
									"    for(const ele of result) {\r",
									"        const tmp = ele.split('/');\r",
									"        if(tmp.length > 1) {\r",
									"            resultsDirs.push(tmp[0] + '/')\r",
									"        } else {\r",
									"            resultDatasets.push(tmp[0]);\r",
									"        }\r",
									"    }\r",
									"\r",
									"    pm.test(\"Check if two arrays are equal for directories\", function () {\r",
									"        pm.expect([...new Set(dirs)].sort().toString()).to.eql([...new Set(resultsDirs)].sort().toString());\r",
									"    });\r",
									"\r",
									"    pm.test(\"Check if two arrays are equal for datasets\", function () {\r",
									"        pm.expect([...new Set(datasets)].sort().toString()).to.eql([...new Set(resultDatasets)].sort().toString());\r",
									"    });\r",
									"\r",
									"    // Reset environment variables if _.retryOnFailure function was used before\r",
									"    var key = request.name + '_counter';\r",
									"    pm.environment.unset(key);\r",
									"    postman.setEnvironmentVariable('execCounter', 1)\r",
									"\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}",
								"type": "default"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}",
								"type": "default"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "default"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/utility/ls?sdpath=sd://{{tenant}}/{{subproject}}{{lsMultiPath}}&wmode=all",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"utility",
								"ls"
							],
							"query": [
								{
									"key": "sdpath",
									"value": "sd://{{tenant}}/{{subproject}}{{lsMultiPath}}"
								},
								{
									"key": "wmode",
									"value": "all"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MULTI LS DATASETS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const basePath = pm.environment.get(\"lsMultiBasePath\");\r",
									"pm.environment.set(\"lsMultiPath\", \"/\" + basePath + \"/\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {\r",
									"    console.log(pm.response.text())\r",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));\r",
									"\r",
									"} else {\r",
									"\r",
									"    // Reset environment variables if _.retryOnFailure function was used before\r",
									"    var key = request.name + '_counter';\r",
									"    pm.environment.unset(key);\r",
									"    postman.setEnvironmentVariable('execCounter', 1)\r",
									"\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    var result = pm.response.json();\r",
									"    let resultDatasets = [];\r",
									"    for(const ele of result) {\r",
									"        const tmp = ele.split('/');\r",
									"        if(tmp.length == 1) {\r",
									"            resultDatasets.push(tmp[0])\r",
									"        }\r",
									"    }\r",
									"    const datasets = pm.environment.get(\"lsMultiDatasetsRoot\").split(',');\r",
									"    pm.test(\"Check if two arrays are equal only for datasets\", function () {\r",
									"        pm.expect([...new Set(datasets)].sort().toString()).to.eql([...new Set(resultDatasets)].sort().toString());\r",
									"    });\r",
									"\r",
									"    const provider = pm.environment.get('serviceCloudProvider');\r",
									"    if( provider === 'aws' ||  provider === 'ibm') {\r",
									"        postman.setNextRequest('MULTI LS DELETE');\r",
									"    }\r",
									"\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}",
								"type": "default"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}",
								"type": "default"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "default"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/utility/ls?sdpath=sd://{{tenant}}/{{subproject}}{{lsMultiPath}}&wmode=datasets",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"utility",
								"ls"
							],
							"query": [
								{
									"key": "sdpath",
									"value": "sd://{{tenant}}/{{subproject}}{{lsMultiPath}}"
								},
								{
									"key": "wmode",
									"value": "datasets"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MULTI LS DATASET PAGE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {\r",
									"    console.log(pm.response.text())\r",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));\r",
									"    \r",
									"} else {\r",
									"\r",
									"    // reset retry counter\r",
									"    var key = request.name + '_counter';\r",
									"    pm.environment.unset(key);\r",
									"    postman.setEnvironmentVariable('execCounter', 1)\r",
									"\r",
									"    // check status code    \r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    // extract the response and set next page cursor\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.environment.set(\"nextPageCursor\",jsonData.nextPageCursor);\r",
									"\r",
									"    // fill the results array\r",
									"    let resArray = [];\r",
									"    if ((pm.environment.get(\"resArray\"))) {\r",
									"        resArray =pm.environment.get(\"resArray\");\r",
									"    }\r",
									"    for (var i=0; i<jsonData.datasets.length; i++) {\r",
									"        resArray.push(jsonData.datasets[i]);\r",
									"    }\r",
									"    resArray.sort();\r",
									"    pm.environment.set(\"resArray\",resArray);\r",
									"\r",
									"    pm.test(\"Verify number of datasets returned should be less than or equal to limit parameter\", function () {\r",
									"    // Get the value of the limit parameter from the request URL\r",
									"    var limit = pm.request.url.query.get(\"limit\");\r",
									"    // Check if number of datasets returned is less than or equal to limit parameter\r",
									"    pm.expect(jsonData.datasets.length).to.be.at.most(parseInt(limit));\r",
									"});\r",
									"\r",
									"    // if there is a next page token re-execute this call for retrieve the new page otherwise check the results and move to the next call\r",
									"    const provider = pm.environment.get('serviceCloudProvider');\r",
									"    const pageTerminator = provider == 'google' ? \"\" : null;\r",
									"    if (jsonData.nextPageCursor != pageTerminator) {\r",
									"        postman.setNextRequest('MULTI LS DATASET PAGE');\r",
									"    } else {\r",
									"        pm.test(\"Check pagination for datasets\", function () {\r",
									"            pm.expect([...new Set(pm.environment.get(\"lsMultiDatasetsRoot\").split(','))].sort().toString()).to.eql([...new Set(resArray)].sort().toString());\r",
									"        });\r",
									"        pm.environment.unset('resArray');\r",
									"    }\r",
									"\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const basePath = pm.environment.get(\"lsMultiBasePath\");\r",
									"pm.environment.set(\"lsMultiPath\", \"/\" + basePath + \"/\");\r",
									"\r",
									"if (pm.environment.get(\"nextPageCursor\")) {\r",
									"    var cursor = pm.environment.get(\"nextPageCursor\");\r",
									"    pm.request.url.query.add('cursor=' + encodeURIComponent(cursor));\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}",
								"type": "default"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}",
								"type": "default"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "default"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/utility/ls?sdpath=sd://{{tenant}}/{{subproject}}{{lsMultiPath}}&wmode=datasets&limit=3",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"utility",
								"ls"
							],
							"query": [
								{
									"key": "sdpath",
									"value": "sd://{{tenant}}/{{subproject}}{{lsMultiPath}}"
								},
								{
									"key": "wmode",
									"value": "datasets"
								},
								{
									"key": "limit",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MULTI LS DELETE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    let lsMultiCurrentSet = pm.environment.get(\"lsMultiCurrentSet\");",
									"",
									"    // Delete datasets and folders",
									"    if(lsMultiCurrentSet.length > 0) {",
									"        postman.setNextRequest('MULTI LS DELETE');",
									"    } else {",
									"        pm.environment.unset('lsMultiCurrentSet')",
									"    }    ",
									"",
									"    ",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"let lsMultiCurrentSet = pm.environment.get(\"lsMultiCurrentSet\");\r",
									"if(!lsMultiCurrentSet) {\r",
									"    lsMultiCurrentSet = pm.environment.get(\"lsMultiOriginalSet\").split(',');\r",
									"}\r",
									"\r",
									"const basePath = pm.environment.get(\"lsMultiBasePath\").split(',');\r",
									"\r",
									"lsMultiDatasetName = lsMultiCurrentSet[0];\r",
									"const tmp = lsMultiDatasetName.split('/')\r",
									"if(tmp.length == 1) {\r",
									"    pm.environment.set(\"lsMultiPath\", \"/\" + basePath + \"/\");\r",
									"    pm.environment.set(\"lsMultiDatasetName\", tmp[0]);\r",
									"} else {\r",
									"    pm.environment.set(\"lsMultiPath\", \"/\" + basePath + \"/\" + tmp[0]);\r",
									"    pm.environment.set(\"lsMultiDatasetName\", tmp[1]);\r",
									"}\r",
									"lsMultiCurrentSet.shift()\r",
									"pm.environment.set(\"lsMultiCurrentSet\", lsMultiCurrentSet);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{lsMultiDatasetName}}?path={{lsMultiPath}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{lsMultiDatasetName}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{lsMultiPath}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MULTI LS UNSET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.unset('lsMultiOriginalSet')",
									"pm.environment.unset('lsMultiCurrentSet')",
									"pm.environment.unset('lsMultiDatasetName')",
									"pm.environment.unset('lsMultiPath')",
									"pm.environment.unset('lsMultiBasePath')",
									"pm.environment.unset('lsMultiDatasetsRoot')",
									"pm.environment.unset('nextPageCursor')",
									"pm.environment.unset('resArray')",
									"postman.setEnvironmentVariable('execCounter', 1)",
									"",
									"console.log('Multi ls test variables have been uninitialized');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/svcstatus",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"svcstatus"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "users",
			"item": [
				{
					"name": "USER STATUS SET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.environment.get(\"VCS_Provider\") === 'gitlab') {",
									"    postman.setEnvironmentVariable('execCounter', 1);",
									"    postman.setNextRequest(\"APP REGISTER\");",
									"} else {",
									"    postman.setEnvironmentVariable('execCounter', 1);",
									"    postman.setNextRequest(\"USER ROLES\");",
									"};",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/svcstatus",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"svcstatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "USER ROLES",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Validate user roles\", function () {",
									"        pm.expect(jsonData.roles.length).to.be.above(0);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/user/roles?sdpath=sd://{{tenant}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"user",
								"roles"
							],
							"query": [
								{
									"key": "sdpath",
									"value": "sd://{{tenant}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "USER ADD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"{{newuser}}\",\n\t\"path\": \"sd://{{tenant}}/{{subproject}}\",\n\t\"group\": \"admin\"\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/user",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "USER LIST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Find test account in user list\", function () {",
									"        var list = jsonData.length;",
									"        var check = 'false';",
									"        for(var i = 0; i < list; i++) {",
									"            if(jsonData[i][0] == pm.environment.get('newuser')) {",
									"                if(jsonData[i][1] == 'admin') {",
									"                    check = 'true';",
									"                }",
									"            }",
									"        }",
									"        pm.expect(check).to.eql('true');",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/user?sdpath=sd://{{tenant}}/{{subproject}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "sdpath",
									"value": "sd://{{tenant}}/{{subproject}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "USER REMOVE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"{{newuser}}\",\n\t\"path\": \"sd://{{tenant}}/{{subproject}}\"\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/user",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "USER LIST AFTER REMOVE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Find deleted account in user list\", function () {",
									"        var list = jsonData.length;",
									"        var check = 'not found';",
									"        var user = pm.environment.get('newuser').split('@')[0];",
									"        for(var i = 0; i < list; i++) {",
									"            if(jsonData[i][0] == user) {",
									"                check = 'found';",
									"            }",
									"        }",
									"        pm.expect(check).to.eql('not found');",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/user?sdpath=sd://{{tenant}}/{{subproject}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "sdpath",
									"value": "sd://{{tenant}}/{{subproject}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "USER ADD GROUP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if ((responseCode.code != 200) && (responseCode.code != 409)) {",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200 or 409\", function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([200,409]);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"{{newuser_group}}\",\n\t\"path\": \"sd://{{tenant}}/{{subproject}}\",\n\t\"group\": \"admin\"\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/user",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "USER LIST GROUP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Find deleted account in user list\", function () {",
									"        var list = jsonData.length;",
									"        var check = 'not found';",
									"        for(var i = 0; i < list; i++) {",
									"            if(jsonData[i][0] == pm.environment.get('newuser_group')) {",
									"                check = 'found';",
									"                console.log('Match')",
									"            }",
									"        }",
									"        pm.expect(check).to.eql('found');",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/user?sdpath=sd://{{tenant}}/{{subproject}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "sdpath",
									"value": "sd://{{tenant}}/{{subproject}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "USER REMOVE GROUP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"{{newuser_group}}\",\n\t\"path\": \"sd://{{tenant}}/{{subproject}}\"\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/user",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "USER LIST AFTER REMOVE GROUP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Find deleted account in user list\", function () {",
									"        var list = jsonData.length;",
									"        var check = 'not found';",
									"        for(var i = 0; i < list; i++) {",
									"            if(jsonData[i][0] == pm.environment.get('newuser_group')) {",
									"                check = 'found';",
									"            }",
									"        }",
									"        pm.expect(check).to.eql('not found');",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/user?sdpath=sd://{{tenant}}/{{subproject}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "sdpath",
									"value": "sd://{{tenant}}/{{subproject}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "app",
			"item": [
				{
					"name": "APP REGISTER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/app/?email={{appAdminEmail}}&sdpath=sd://{{tenant}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"app",
								""
							],
							"query": [
								{
									"key": "email",
									"value": "{{appAdminEmail}}"
								},
								{
									"key": "sdpath",
									"value": "sd://{{tenant}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "APP LIST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // can be re-enabled after 01/22 when sauth v1 will be dismissed",
									"    // pm.test(\"Validate app List\", function () {",
									"    //     var list = jsonData.length;",
									"    //     pm.expect(list).to.be.above(0);",
									"    //     var test = 'false';",
									"    //     for(var i = 0; i < list; i++) {",
									"    //         if(jsonData[i] == pm.environment.get(\"adminEmail\")) {",
									"    //             test = 'true';",
									"    //         }",
									"    //     }",
									"    //     pm.expect(test).to.eql('true');",
									"    // });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/app?sdpath=sd://{{tenant}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"app"
							],
							"query": [
								{
									"key": "sdpath",
									"value": "sd://{{tenant}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "APP REGISTER TRUSTED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/app/trusted?email={{appAdminEmail}}&sdpath=sd://{{tenant}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"app",
								"trusted"
							],
							"query": [
								{
									"key": "email",
									"value": "{{appAdminEmail}}"
								},
								{
									"key": "sdpath",
									"value": "sd://{{tenant}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "APP REGISTER TRUSTED NEGATIVE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 400) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code should be 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/app/trusted?email=fake-{{appAdminEmail}}&sdpath=sd://{{tenant}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"app",
								"trusted"
							],
							"query": [
								{
									"key": "email",
									"value": "fake-{{appAdminEmail}}"
								},
								{
									"key": "sdpath",
									"value": "sd://{{tenant}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "APP LIST TRUSTED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // can be re-enabled after 01/22 when sauth v1 will be dismissed",
									"    // pm.test(\"Validate trusted app List\", function () {",
									"    //     var list = jsonData.length;",
									"    //     pm.expect(list).to.be.above(0);",
									"    //     var test = 'false';",
									"    //     for(var i = 0; i < list; i++) {",
									"    //         if(jsonData[i] == pm.environment.get(\"adminEmail\")) {",
									"    //             test = 'true';",
									"    //         }",
									"    //     }",
									"    //     pm.expect(test).to.eql('true');",
									"    // });",
									"",
									"    pm.test(\"Validate fake email not in trusted app List\", function () {",
									"        var list = jsonData.length;",
									"        pm.expect(list).to.be.above(0);",
									"        var test = 'true';",
									"        var fakeemail = ('fake-').concat(pm.environment.get(\"adminEmail\"));",
									"        for(var i = 0; i < list; i++) {",
									"            if(jsonData[i] == fakeemail) {",
									"                test = 'false';",
									"                break;",
									"            }",
									"        }",
									"        pm.expect(test).to.eql('true');",
									"    }); ",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/app/trusted?sdpath=sd://{{tenant}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"app",
								"trusted"
							],
							"query": [
								{
									"key": "sdpath",
									"value": "sd://{{tenant}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "impersonation_token",
			"item": [
				{
					"name": "STATUS SET IMPERSONATION TOKEN",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"Object.prototype.makeID_impersonation_token = function(length) {\r",
									"   var result           = '';\r",
									"   var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"   var charactersLength = characters.length;\r",
									"   for ( var i = 0; i < length; i++ ) {\r",
									"      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"   }\r",
									"   return result;\r",
									"}\r",
									"\r",
									"postman.setEnvironmentVariable(\"testDatasetName\", makeID_impersonation_token(16));\r",
									"var path = \"/\" + makeID_impersonation_token(8) + \"/\" + makeID_impersonation_token(4) + \"/\" + makeID_impersonation_token(4) + \"/\"\r",
									"postman.setEnvironmentVariable(\"testPathEncoded\", encodeURIComponent(path));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"try {",
									"    var tokenPayload = pm.environment.get('STOKEN').split('.')[1];",
									"    tokenPayload = tokenPayload.replace(/-/g, '+').replace(/_/g, '/');",
									"    tokenPayload = JSON.parse(decodeURIComponent(atob(tokenPayload).split('').map(function(c) {",
									"        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);",
									"    }).join('')));",
									"    if(!tokenPayload.hasOwnProperty('sub')) {",
									"        postman.setNextRequest(\"STATUS UNSET IMPERONATION TOKEN\");",
									"    }",
									"    postman.setEnvironmentVariable(\"trustedApplicationID\", tokenPayload['sub']);",
									"} catch(error) {",
									"    postman.setNextRequest(\"STATUS UNSET IMPERONATION TOKEN\");",
									"}",
									"",
									"postman.setEnvironmentVariable('execCounter', 1)",
									"",
									"console.log('The \\\"Impersonation token\\\" test suite variables have been set');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/svcstatus",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"svcstatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "IMPERSONATION  APP REGISTER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/app/?email={{trustedApplicationID}}&sdpath=sd://{{tenant}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"app",
								""
							],
							"query": [
								{
									"key": "email",
									"value": "{{trustedApplicationID}}"
								},
								{
									"key": "sdpath",
									"value": "sd://{{tenant}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "IMPERSONATION  APP REGISTER TRUSTED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/app/trusted?email={{trustedApplicationID}}&sdpath=sd://{{tenant}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"app",
								"trusted"
							],
							"query": [
								{
									"key": "email",
									"value": "{{trustedApplicationID}}"
								},
								{
									"key": "sdpath",
									"value": "sd://{{tenant}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "IMPERSONATION  IMPTOKEN GENERATE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if ( (responseCode.code != 200) === (responseCode.code != 501) ) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else if(pm.response.code !== 501) {",
									"",
									"    var jsonData = pm.response.json();",
									"    postman.setEnvironmentVariable(\"impersonationToken\", jsonData.impersonation_token);",
									"    postman.setEnvironmentVariable(\"impersonationTokenContext\", jsonData.context);",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check impersonation token exp time and type\", function () {",
									"        pm.expect(jsonData.expires_in).to.lte(3600);",
									"        pm.expect(jsonData.token_type).to.eql('Bearer');",
									"    });",
									"    ",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"",
									"} else {",
									"",
									"    pm.test(\"Status code is 501\", function () {",
									"        pm.response.to.have.status(501);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1);",
									"",
									"    postman.setNextRequest(\"STATUS UNSET IMPERONATION TOKEN\");",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							},
							{
								"key": "user-token",
								"value": "{{STOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"resources\": [{\n  \t\t\"readonly\": false, \n  \t\t\"resource\": \"sd://{{tenant}}/{{subproject}}/\"\n  \t\t\n  \t}\n  ]\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/impersonation-token",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"impersonation-token"
							]
						}
					},
					"response": []
				},
				{
					"name": "IMPERSONATION  IMPTOKEN REFRESH",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if ( (responseCode.code != 200) === (responseCode.code != 501) ) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else if(pm.response.code !== 501) {",
									"",
									"    var jsonData = pm.response.json();",
									"    postman.setEnvironmentVariable(\"impersonationToken\", jsonData.impersonation_token);",
									"    postman.setEnvironmentVariable(\"impersonationTokenContext\", jsonData.context);",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check imptoken\", function () {",
									"        postman.setEnvironmentVariable(\"imptoken\", jsonData.impersonation_token);",
									"        pm.expect(jsonData.expires_in).to.gte(3000);",
									"        pm.expect(jsonData.token_type).to.eql('Bearer');",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"",
									"} else {",
									"    ",
									"    pm.test(\"Status code is 501\", function () {",
									"        pm.response.to.have.status(501);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1);",
									"",
									"    postman.setNextRequest(\"STATUS UNSET IMPERONATION TOKEN\");",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							},
							{
								"key": "impersonation-token",
								"value": "{{impersonationToken}}",
								"type": "text"
							},
							{
								"key": "impersonation-token-context",
								"value": "{{impersonationTokenContext}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/impersonation-token",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"impersonation-token"
							]
						}
					},
					"response": []
				},
				{
					"name": "IMPERSONATION  DATASET REGISTER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{impersonationToken}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							},
							{
								"key": "impersonation-token-context",
								"value": "{{impersonationTokenContext}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{testDatasetName}}imptoken?path={{testPathEncoded}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{testDatasetName}}imptoken"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "IMPERSONATION  DATASET DELETE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{impersonationToken}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							},
							{
								"key": "impersonation-token-context",
								"value": "{{impersonationTokenContext}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{testDatasetName}}imptoken?path={{testPathEncoded}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{testDatasetName}}imptoken"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "STATUS UNSET IMPERONATION TOKEN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.unset('impersonationToken')",
									"pm.environment.unset('impersonationTokenContext')",
									"pm.environment.unset('testDatasetName')",
									"pm.environment.unset('testPathEncoded')",
									"pm.environment.unset('trustedApplicationID')",
									"",
									"console.log('The \\\"Impersonation token\\\" test suite variables have been removed');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/svcstatus",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"svcstatus"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "imptoken",
			"item": [
				{
					"name": "IMPTOKEN STATUS SET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('Dataset variables are initialized for imptoken folder');",
									"",
									"postman.setEnvironmentVariable('execCounter', 1);",
									"",
									"if (pm.environment.get(\"VCS_Provider\") === 'gitlab') {",
									"    pm.environment.unset('dsx01');",
									"    pm.environment.unset('dsx02');",
									"    pm.environment.unset('testPath');",
									"    pm.environment.unset('testPathEncoded');",
									"    postman.setNextRequest(\"CP STATUS SET\");",
									"} else {",
									"    postman.setNextRequest(\"STATUS UNSET IMPTOKEN\");",
									"};",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function makeID_imptoken(length) {\r",
									"   var result           = '';\r",
									"   var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"   var charactersLength = characters.length;\r",
									"   for ( var i = 0; i < length; i++ ) {\r",
									"      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"   }\r",
									"   return result;\r",
									"}\r",
									"\r",
									"postman.setEnvironmentVariable(\"dsx01\", makeID_imptoken(16));\r",
									"postman.setEnvironmentVariable(\"dsx02\", makeID_imptoken(16));\r",
									"\r",
									"var path = \"/\" + makeID_imptoken(8) + \"/\" + makeID_imptoken(4) + \"/\" + makeID_imptoken(3) + \"/\" \r",
									"postman.setEnvironmentVariable(\"testPath\", path);\r",
									"postman.setEnvironmentVariable(\"testPathEncoded\", encodeURIComponent(path));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/svcstatus",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"svcstatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "IMPTOKEN GENERATE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if ( (responseCode.code != 200) === (responseCode.code != 501) ) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else if(pm.response.code !== 501) {",
									"",
									"    var jsonData = pm.response.json();",
									"    postman.setEnvironmentVariable(\"imptoken\", jsonData.impersonation_token);",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check content type\", function () {",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"    });",
									"",
									"    pm.test(\"Check imptoken\", function () {",
									"        postman.setEnvironmentVariable(\"imptoken\", jsonData.impersonation_token);",
									"        pm.expect(jsonData.expires_in).to.eql(3600);",
									"        pm.expect(jsonData.token_type).to.eql('Bearer');",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"",
									"} else {",
									"    ",
									"    pm.test(\"Status code is 501\", function () {",
									"        pm.response.to.have.status(501);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1);",
									"",
									"    postman.setNextRequest(\"STATUS UNSET IMPTOKEN\");",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"Bearer {{STOKEN}}\",\n  \"resources\": [{\n  \t\t\"readonly\": false, \n  \t\t\"resource\": \"sd://{{tenant}}/{{subproject}}/\"\n  \t\t\n  \t}\n  ],\n  \"refresh-url\": \"https://google.com\"\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/imptoken",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"imptoken"
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET REGISTER 01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check content type\", function () {",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"    });",
									"",
									"    pm.test(\"Dataset name\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get('dsx01'));",
									"    });",
									"",
									"    pm.test(\"tenant\", function () {",
									"        pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"    });",
									"",
									"    pm.test(\"subproject\", function () {",
									"        pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"    });",
									"",
									"    pm.test(\"path\", function () {",
									"        pm.expect(jsonData.path).to.eql(pm.environment.get('testPath'));",
									"    });",
									"",
									"    pm.test(\"ltag\", function () {",
									"        pm.expect(jsonData.ltag).to.eql(pm.environment.get('legaltag01'));",
									"    });",
									"",
									"    pm.test(\"Dates are present\", function () {",
									"        pm.expect(jsonData.created_date).to.exist;",
									"        pm.expect(jsonData.last_modified_date).to.exist;",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(1);",
									"        postman.setEnvironmentVariable(\"sbit\", jsonData.sbit);",
									"    });",
									"",
									"    pm.test(\"Check gtag\", function () {",
									"        pm.expect(jsonData.gtags.length).to.eql(1);",
									"        pm.expect(jsonData.gtags[0]).to.eql(\"tagA\");",
									"    });",
									"",
									"    pm.test(\"Check seismicmetadata\", () => {",
									"        pm.expect(jsonData.seismicmeta_guid).not.equal(null);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{imptoken}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"gtags\": [\r\n        \"tagA\"\r\n    ],\r\n    \"seismicmeta\": {\r\n        \"data\": {\r\n            \"additionalMetaData\": [\r\n                {\r\n                    \"name\": \"SOURCE BARCODE\",\r\n                    \"value\": 3843967263,\r\n                    \"valueAsString\": \"3843967263\"\r\n                },\r\n                {\r\n                    \"name\": \"ORIGINAL FILE NAME\",\r\n                    \"value\": \"1_67_Srv3D_1_8_Original.sgy\",\r\n                    \"valueAsString\": \"1_67_Srv3D_1_8_Original.sgy\"\r\n                },\r\n                {\r\n                    \"name\": \"BIN SPACING\",\r\n                    \"value\": 90,\r\n                    \"valueAsString\": \"90\"\r\n                }\r\n            ],\r\n            \"binGridOperation\": {\r\n                \"binGridOriginEasting\": 1276435.2,\r\n                \"binGridOriginI\": 1,\r\n                \"binGridOriginJ\": 1,\r\n                \"binGridOriginNorthing\": 242030.61,\r\n                \"binGridScaleFactor\": 1,\r\n                \"binNodeIncrementI\": 1,\r\n                \"binNodeIncrementJ\": 1,\r\n                \"binWidthI\": 83.39992,\r\n                \"binWidthJ\": 91.77242,\r\n                \"crsKey\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                \"mapGridBearingJ\": 206.58368,\r\n                \"persistableReferenceCrs\": {\r\n                    \"lateBoundCRS\": {\r\n                        \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"26782\"\r\n                        },\r\n                        \"type\": \"LBC\"\r\n                    },\r\n                    \"singleCT\": {\r\n                        \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"15851\"\r\n                        },\r\n                        \"type\": \"ST\"\r\n                    },\r\n                    \"ver\": \"PE_10_3_1\",\r\n                    \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                    \"authCode\": {\r\n                        \"auth\": \"SLB\",\r\n                        \"code\": \"26782079\"\r\n                    },\r\n                    \"type\": \"EBC\"\r\n                },\r\n                \"transformationMethodNumber\": 1049,\r\n                \"unitKeyBearing\": \"dega\"\r\n            },\r\n            \"binNodePositions\": [\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        1276435.2,\r\n                                        242030.61\r\n                                    ],\r\n                                    [\r\n                                        1281357.8,\r\n                                        239567.36\r\n                                    ],\r\n                                    [\r\n                                        1280002.5,\r\n                                        236859.05\r\n                                    ],\r\n                                    [\r\n                                        1275080,\r\n                                        239322.28\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsMultiPoint\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ]\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"26782\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"26782079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                },\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        -93.60371,\r\n                                        29.312513\r\n                                    ],\r\n                                    [\r\n                                        -93.58811,\r\n                                        29.306007\r\n                                    ],\r\n                                    [\r\n                                        -93.59219,\r\n                                        29.298489\r\n                                    ],\r\n                                    [\r\n                                        -93.60779,\r\n                                        29.304993\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsMultiPoint\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ]\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433],AUTHORITY[\\\"EPSG\\\",4267]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"GCS_North_American_1927\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"4267\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus [4267,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"4267079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                },\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        -93.60387,\r\n                                        29.312752\r\n                                    ],\r\n                                    [\r\n                                        -93.58827,\r\n                                        29.306248\r\n                                    ],\r\n                                    [\r\n                                        -93.592354,\r\n                                        29.298727\r\n                                    ],\r\n                                    [\r\n                                        -93.60795,\r\n                                        29.305231\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsMultiPoint\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ]\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"wkt\": \"GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433],AUTHORITY[\\\"EPSG\\\",4326]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"GCS_WGS_1984\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"4326\"\r\n                        },\r\n                        \"type\": \"LBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                }\r\n            ],\r\n            \"classification\": \"Post-stack, time-migrated\",\r\n            \"dateCreated\": \"2013-03-22T11:16:03Z\",\r\n            \"dateModified\": \"2013-03-22T11:16:03Z\",\r\n            \"derivedBulk\": [\r\n                {\r\n                    \"size\": 1223488818,\r\n                    \"type\": \"ZGY\",\r\n                    \"url\": \"sd://SNTC/colors/test.zgy\"\r\n                },\r\n                {\r\n                    \"size\": 2653649950,\r\n                    \"type\": \"DIO\",\r\n                    \"url\": \"sd://SNTC/colors/test.DIO\"\r\n                }\r\n            ],\r\n            \"description\": \"A comment or a remark.\",\r\n            \"elevationReferenceTime\": {\r\n                \"elevationFromMsl\": {\r\n                    \"unitKey\": \"ft\",\r\n                    \"value\": 0\r\n                },\r\n                \"name\": \"SRD\",\r\n                \"replacementVelocity\": {\r\n                    \"unitKey\": \"ft/s\",\r\n                    \"value\": 4800\r\n                }\r\n            },\r\n            \"externalIds\": [\r\n                \"Petrel:tenant1/ProjectLouisiana/3491763/a9b46fc4-1840-450a-ac01-d15bdaa086ba:aef0e55c-4fcb-4546-a7a2-9df8f27277a1\"\r\n            ],\r\n            \"locationAtIndexZero\": {\r\n                \"features\": [\r\n                    {\r\n                        \"geometry\": {\r\n                            \"coordinates\": [\r\n                                1276435.2,\r\n                                242030.61,\r\n                                -1234\r\n                            ],\r\n                            \"type\": \"AnyCrsPoint\"\r\n                        },\r\n                        \"type\": \"AnyCrsFeature\"\r\n                    }\r\n                ],\r\n                \"persistableReferenceCrs\": {\r\n                    \"lateBoundCRS\": {\r\n                        \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"26782\"\r\n                        },\r\n                        \"type\": \"LBC\"\r\n                    },\r\n                    \"singleCT\": {\r\n                        \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"15851\"\r\n                        },\r\n                        \"type\": \"ST\"\r\n                    },\r\n                    \"ver\": \"PE_10_3_1\",\r\n                    \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                    \"authCode\": {\r\n                        \"auth\": \"SLB\",\r\n                        \"code\": \"26782079\"\r\n                    },\r\n                    \"type\": \"EBC\"\r\n                },\r\n                \"persistableReferenceUnitZ\": {\r\n                    \"scaleOffset\": {\r\n                        \"scale\": 0.001,\r\n                        \"offset\": 0\r\n                    },\r\n                    \"symbol\": \"ms\",\r\n                    \"baseMeasurement\": {\r\n                        \"ancestry\": \"Time\",\r\n                        \"type\": \"UM\"\r\n                    },\r\n                    \"type\": \"USO\"\r\n                },\r\n                \"type\": \"AnyCrsFeatureCollection\"\r\n            },\r\n            \"locationWGS84\": {\r\n                \"features\": [\r\n                    {\r\n                        \"geometry\": {\r\n                            \"coordinates\": [\r\n                                [\r\n                                    [\r\n                                        -93.60387,\r\n                                        29.312752\r\n                                    ],\r\n                                    [\r\n                                        -93.58827,\r\n                                        29.306248\r\n                                    ],\r\n                                    [\r\n                                        -93.592354,\r\n                                        29.298727\r\n                                    ],\r\n                                    [\r\n                                        -93.60795,\r\n                                        29.305231\r\n                                    ],\r\n                                    [\r\n                                        -93.60387,\r\n                                        29.312752\r\n                                    ]\r\n                                ]\r\n                            ],\r\n                            \"type\": \"Polygon\"\r\n                        },\r\n                        \"properties\": {\r\n                            \"name\": \"Survey 4 INLINE_1_67_Srv3D_1_8_Original\"\r\n                        },\r\n                        \"type\": \"Feature\"\r\n                    }\r\n                ],\r\n                \"type\": \"FeatureCollection\"\r\n            },\r\n            \"name\": \"Survey 4 INLINE_1_67_Srv3D_1_8_Original\",\r\n            \"originalBulk\": {\r\n                \"size\": 2873437400,\r\n                \"type\": \"SEGY\",\r\n                \"url\": \"sd://SNTC/colors/test.segy\"\r\n            },\r\n            \"perimeters\": [\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        [\r\n                                            1276435.2,\r\n                                            242030.61\r\n                                        ],\r\n                                        [\r\n                                            1281357.8,\r\n                                            239567.36\r\n                                        ],\r\n                                        [\r\n                                            1280002.5,\r\n                                            236859.05\r\n                                        ],\r\n                                        [\r\n                                            1275080,\r\n                                            239322.28\r\n                                        ],\r\n                                        [\r\n                                            1276435.2,\r\n                                            242030.61\r\n                                        ]\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsPolygon\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ],\r\n                                \"perimeterType\": \"Full Fold Coverage\"\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"26782\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"26782079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                },\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        [\r\n                                            -93.60371,\r\n                                            29.312513\r\n                                        ],\r\n                                        [\r\n                                            -93.58811,\r\n                                            29.306007\r\n                                        ],\r\n                                        [\r\n                                            -93.59219,\r\n                                            29.298489\r\n                                        ],\r\n                                        [\r\n                                            -93.60779,\r\n                                            29.304993\r\n                                        ],\r\n                                        [\r\n                                            -93.60371,\r\n                                            29.312513\r\n                                        ]\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsPolygon\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ],\r\n                                \"perimeterType\": \"Full Fold Coverage\"\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433],AUTHORITY[\\\"EPSG\\\",4267]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"GCS_North_American_1927\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"4267\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus [4267,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"4267079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                }\r\n            ],\r\n            \"rangeAmplitudeMax\": {\r\n                \"unitKey\": \"amplitude\",\r\n                \"value\": 232467.8\r\n            },\r\n            \"rangeAmplitudeMin\": {\r\n                \"unitKey\": \"amplitude\",\r\n                \"value\": -226153.4\r\n            },\r\n            \"rangeCrosslineIncrement\": 1,\r\n            \"rangeCrosslineStart\": 1,\r\n            \"rangeCrosslineStop\": 34,\r\n            \"rangeInlineIncrement\": 1,\r\n            \"rangeInlineStart\": 1,\r\n            \"rangeInlineStop\": 67,\r\n            \"relationships\": {\r\n                \"binGrid\": {\r\n                    \"id\": \"slb:wke:binGrid-5067af51fe6542968ce8868c01af6cb7\"\r\n                },\r\n                \"seismicSurvey\": {\r\n                    \"id\": \"slb:wke:seismicSurvey3d-62d8fe58-c044-537a-b354-7f3f8e860421\",\r\n                    \"name\": \"ST2013-L\"\r\n                },\r\n                \"usesAssociations\": true\r\n            },\r\n            \"seismicProperty\": \"Instantaneous Amplitude\",\r\n            \"stackAngleRangeMax\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": 10\r\n            },\r\n            \"stackAngleRangeMin\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": 0\r\n            },\r\n            \"stackAzimuthRangeMax\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": 20\r\n            },\r\n            \"stackAzimuthRangeMin\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": -20\r\n            },\r\n            \"stackOffsetRangeMax\": {\r\n                \"unitKey\": \"ftUS\",\r\n                \"value\": 3000\r\n            },\r\n            \"stackOffsetRangeMin\": {\r\n                \"unitKey\": \"ftUS\",\r\n                \"value\": 0\r\n            },\r\n            \"stackSubType\": \"Full\",\r\n            \"stackType\": \"Full\",\r\n            \"storageType\": \"32-BIT\",\r\n            \"textualFileHeader\": [\r\n                \"C 1 CLIENT COMPANY CREW NO                                                      C 2 LINE line1dS AREA MAP ID                                                    C 3 REEL NO DAY-START OF REEL YEAR OBSERVER                                     C 4 INSTRUMENT: DELPH MODEL xx SERIAL NO                                        C 5 DATA TRACES/RECORD 1 AUXILIARY TRACES/RECORD 0 CDP FOLD                     C 6 SAMPLE INTERVAL 333 SAMPLES/TRACE 1496 BITS/IN 16 BYTES/SAMPLE 2            C 7 RECORDING FORMAT FORMAT THIS REEL MEASUREMENT SYSTEM                        C 8 SAMPLE CODE: FIXED PT                                                       C 9 GAIN TYPE: FIXED                                                            C10 FILTERS: ALIAS 1500HZ NOTCH HZ BAND - HZ SLOPE - DB/OCT                     C11 SOURCE: TYPE NUMBER/POINT POINT INTERVAL                                    C12 PATTERN: LENGTH WIDTH                                                       C13 SWEEP: START HZ END HZ LENGTH MS CHANEL NO TYPE                             C14 TAPER: START LENGTH MS END LENGTH MS TYPE                                   C15 SPREAD: OFFSET MAX DISTANCE GROUP INTERVAL                                  C16 GEOPHONES: PER GROUP SPACING FREQUENCY MFG MODEL                            C17 PATTERN: LENGTH WIDTH                                                       C18 TRACES SORTED BY: RECORD                                                    C19 AMPLITUDE RECOVERY: NONE                                                    C20 MAP PROJECTION ZONE ID COORDINATE UNITS                                     C21 PROCESSING:                                                                 C22 PROCESSING:                                                                 C23                                                                             C24                                                                             C25                                                                             C26                                                                             C27                                                                             C28                                                                             C29                                                                             C30                                                                             C31                                                                             C32                                                                             C33                                                                             C34                                                                             C35                                                                             C36                                                                             C37                                                                             C38                                                                             C39                                                                             C40 END EBCDIC                                                                  \"\r\n            ],\r\n            \"verticalDomain\": \"Elevation time (two-way travel time)\",\r\n            \"verticalIncrement\": {\r\n                \"unitKey\": \"ms\",\r\n                \"value\": -4\r\n            },\r\n            \"verticalSampleCount\": 1000,\r\n            \"verticalStart\": {\r\n                \"unitKey\": \"ms\",\r\n                \"value\": 0\r\n            },\r\n            \"verticalStop\": {\r\n                \"unitKey\": \"ms\",\r\n                \"value\": -3996\r\n            },\r\n            \"vintage\": \"ST2013-InstantaneousAmplitude\",\r\n            \"waveType\": \"PP\"\r\n        },\r\n        \"kind\": \"{{datapartition}}:wks:seismic3d:1.0.5\",\r\n        \"legal\": {\r\n            \"legaltags\": [\r\n                \"{{legaltag01}}\"\r\n            ],\r\n            \"otherRelevantDataCountries\": [\r\n                \"US\",\r\n                \"BE\",\r\n                \"NO\",\r\n                \"IN\"\r\n            ]\r\n        },\r\n        \"version\": 1040891613125385\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET CLOSE IMPTOKEN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded}}&close={{sbit}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								},
								{
									"key": "close",
									"value": "{{sbit}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "IMPTOKEN REFRESH",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check refreshed imptoken\", function () {",
									"        pm.expect(jsonData.impersonation_token).not.to.eql(pm.environment.get(\"imptoken\"));",
									"        pm.expect(jsonData.expires_in).to.eql(3600);",
									"        pm.expect(jsonData.token_type).to.eql('Bearer');",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"token\": \"{{imptoken}}\"\r\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/imptoken",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"imptoken"
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET REGISTER 02",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check content type\", function () {",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"    });",
									"",
									"    pm.test(\"Dataset name\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get('dsx02'));",
									"    });",
									"",
									"    pm.test(\"tenant\", function () {",
									"        pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"    });",
									"",
									"    pm.test(\"subproject\", function () {",
									"        pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"    });",
									"",
									"    pm.test(\"path\", function () {",
									"        pm.expect(jsonData.path).to.eql(pm.environment.get('testPath'));",
									"    });",
									"",
									"    pm.test(\"ltag\", function () {",
									"        pm.expect(jsonData.ltag).to.eql(pm.environment.get('legaltag01'));",
									"    });",
									"",
									"    pm.test(\"Dates are present\", function () {",
									"        pm.expect(jsonData.created_date).to.exist;",
									"        pm.expect(jsonData.last_modified_date).to.exist;",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(1);",
									"        postman.setEnvironmentVariable(\"sbit\", jsonData.sbit);",
									"    });",
									"",
									"    pm.test(\"Check gtag\", function () {",
									"        pm.expect(jsonData.gtags.length).to.eql(1);",
									"        pm.expect(jsonData.gtags[0]).to.eql(\"tagA\");",
									"    });",
									"",
									"    pm.test(\"Check seismicmetadata\", () => {",
									"        pm.expect(jsonData.seismicmeta_guid).not.equal(null);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{imptoken}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"gtags\": [\r\n        \"tagA\"\r\n    ],\r\n    \"seismicmeta\": {\r\n        \"data\": {\r\n            \"additionalMetaData\": [\r\n                {\r\n                    \"name\": \"SOURCE BARCODE\",\r\n                    \"value\": 3843967263,\r\n                    \"valueAsString\": \"3843967263\"\r\n                },\r\n                {\r\n                    \"name\": \"ORIGINAL FILE NAME\",\r\n                    \"value\": \"1_67_Srv3D_1_8_Original.sgy\",\r\n                    \"valueAsString\": \"1_67_Srv3D_1_8_Original.sgy\"\r\n                },\r\n                {\r\n                    \"name\": \"BIN SPACING\",\r\n                    \"value\": 90,\r\n                    \"valueAsString\": \"90\"\r\n                }\r\n            ],\r\n            \"binGridOperation\": {\r\n                \"binGridOriginEasting\": 1276435.2,\r\n                \"binGridOriginI\": 1,\r\n                \"binGridOriginJ\": 1,\r\n                \"binGridOriginNorthing\": 242030.61,\r\n                \"binGridScaleFactor\": 1,\r\n                \"binNodeIncrementI\": 1,\r\n                \"binNodeIncrementJ\": 1,\r\n                \"binWidthI\": 83.39992,\r\n                \"binWidthJ\": 91.77242,\r\n                \"crsKey\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                \"mapGridBearingJ\": 206.58368,\r\n                \"persistableReferenceCrs\": {\r\n                    \"lateBoundCRS\": {\r\n                        \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"26782\"\r\n                        },\r\n                        \"type\": \"LBC\"\r\n                    },\r\n                    \"singleCT\": {\r\n                        \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"15851\"\r\n                        },\r\n                        \"type\": \"ST\"\r\n                    },\r\n                    \"ver\": \"PE_10_3_1\",\r\n                    \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                    \"authCode\": {\r\n                        \"auth\": \"SLB\",\r\n                        \"code\": \"26782079\"\r\n                    },\r\n                    \"type\": \"EBC\"\r\n                },\r\n                \"transformationMethodNumber\": 1049,\r\n                \"unitKeyBearing\": \"dega\"\r\n            },\r\n            \"binNodePositions\": [\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        1276435.2,\r\n                                        242030.61\r\n                                    ],\r\n                                    [\r\n                                        1281357.8,\r\n                                        239567.36\r\n                                    ],\r\n                                    [\r\n                                        1280002.5,\r\n                                        236859.05\r\n                                    ],\r\n                                    [\r\n                                        1275080,\r\n                                        239322.28\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsMultiPoint\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ]\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"26782\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"26782079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                },\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        -93.60371,\r\n                                        29.312513\r\n                                    ],\r\n                                    [\r\n                                        -93.58811,\r\n                                        29.306007\r\n                                    ],\r\n                                    [\r\n                                        -93.59219,\r\n                                        29.298489\r\n                                    ],\r\n                                    [\r\n                                        -93.60779,\r\n                                        29.304993\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsMultiPoint\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ]\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433],AUTHORITY[\\\"EPSG\\\",4267]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"GCS_North_American_1927\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"4267\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus [4267,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"4267079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                },\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        -93.60387,\r\n                                        29.312752\r\n                                    ],\r\n                                    [\r\n                                        -93.58827,\r\n                                        29.306248\r\n                                    ],\r\n                                    [\r\n                                        -93.592354,\r\n                                        29.298727\r\n                                    ],\r\n                                    [\r\n                                        -93.60795,\r\n                                        29.305231\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsMultiPoint\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ]\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"wkt\": \"GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433],AUTHORITY[\\\"EPSG\\\",4326]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"GCS_WGS_1984\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"4326\"\r\n                        },\r\n                        \"type\": \"LBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                }\r\n            ],\r\n            \"classification\": \"Post-stack, time-migrated\",\r\n            \"dateCreated\": \"2013-03-22T11:16:03Z\",\r\n            \"dateModified\": \"2013-03-22T11:16:03Z\",\r\n            \"derivedBulk\": [\r\n                {\r\n                    \"size\": 1223488818,\r\n                    \"type\": \"ZGY\",\r\n                    \"url\": \"sd://SNTC/colors/test.zgy\"\r\n                },\r\n                {\r\n                    \"size\": 2653649950,\r\n                    \"type\": \"DIO\",\r\n                    \"url\": \"sd://SNTC/colors/test.DIO\"\r\n                }\r\n            ],\r\n            \"description\": \"A comment or a remark.\",\r\n            \"elevationReferenceTime\": {\r\n                \"elevationFromMsl\": {\r\n                    \"unitKey\": \"ft\",\r\n                    \"value\": 0\r\n                },\r\n                \"name\": \"SRD\",\r\n                \"replacementVelocity\": {\r\n                    \"unitKey\": \"ft/s\",\r\n                    \"value\": 4800\r\n                }\r\n            },\r\n            \"externalIds\": [\r\n                \"Petrel:tenant1/ProjectLouisiana/3491763/a9b46fc4-1840-450a-ac01-d15bdaa086ba:aef0e55c-4fcb-4546-a7a2-9df8f27277a1\"\r\n            ],\r\n            \"locationAtIndexZero\": {\r\n                \"features\": [\r\n                    {\r\n                        \"geometry\": {\r\n                            \"coordinates\": [\r\n                                1276435.2,\r\n                                242030.61,\r\n                                -1234\r\n                            ],\r\n                            \"type\": \"AnyCrsPoint\"\r\n                        },\r\n                        \"type\": \"AnyCrsFeature\"\r\n                    }\r\n                ],\r\n                \"persistableReferenceCrs\": {\r\n                    \"lateBoundCRS\": {\r\n                        \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"26782\"\r\n                        },\r\n                        \"type\": \"LBC\"\r\n                    },\r\n                    \"singleCT\": {\r\n                        \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"15851\"\r\n                        },\r\n                        \"type\": \"ST\"\r\n                    },\r\n                    \"ver\": \"PE_10_3_1\",\r\n                    \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                    \"authCode\": {\r\n                        \"auth\": \"SLB\",\r\n                        \"code\": \"26782079\"\r\n                    },\r\n                    \"type\": \"EBC\"\r\n                },\r\n                \"persistableReferenceUnitZ\": {\r\n                    \"scaleOffset\": {\r\n                        \"scale\": 0.001,\r\n                        \"offset\": 0\r\n                    },\r\n                    \"symbol\": \"ms\",\r\n                    \"baseMeasurement\": {\r\n                        \"ancestry\": \"Time\",\r\n                        \"type\": \"UM\"\r\n                    },\r\n                    \"type\": \"USO\"\r\n                },\r\n                \"type\": \"AnyCrsFeatureCollection\"\r\n            },\r\n            \"locationWGS84\": {\r\n                \"features\": [\r\n                    {\r\n                        \"geometry\": {\r\n                            \"coordinates\": [\r\n                                [\r\n                                    [\r\n                                        -93.60387,\r\n                                        29.312752\r\n                                    ],\r\n                                    [\r\n                                        -93.58827,\r\n                                        29.306248\r\n                                    ],\r\n                                    [\r\n                                        -93.592354,\r\n                                        29.298727\r\n                                    ],\r\n                                    [\r\n                                        -93.60795,\r\n                                        29.305231\r\n                                    ],\r\n                                    [\r\n                                        -93.60387,\r\n                                        29.312752\r\n                                    ]\r\n                                ]\r\n                            ],\r\n                            \"type\": \"Polygon\"\r\n                        },\r\n                        \"properties\": {\r\n                            \"name\": \"Survey 4 INLINE_1_67_Srv3D_1_8_Original\"\r\n                        },\r\n                        \"type\": \"Feature\"\r\n                    }\r\n                ],\r\n                \"type\": \"FeatureCollection\"\r\n            },\r\n            \"name\": \"Survey 4 INLINE_1_67_Srv3D_1_8_Original\",\r\n            \"originalBulk\": {\r\n                \"size\": 2873437400,\r\n                \"type\": \"SEGY\",\r\n                \"url\": \"sd://SNTC/colors/test.segy\"\r\n            },\r\n            \"perimeters\": [\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        [\r\n                                            1276435.2,\r\n                                            242030.61\r\n                                        ],\r\n                                        [\r\n                                            1281357.8,\r\n                                            239567.36\r\n                                        ],\r\n                                        [\r\n                                            1280002.5,\r\n                                            236859.05\r\n                                        ],\r\n                                        [\r\n                                            1275080,\r\n                                            239322.28\r\n                                        ],\r\n                                        [\r\n                                            1276435.2,\r\n                                            242030.61\r\n                                        ]\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsPolygon\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ],\r\n                                \"perimeterType\": \"Full Fold Coverage\"\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"26782\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"26782079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                },\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        [\r\n                                            -93.60371,\r\n                                            29.312513\r\n                                        ],\r\n                                        [\r\n                                            -93.58811,\r\n                                            29.306007\r\n                                        ],\r\n                                        [\r\n                                            -93.59219,\r\n                                            29.298489\r\n                                        ],\r\n                                        [\r\n                                            -93.60779,\r\n                                            29.304993\r\n                                        ],\r\n                                        [\r\n                                            -93.60371,\r\n                                            29.312513\r\n                                        ]\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsPolygon\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ],\r\n                                \"perimeterType\": \"Full Fold Coverage\"\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433],AUTHORITY[\\\"EPSG\\\",4267]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"GCS_North_American_1927\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"4267\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus [4267,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"4267079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                }\r\n            ],\r\n            \"rangeAmplitudeMax\": {\r\n                \"unitKey\": \"amplitude\",\r\n                \"value\": 232467.8\r\n            },\r\n            \"rangeAmplitudeMin\": {\r\n                \"unitKey\": \"amplitude\",\r\n                \"value\": -226153.4\r\n            },\r\n            \"rangeCrosslineIncrement\": 1,\r\n            \"rangeCrosslineStart\": 1,\r\n            \"rangeCrosslineStop\": 34,\r\n            \"rangeInlineIncrement\": 1,\r\n            \"rangeInlineStart\": 1,\r\n            \"rangeInlineStop\": 67,\r\n            \"relationships\": {\r\n                \"binGrid\": {\r\n                    \"id\": \"slb:wke:binGrid-5067af51fe6542968ce8868c01af6cb7\"\r\n                },\r\n                \"seismicSurvey\": {\r\n                    \"id\": \"slb:wke:seismicSurvey3d-62d8fe58-c044-537a-b354-7f3f8e860421\",\r\n                    \"name\": \"ST2013-L\"\r\n                },\r\n                \"usesAssociations\": true\r\n            },\r\n            \"seismicProperty\": \"Instantaneous Amplitude\",\r\n            \"stackAngleRangeMax\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": 10\r\n            },\r\n            \"stackAngleRangeMin\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": 0\r\n            },\r\n            \"stackAzimuthRangeMax\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": 20\r\n            },\r\n            \"stackAzimuthRangeMin\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": -20\r\n            },\r\n            \"stackOffsetRangeMax\": {\r\n                \"unitKey\": \"ftUS\",\r\n                \"value\": 3000\r\n            },\r\n            \"stackOffsetRangeMin\": {\r\n                \"unitKey\": \"ftUS\",\r\n                \"value\": 0\r\n            },\r\n            \"stackSubType\": \"Full\",\r\n            \"stackType\": \"Full\",\r\n            \"storageType\": \"32-BIT\",\r\n            \"textualFileHeader\": [\r\n                \"C 1 CLIENT COMPANY CREW NO                                                      C 2 LINE line1dS AREA MAP ID                                                    C 3 REEL NO DAY-START OF REEL YEAR OBSERVER                                     C 4 INSTRUMENT: DELPH MODEL xx SERIAL NO                                        C 5 DATA TRACES/RECORD 1 AUXILIARY TRACES/RECORD 0 CDP FOLD                     C 6 SAMPLE INTERVAL 333 SAMPLES/TRACE 1496 BITS/IN 16 BYTES/SAMPLE 2            C 7 RECORDING FORMAT FORMAT THIS REEL MEASUREMENT SYSTEM                        C 8 SAMPLE CODE: FIXED PT                                                       C 9 GAIN TYPE: FIXED                                                            C10 FILTERS: ALIAS 1500HZ NOTCH HZ BAND - HZ SLOPE - DB/OCT                     C11 SOURCE: TYPE NUMBER/POINT POINT INTERVAL                                    C12 PATTERN: LENGTH WIDTH                                                       C13 SWEEP: START HZ END HZ LENGTH MS CHANEL NO TYPE                             C14 TAPER: START LENGTH MS END LENGTH MS TYPE                                   C15 SPREAD: OFFSET MAX DISTANCE GROUP INTERVAL                                  C16 GEOPHONES: PER GROUP SPACING FREQUENCY MFG MODEL                            C17 PATTERN: LENGTH WIDTH                                                       C18 TRACES SORTED BY: RECORD                                                    C19 AMPLITUDE RECOVERY: NONE                                                    C20 MAP PROJECTION ZONE ID COORDINATE UNITS                                     C21 PROCESSING:                                                                 C22 PROCESSING:                                                                 C23                                                                             C24                                                                             C25                                                                             C26                                                                             C27                                                                             C28                                                                             C29                                                                             C30                                                                             C31                                                                             C32                                                                             C33                                                                             C34                                                                             C35                                                                             C36                                                                             C37                                                                             C38                                                                             C39                                                                             C40 END EBCDIC                                                                  \"\r\n            ],\r\n            \"verticalDomain\": \"Elevation time (two-way travel time)\",\r\n            \"verticalIncrement\": {\r\n                \"unitKey\": \"ms\",\r\n                \"value\": -4\r\n            },\r\n            \"verticalSampleCount\": 1000,\r\n            \"verticalStart\": {\r\n                \"unitKey\": \"ms\",\r\n                \"value\": 0\r\n            },\r\n            \"verticalStop\": {\r\n                \"unitKey\": \"ms\",\r\n                \"value\": -3996\r\n            },\r\n            \"vintage\": \"ST2013-InstantaneousAmplitude\",\r\n            \"waveType\": \"PP\"\r\n        },\r\n        \"kind\": \"{{datapartition}}:wks:seismic3d:1.0.5\",\r\n        \"legal\": {\r\n            \"legaltags\": [\r\n                \"{{legaltag01}}\"\r\n            ],\r\n            \"otherRelevantDataCountries\": [\r\n                \"US\",\r\n                \"BE\",\r\n                \"NO\",\r\n                \"IN\"\r\n            ]\r\n        },\r\n        \"version\": 1040891613125385\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx02}}?path={{testPathEncoded}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx02}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET CLOSE IMPTOKEN 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx02}}?path={{testPathEncoded}}&close={{sbit}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx02}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								},
								{
									"key": "close",
									"value": "{{sbit}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "IMPTOKEN PATCH",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check patch imptoken\", function () {",
									"        postman.setEnvironmentVariable(\"imptoken_patch\", jsonData.impersonation_token);",
									"        pm.expect(jsonData.expires_in).to.eql(3600);",
									"        pm.expect(jsonData.token_type).to.eql('Bearer');",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"token\": \"{{imptoken}}\",\r\n  \"refresh-url\": \"https://google.com/c24c1ccrfacaerfafgw54tg2gg25g2\"\r\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/imptoken",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"imptoken"
							]
						}
					},
					"response": []
				},
				{
					"name": "IMPTOKEN PATCH REFRESH",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 400) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Refresh patch imptoken\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"The impersonation token cannot be refreshed\");",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"token\": \"{{imptoken_patch}}\"\r\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/imptoken",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"imptoken"
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET DELETE IMPTOKEN 01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPath}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPath}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET DELETE IMPTOKEN 02",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPath}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPath}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "STATUS UNSET IMPTOKEN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.unset('dsx01')",
									"pm.environment.unset('dsx02')",
									"pm.environment.unset('testPath')",
									"pm.environment.unset('testPathEncoded')",
									"pm.environment.unset('imptoken')",
									"pm.environment.unset('imptoken_patch')",
									"pm.environment.unset('sbit')",
									"postman.setEnvironmentVariable('execCounter', 1);",
									"",
									"console.log('Dataset variables were removed for imptoken folder');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/svcstatus",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"svcstatus"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CP Command",
			"item": [
				{
					"name": "CP STATUS SET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.setEnvironmentVariable('execCounter', 1);",
									"",
									"console.log('Dataset variables are initialized for CP Command folder');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function makeID_cp(length) {\r",
									"   var result           = '';\r",
									"   var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"   var charactersLength = characters.length;\r",
									"   for ( var i = 0; i < length; i++ ) {\r",
									"      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"   }\r",
									"   return result;\r",
									"}\r",
									"\r",
									"postman.setEnvironmentVariable(\"dsx01\", makeID_cp(16));\r",
									"\r",
									"var path01 = \"/\" + makeID_cp(8) + \"/\" + makeID_cp(4) + \"/\" + makeID_cp(3) + \"/\" \r",
									"postman.setEnvironmentVariable(\"testPath01\", path01);\r",
									"postman.setEnvironmentVariable(\"testPathEncoded01\", encodeURIComponent(path01));\r",
									"\r",
									"postman.setEnvironmentVariable(\"dsx02\", makeID_cp(16));\r",
									"\r",
									"var path02 = \"/\" + makeID_cp(8) + \"/\" + makeID_cp(4) + \"/\" + makeID_cp(3) + \"/\"\r",
									"postman.setEnvironmentVariable(\"testPath02\", path02);\r",
									"postman.setEnvironmentVariable(\"testPathEncoded02\", encodeURIComponent(path02));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/svcstatus",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"svcstatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET REGISTER X1 + SeimicMeta",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Dataset name\", function () {",
									"        pm.expect(jsonData.ltag).not.to.eql(null);",
									"        postman.setEnvironmentVariable(\"ltag\", jsonData.ltag);",
									"    });",
									"",
									"    pm.test(\"Dataset name\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get('dsx01'));",
									"    });",
									"",
									"    pm.test(\"path\", function () {",
									"        pm.expect(jsonData.path).to.eql(pm.environment.get('testPath01'))",
									"    });",
									"",
									"    pm.test(\"Get gcsurl\", function () {",
									"        pm.expect(jsonData.gcsurl).not.to.eql(null);",
									"        postman.setEnvironmentVariable(\"gcsurl\", jsonData.gcsurl);",
									"        postman.setEnvironmentVariable(\"gcsBucketName\", jsonData.gcsurl.split('/')[0]);",
									"        postman.setEnvironmentVariable(\"gcsObjectPrefix\", jsonData.gcsurl.split('/')[1]);",
									"    });",
									"",
									"    pm.test(\"sbit\", function () {",
									"        pm.expect(jsonData.sbit).not.to.eql(null);",
									"        postman.setEnvironmentVariable(\"sbit\", jsonData.sbit);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"seismicmeta\": {\r\n        \"data\": {\r\n            \"additionalMetaData\": [\r\n                {\r\n                    \"name\": \"SOURCE BARCODE\",\r\n                    \"value\": 3843967263,\r\n                    \"valueAsString\": \"3843967263\"\r\n                },\r\n                {\r\n                    \"name\": \"ORIGINAL FILE NAME\",\r\n                    \"value\": \"1_67_Srv3D_1_8_Original.sgy\",\r\n                    \"valueAsString\": \"1_67_Srv3D_1_8_Original.sgy\"\r\n                },\r\n                {\r\n                    \"name\": \"BIN SPACING\",\r\n                    \"value\": 90,\r\n                    \"valueAsString\": \"90\"\r\n                }\r\n            ],\r\n            \"binGridOperation\": {\r\n                \"binGridOriginEasting\": 1276435.2,\r\n                \"binGridOriginI\": 1,\r\n                \"binGridOriginJ\": 1,\r\n                \"binGridOriginNorthing\": 242030.61,\r\n                \"binGridScaleFactor\": 1,\r\n                \"binNodeIncrementI\": 1,\r\n                \"binNodeIncrementJ\": 1,\r\n                \"binWidthI\": 83.39992,\r\n                \"binWidthJ\": 91.77242,\r\n                \"crsKey\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                \"mapGridBearingJ\": 206.58368,\r\n                \"persistableReferenceCrs\": {\r\n                    \"lateBoundCRS\": {\r\n                        \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"26782\"\r\n                        },\r\n                        \"type\": \"LBC\"\r\n                    },\r\n                    \"singleCT\": {\r\n                        \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"15851\"\r\n                        },\r\n                        \"type\": \"ST\"\r\n                    },\r\n                    \"ver\": \"PE_10_3_1\",\r\n                    \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                    \"authCode\": {\r\n                        \"auth\": \"SLB\",\r\n                        \"code\": \"26782079\"\r\n                    },\r\n                    \"type\": \"EBC\"\r\n                },\r\n                \"transformationMethodNumber\": 1049,\r\n                \"unitKeyBearing\": \"dega\"\r\n            },\r\n            \"binNodePositions\": [\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        1276435.2,\r\n                                        242030.61\r\n                                    ],\r\n                                    [\r\n                                        1281357.8,\r\n                                        239567.36\r\n                                    ],\r\n                                    [\r\n                                        1280002.5,\r\n                                        236859.05\r\n                                    ],\r\n                                    [\r\n                                        1275080,\r\n                                        239322.28\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsMultiPoint\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ]\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"26782\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"26782079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                },\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        -93.60371,\r\n                                        29.312513\r\n                                    ],\r\n                                    [\r\n                                        -93.58811,\r\n                                        29.306007\r\n                                    ],\r\n                                    [\r\n                                        -93.59219,\r\n                                        29.298489\r\n                                    ],\r\n                                    [\r\n                                        -93.60779,\r\n                                        29.304993\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsMultiPoint\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ]\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433],AUTHORITY[\\\"EPSG\\\",4267]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"GCS_North_American_1927\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"4267\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus [4267,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"4267079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                },\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        -93.60387,\r\n                                        29.312752\r\n                                    ],\r\n                                    [\r\n                                        -93.58827,\r\n                                        29.306248\r\n                                    ],\r\n                                    [\r\n                                        -93.592354,\r\n                                        29.298727\r\n                                    ],\r\n                                    [\r\n                                        -93.60795,\r\n                                        29.305231\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsMultiPoint\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ]\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"wkt\": \"GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433],AUTHORITY[\\\"EPSG\\\",4326]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"GCS_WGS_1984\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"4326\"\r\n                        },\r\n                        \"type\": \"LBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                }\r\n            ],\r\n            \"classification\": \"Post-stack, time-migrated\",\r\n            \"dateCreated\": \"2013-03-22T11:16:03Z\",\r\n            \"dateModified\": \"2013-03-22T11:16:03Z\",\r\n            \"derivedBulk\": [\r\n                {\r\n                    \"size\": 1223488818,\r\n                    \"type\": \"ZGY\",\r\n                    \"url\": \"sd://SNTC/colors/test.zgy\"\r\n                },\r\n                {\r\n                    \"size\": 2653649950,\r\n                    \"type\": \"DIO\",\r\n                    \"url\": \"sd://SNTC/colors/test.DIO\"\r\n                }\r\n            ],\r\n            \"description\": \"A comment or a remark.\",\r\n            \"elevationReferenceTime\": {\r\n                \"elevationFromMsl\": {\r\n                    \"unitKey\": \"ft\",\r\n                    \"value\": 0\r\n                },\r\n                \"name\": \"SRD\",\r\n                \"replacementVelocity\": {\r\n                    \"unitKey\": \"ft/s\",\r\n                    \"value\": 4800\r\n                }\r\n            },\r\n            \"externalIds\": [\r\n                \"Petrel:tenant1/ProjectLouisiana/3491763/a9b46fc4-1840-450a-ac01-d15bdaa086ba:aef0e55c-4fcb-4546-a7a2-9df8f27277a1\"\r\n            ],\r\n            \"locationAtIndexZero\": {\r\n                \"features\": [\r\n                    {\r\n                        \"geometry\": {\r\n                            \"coordinates\": [\r\n                                1276435.2,\r\n                                242030.61,\r\n                                -1234\r\n                            ],\r\n                            \"type\": \"AnyCrsPoint\"\r\n                        },\r\n                        \"type\": \"AnyCrsFeature\"\r\n                    }\r\n                ],\r\n                \"persistableReferenceCrs\": {\r\n                    \"lateBoundCRS\": {\r\n                        \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"26782\"\r\n                        },\r\n                        \"type\": \"LBC\"\r\n                    },\r\n                    \"singleCT\": {\r\n                        \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"15851\"\r\n                        },\r\n                        \"type\": \"ST\"\r\n                    },\r\n                    \"ver\": \"PE_10_3_1\",\r\n                    \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                    \"authCode\": {\r\n                        \"auth\": \"SLB\",\r\n                        \"code\": \"26782079\"\r\n                    },\r\n                    \"type\": \"EBC\"\r\n                },\r\n                \"persistableReferenceUnitZ\": {\r\n                    \"scaleOffset\": {\r\n                        \"scale\": 0.001,\r\n                        \"offset\": 0\r\n                    },\r\n                    \"symbol\": \"ms\",\r\n                    \"baseMeasurement\": {\r\n                        \"ancestry\": \"Time\",\r\n                        \"type\": \"UM\"\r\n                    },\r\n                    \"type\": \"USO\"\r\n                },\r\n                \"type\": \"AnyCrsFeatureCollection\"\r\n            },\r\n            \"locationWGS84\": {\r\n                \"features\": [\r\n                    {\r\n                        \"geometry\": {\r\n                            \"coordinates\": [\r\n                                [\r\n                                    [\r\n                                        -93.60387,\r\n                                        29.312752\r\n                                    ],\r\n                                    [\r\n                                        -93.58827,\r\n                                        29.306248\r\n                                    ],\r\n                                    [\r\n                                        -93.592354,\r\n                                        29.298727\r\n                                    ],\r\n                                    [\r\n                                        -93.60795,\r\n                                        29.305231\r\n                                    ],\r\n                                    [\r\n                                        -93.60387,\r\n                                        29.312752\r\n                                    ]\r\n                                ]\r\n                            ],\r\n                            \"type\": \"Polygon\"\r\n                        },\r\n                        \"properties\": {\r\n                            \"name\": \"Survey 4 INLINE_1_67_Srv3D_1_8_Original\"\r\n                        },\r\n                        \"type\": \"Feature\"\r\n                    }\r\n                ],\r\n                \"type\": \"FeatureCollection\"\r\n            },\r\n            \"name\": \"Survey 4 INLINE_1_67_Srv3D_1_8_Original\",\r\n            \"originalBulk\": {\r\n                \"size\": 2873437400,\r\n                \"type\": \"SEGY\",\r\n                \"url\": \"sd://SNTC/colors/test.segy\"\r\n            },\r\n            \"perimeters\": [\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        [\r\n                                            1276435.2,\r\n                                            242030.61\r\n                                        ],\r\n                                        [\r\n                                            1281357.8,\r\n                                            239567.36\r\n                                        ],\r\n                                        [\r\n                                            1280002.5,\r\n                                            236859.05\r\n                                        ],\r\n                                        [\r\n                                            1275080,\r\n                                            239322.28\r\n                                        ],\r\n                                        [\r\n                                            1276435.2,\r\n                                            242030.61\r\n                                        ]\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsPolygon\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ],\r\n                                \"perimeterType\": \"Full Fold Coverage\"\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"26782\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"26782079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                },\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        [\r\n                                            -93.60371,\r\n                                            29.312513\r\n                                        ],\r\n                                        [\r\n                                            -93.58811,\r\n                                            29.306007\r\n                                        ],\r\n                                        [\r\n                                            -93.59219,\r\n                                            29.298489\r\n                                        ],\r\n                                        [\r\n                                            -93.60779,\r\n                                            29.304993\r\n                                        ],\r\n                                        [\r\n                                            -93.60371,\r\n                                            29.312513\r\n                                        ]\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsPolygon\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ],\r\n                                \"perimeterType\": \"Full Fold Coverage\"\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433],AUTHORITY[\\\"EPSG\\\",4267]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"GCS_North_American_1927\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"4267\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus [4267,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"4267079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                }\r\n            ],\r\n            \"rangeAmplitudeMax\": {\r\n                \"unitKey\": \"amplitude\",\r\n                \"value\": 232467.8\r\n            },\r\n            \"rangeAmplitudeMin\": {\r\n                \"unitKey\": \"amplitude\",\r\n                \"value\": -226153.4\r\n            },\r\n            \"rangeCrosslineIncrement\": 1,\r\n            \"rangeCrosslineStart\": 1,\r\n            \"rangeCrosslineStop\": 34,\r\n            \"rangeInlineIncrement\": 1,\r\n            \"rangeInlineStart\": 1,\r\n            \"rangeInlineStop\": 67,\r\n            \"relationships\": {\r\n                \"binGrid\": {\r\n                    \"id\": \"slb:wke:binGrid-5067af51fe6542968ce8868c01af6cb7\"\r\n                },\r\n                \"seismicSurvey\": {\r\n                    \"id\": \"slb:wke:seismicSurvey3d-62d8fe58-c044-537a-b354-7f3f8e860421\",\r\n                    \"name\": \"ST2013-L\"\r\n                },\r\n                \"usesAssociations\": true\r\n            },\r\n            \"seismicProperty\": \"Instantaneous Amplitude\",\r\n            \"stackAngleRangeMax\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": 10\r\n            },\r\n            \"stackAngleRangeMin\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": 0\r\n            },\r\n            \"stackAzimuthRangeMax\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": 20\r\n            },\r\n            \"stackAzimuthRangeMin\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": -20\r\n            },\r\n            \"stackOffsetRangeMax\": {\r\n                \"unitKey\": \"ftUS\",\r\n                \"value\": 3000\r\n            },\r\n            \"stackOffsetRangeMin\": {\r\n                \"unitKey\": \"ftUS\",\r\n                \"value\": 0\r\n            },\r\n            \"stackSubType\": \"Full\",\r\n            \"stackType\": \"Full\",\r\n            \"storageType\": \"32-BIT\",\r\n            \"textualFileHeader\": [\r\n                \"C 1 CLIENT COMPANY CREW NO                                                      C 2 LINE line1dS AREA MAP ID                                                    C 3 REEL NO DAY-START OF REEL YEAR OBSERVER                                     C 4 INSTRUMENT: DELPH MODEL xx SERIAL NO                                        C 5 DATA TRACES/RECORD 1 AUXILIARY TRACES/RECORD 0 CDP FOLD                     C 6 SAMPLE INTERVAL 333 SAMPLES/TRACE 1496 BITS/IN 16 BYTES/SAMPLE 2            C 7 RECORDING FORMAT FORMAT THIS REEL MEASUREMENT SYSTEM                        C 8 SAMPLE CODE: FIXED PT                                                       C 9 GAIN TYPE: FIXED                                                            C10 FILTERS: ALIAS 1500HZ NOTCH HZ BAND - HZ SLOPE - DB/OCT                     C11 SOURCE: TYPE NUMBER/POINT POINT INTERVAL                                    C12 PATTERN: LENGTH WIDTH                                                       C13 SWEEP: START HZ END HZ LENGTH MS CHANEL NO TYPE                             C14 TAPER: START LENGTH MS END LENGTH MS TYPE                                   C15 SPREAD: OFFSET MAX DISTANCE GROUP INTERVAL                                  C16 GEOPHONES: PER GROUP SPACING FREQUENCY MFG MODEL                            C17 PATTERN: LENGTH WIDTH                                                       C18 TRACES SORTED BY: RECORD                                                    C19 AMPLITUDE RECOVERY: NONE                                                    C20 MAP PROJECTION ZONE ID COORDINATE UNITS                                     C21 PROCESSING:                                                                 C22 PROCESSING:                                                                 C23                                                                             C24                                                                             C25                                                                             C26                                                                             C27                                                                             C28                                                                             C29                                                                             C30                                                                             C31                                                                             C32                                                                             C33                                                                             C34                                                                             C35                                                                             C36                                                                             C37                                                                             C38                                                                             C39                                                                             C40 END EBCDIC                                                                  \"\r\n            ],\r\n            \"verticalDomain\": \"Elevation time (two-way travel time)\",\r\n            \"verticalIncrement\": {\r\n                \"unitKey\": \"ms\",\r\n                \"value\": -4\r\n            },\r\n            \"verticalSampleCount\": 1000,\r\n            \"verticalStart\": {\r\n                \"unitKey\": \"ms\",\r\n                \"value\": 0\r\n            },\r\n            \"verticalStop\": {\r\n                \"unitKey\": \"ms\",\r\n                \"value\": -3996\r\n            },\r\n            \"vintage\": \"ST2013-InstantaneousAmplitude\",\r\n            \"waveType\": \"PP\"\r\n        },\r\n        \"kind\": \"{{datapartition}}:wks:seismic3d:1.0.5\",\r\n        \"legal\": {\r\n            \"legaltags\": [\r\n                \"{{legaltag01}}\"\r\n            ],\r\n            \"otherRelevantDataCountries\": [\r\n                \"US\",\r\n                \"BE\",\r\n                \"NO\",\r\n                \"IN\"\r\n            ]\r\n        },\r\n        \"meta\": [\r\n            {\r\n                \"kind\": \"Unit\",\r\n                \"name\": \"ft/s\",\r\n                \"persistableReference\": {\r\n                    \"scaleOffset\": {\r\n                        \"scale\": 0.3048,\r\n                        \"offset\": 0\r\n                    },\r\n                    \"symbol\": \"ft/s\",\r\n                    \"baseMeasurement\": {\r\n                        \"ancestry\": \"Velocity\",\r\n                        \"type\": \"UM\"\r\n                    },\r\n                    \"type\": \"USO\"\r\n                },\r\n                \"propertyNames\": [\r\n                    \"elevationReferenceTime.replacementVelocity.value\"\r\n                ]\r\n            },\r\n            {\r\n                \"kind\": \"Unit\",\r\n                \"name\": \"ftUS\",\r\n                \"persistableReference\": {\r\n                    \"scaleOffset\": {\r\n                        \"scale\": 0.3048006,\r\n                        \"offset\": 0\r\n                    },\r\n                    \"symbol\": \"ftUS\",\r\n                    \"baseMeasurement\": {\r\n                        \"ancestry\": \"Length\",\r\n                        \"type\": \"UM\"\r\n                    },\r\n                    \"type\": \"USO\"\r\n                },\r\n                \"propertyNames\": [\r\n                    \"stackOffsetRangeMin.value\",\r\n                    \"stackOffsetRangeMax.value\"\r\n                ]\r\n            },\r\n            {\r\n                \"kind\": \"DateTime\",\r\n                \"name\": \"datetime\",\r\n                \"persistableReference\": {\r\n                    \"format\": \"yyyy-MM-ddTHH:mm:ssZ\",\r\n                    \"timeZone\": \"UTC\",\r\n                    \"type\": \"DTM\"\r\n                },\r\n                \"propertyNames\": [\r\n                    \"dateCreated\",\r\n                    \"dateModified\"\r\n                ]\r\n            },\r\n            {\r\n                \"kind\": \"Measurement\",\r\n                \"name\": \"ShortTime\",\r\n                \"persistableReference\": {\r\n                    \"ancestry\": \"Time.Short_Time\",\r\n                    \"type\": \"UM\"\r\n                },\r\n                \"propertyNames\": [\r\n                    \"verticalDomain\"\r\n                ]\r\n            },\r\n            {\r\n                \"kind\": \"Unit\",\r\n                \"name\": \"ms\",\r\n                \"persistableReference\": {\r\n                    \"scaleOffset\": {\r\n                        \"scale\": 0.001,\r\n                        \"offset\": 0\r\n                    },\r\n                    \"symbol\": \"ms\",\r\n                    \"baseMeasurement\": {\r\n                        \"ancestry\": \"Time\",\r\n                        \"type\": \"UM\"\r\n                    },\r\n                    \"type\": \"USO\"\r\n                },\r\n                \"propertyNames\": [\r\n                    \"verticalStart.value\",\r\n                    \"verticalIncrement.value\",\r\n                    \"verticalStop.value\"\r\n                ]\r\n            },\r\n            {\r\n                \"kind\": \"Unit\",\r\n                \"name\": \"amplitude\",\r\n                \"persistableReference\": {\r\n                    \"scaleOffset\": {\r\n                        \"scale\": 1,\r\n                        \"offset\": 0\r\n                    },\r\n                    \"symbol\": \"----\",\r\n                    \"baseMeasurement\": {\r\n                        \"ancestry\": \"Dimensionless\",\r\n                        \"type\": \"UM\"\r\n                    },\r\n                    \"type\": \"USO\"\r\n                },\r\n                \"propertyNames\": [\r\n                    \"rangeAmplitudeMax.value\",\r\n                    \"rangeAmplitudeMin.value\"\r\n                ]\r\n            },\r\n            {\r\n                \"kind\": \"Unit\",\r\n                \"name\": \"ft\",\r\n                \"persistableReference\": {\r\n                    \"scaleOffset\": {\r\n                        \"scale\": 0.3048,\r\n                        \"offset\": 0\r\n                    },\r\n                    \"symbol\": \"ft\",\r\n                    \"baseMeasurement\": {\r\n                        \"ancestry\": \"Length\",\r\n                        \"type\": \"UM\"\r\n                    },\r\n                    \"type\": \"USO\"\r\n                },\r\n                \"propertyNames\": [\r\n                    \"elevationReferenceTime.elevationFromMsl.value\"\r\n                ]\r\n            },\r\n            {\r\n                \"kind\": \"Measurement\",\r\n                \"name\": \"seismicProperty\",\r\n                \"persistableReference\": {\r\n                    \"ancestry\": \"Dimensionless.Amplitude.Acoustic_Amplitude.Analytic_Trace.Instantaneous_Amplitude\",\r\n                    \"type\": \"UM\"\r\n                },\r\n                \"propertyNames\": [\r\n                    \"seismicProperty\"\r\n                ]\r\n            },\r\n            {\r\n                \"kind\": \"Unit\",\r\n                \"name\": \"deg\",\r\n                \"persistableReference\": {\r\n                    \"scaleOffset\": {\r\n                        \"scale\": 0.017453292,\r\n                        \"offset\": 0\r\n                    },\r\n                    \"symbol\": \"dega\",\r\n                    \"baseMeasurement\": {\r\n                        \"ancestry\": \"Plane_Angle\",\r\n                        \"type\": \"UM\"\r\n                    },\r\n                    \"type\": \"USO\"\r\n                },\r\n                \"propertyNames\": [\r\n                    \"stackAngleRangeMin.value\",\r\n                    \"stackAngleRangeMax.value\",\r\n                    \"stackAzimuthRangeMin.value\",\r\n                    \"stackAzimuthRangeMax.value\"\r\n                ]\r\n            }\r\n        ],\r\n        \"version\": 1040891613125385\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET DATASET X1 + SEISMIC META",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check content type\", function () {",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"    });",
									"",
									"    pm.test(\"Dataset name\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get('dsx01'));",
									"    });",
									"",
									"    pm.test(\"tenant\", function () {",
									"        pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"    });",
									"",
									"    pm.test(\"subproject\", function () {",
									"        pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"    });",
									"",
									"    pm.test(\"path\", function () {",
									"        pm.expect(jsonData.path).to.eql(pm.environment.get('testPath01'));",
									"    });",
									"",
									"    pm.test(\"ltag\", function () {",
									"        pm.expect(jsonData.ltag).to.eql(pm.environment.get('legaltag01'));",
									"    });",
									"",
									"    pm.test(\"Dates are present\", function () {",
									"        pm.expect(jsonData.created_date).to.exist;",
									"        pm.expect(jsonData.last_modified_date).to.exist;",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(1);",
									"    });",
									"",
									"    pm.test(\"sbit\", function () {",
									"        postman.setEnvironmentVariable(\"sbit\", jsonData.sbit);",
									"    });",
									"",
									"    pm.test(\"gcsurl\", () => {",
									"        postman.setEnvironmentVariable(\"gcsBucketName\", jsonData.gcsurl.split('/')[0]);",
									"        postman.setEnvironmentVariable(\"gcsObjectPrefix\", jsonData.gcsurl.split('/')[1]);",
									"    })",
									"",
									"",
									"    pm.test(\"Check seismicmetadata\", () => {",
									"        pm.expect(jsonData.seismicmeta).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.id).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.kind).to.eql(pm.environment.get('datapartition') + \":wks:seismic3d:1.0.5\");",
									"        pm.expect(jsonData.seismicmeta.acl).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.acl.viewers).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.acl.owners).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.legal).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.legal.legaltags).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.legal.otherRelevantDataCountries).to.contain(\"US\");",
									"        pm.expect(jsonData.seismicmeta.data.binNodePositions[0].features[0].geometry.coordinates[0][1]).to.equal(242030.61);",
									"        pm.expect(jsonData.seismicmeta.data.binNodePositions[0].features[0].geometry.type).to.equal(\"AnyCrsMultiPoint\");",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded01}}&seismicmeta=true",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded01}}"
								},
								{
									"key": "seismicmeta",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET CLOSE SBIT CP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(0);",
									"    });",
									"",
									"    pm.test(\"sbit\", function () {",
									"        pm.expect(jsonData.sbit).to.eql(null);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"metadata\": { \"k1\": \"v1\", \"k2\": \"v2\", \"k3\": { \"k4\": \"v4\" } },\n\t\"filemetadata\": {\"type\": \"GENERIC\", \"size\": 1021 },\n\t\"last_modified_date\": true\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded01}}&close={{sbit}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded01}}"
								},
								{
									"key": "close",
									"value": "{{sbit}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET GCS TOKEN CP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"        var key = request.name + '_counter';",
									"        pm.environment.unset(key);",
									"        postman.setEnvironmentVariable('execCounter', 1);",
									"",
									"",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"gcstoken\", () => {",
									"        postman.setEnvironmentVariable(\"gcsAccessToken\", jsonData.access_token);",
									"    });",
									"",
									"    pm.test(\"Validate Subproject Details\", function () {",
									"        pm.expect(jsonData.access_token).to.exist;",
									"        pm.expect(jsonData.expires_in).to.greaterThan(0);",
									"        postman.setEnvironmentVariable(\"tokenType\", jsonData.token_type);",
									"        postman.setEnvironmentVariable('execCounter', 1);",
									"        if(pm.environment.get('serviceCloudProvider') === 'azure') {",
									"            postman.setNextRequest(\"UPLOAD OBJECT X1 IN ACS\");",
									"        } else if(pm.environment.get('serviceCloudProvider') === 'google') {",
									"            pm.expect(jsonData.token_type).to.eql('Bearer');",
									"            postman.setNextRequest(\"UPLOAD OBJECT X1 IN GCS\");",
									"        } else {",
									"            postman.setNextRequest(\"DATASET DELETE X1\");",
									"        }",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/utility/gcs-access-token?sdpath=sd://{{tenant}}/{{subproject}}&readonly=false",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"utility",
								"gcs-access-token"
							],
							"query": [
								{
									"key": "sdpath",
									"value": "sd://{{tenant}}/{{subproject}}"
								},
								{
									"key": "readonly",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UPLOAD OBJECT X1 IN GCS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"set crc32c code\", function () {",
									"        postman.setEnvironmentVariable(\"gcsXcrc32c\", jsonData.crc32c);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1);",
									"    ",
									"    postman.setNextRequest(\"UTILITY CP X1 TO X2\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gcsAccessToken}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "text/plain",
								"type": "text"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "Add some text to validate data copy",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "https://www.googleapis.com/upload/storage/v1/b/{{gcsBucketName}}/o?uploadType=media&name={{gcsObjectPrefix}}%2FOBJX00",
							"protocol": "https",
							"host": [
								"www",
								"googleapis",
								"com"
							],
							"path": [
								"upload",
								"storage",
								"v1",
								"b",
								"{{gcsBucketName}}",
								"o"
							],
							"query": [
								{
									"key": "uploadType",
									"value": "media"
								},
								{
									"key": "name",
									"value": "{{gcsObjectPrefix}}%2FOBJX00"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UPLOAD OBJECT X1 IN ACS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 201) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 201\", function () {",
									"        pm.response.to.have.status(201);",
									"    });",
									"",
									"    pm.test(\"Check content length\", function () {",
									"    pm.response.to.be.header(\"Content-Length\", \"0\");",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1);",
									"    ",
									"    postman.setNextRequest(\"UTILITY CP X1 TO X2\");",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"acsSasX1Url\", pm.variables.get(\"gcsAccessToken\").replace('?', '/' + pm.variables.get(\"gcsObjectPrefix\") + '/o?'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-ms-blob-type",
								"value": "BlockBlob",
								"type": "text"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "Add some text to validate data copy",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{acsSasX1Url}}",
							"host": [
								"{{acsSasX1Url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UTILITY CP X1 TO X2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 202) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 202\", function () {",
									"        pm.response.to.have.status(202);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/utility/cp?sdpath_from=sd://{{tenant}}/{{subproject}}{{testPath01}}{{dsx01}}&sdpath_to=sd://{{tenant}}/{{subproject}}{{testPath02}}{{dsx02}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"utility",
								"cp"
							],
							"query": [
								{
									"key": "sdpath_from",
									"value": "sd://{{tenant}}/{{subproject}}{{testPath01}}{{dsx01}}"
								},
								{
									"key": "sdpath_to",
									"value": "sd://{{tenant}}/{{subproject}}{{testPath02}}{{dsx02}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET DATASET X2 + SEISMIC META",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check content type\", function () {",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"    });",
									"",
									"    pm.test(\"Dataset name\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get('dsx02'));",
									"    });",
									"",
									"    pm.test(\"tenant\", function () {",
									"        pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"    });",
									"",
									"    pm.test(\"subproject\", function () {",
									"        pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"    });",
									"",
									"    pm.test(\"path\", function () {",
									"        pm.expect(jsonData.path).to.eql(pm.environment.get('testPath02'));",
									"    });",
									"",
									"    pm.test(\"ltag\", function () {",
									"        pm.expect(jsonData.ltag).to.eql(pm.environment.get('legaltag01'));",
									"    });",
									"",
									"    pm.test(\"Dates are present\", function () {",
									"        pm.expect(jsonData.created_date).to.exist;",
									"        pm.expect(jsonData.last_modified_date).to.exist;",
									"    });",
									"",
									"    pm.test(\"Verify gcsBucket\", function () {",
									"        pm.expect(jsonData.gcsurl.split('/')[0]).to.eql(pm.environment.get(\"gcsBucketName\"));",
									"    });",
									"",
									"    pm.test(\"Check seismicmetadata\", () => {",
									"        pm.expect(jsonData.seismicmeta).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.id).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.kind).to.eql(pm.environment.get('datapartition') + \":wks:seismic3d:1.0.5\");",
									"        pm.expect(jsonData.seismicmeta.acl).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.acl.viewers).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.acl.owners).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.legal).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.legal.legaltags).not.equal(null);",
									"        pm.expect(jsonData.seismicmeta.legal.otherRelevantDataCountries).to.contain(\"US\");",
									"        pm.expect(jsonData.seismicmeta.data.binNodePositions[0].features[0].geometry.coordinates[0][1]).to.equal(242030.61);",
									"        pm.expect(jsonData.seismicmeta.data.binNodePositions[0].features[0].geometry.type).to.equal(\"AnyCrsMultiPoint\");",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx02}}?path={{testPathEncoded02}}&seismicmeta=true",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx02}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded02}}"
								},
								{
									"key": "seismicmeta",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET GET X2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Dataset name\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get('dsx02'));",
									"    });",
									"",
									"    pm.test(\"Verify legalTag\", function () {",
									"        pm.expect(jsonData.ltag).to.eql(pm.environment.get(\"ltag\"));",
									"    });",
									"",
									"    pm.test(\"Verify gcsBucket\", function () {",
									"        pm.expect(jsonData.gcsurl.split('/')[0]).to.eql(pm.environment.get(\"gcsBucketName\"));",
									"    });",
									"",
									"    pm.test(\"Verify Tenant\", function () {",
									"        pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"    });",
									"",
									"    pm.test(\"Verify subproject\", function () {",
									"        pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"    });",
									"",
									"    pm.test(\"path\", function () {",
									"        pm.expect(jsonData.path).to.eql(pm.environment.get('testPath02'));",
									"    });",
									"",
									"    pm.test(\"gcsurl\", () => {",
									"        postman.setEnvironmentVariable(\"gcsBucketName\", jsonData.gcsurl.split('/')[0]);",
									"        postman.setEnvironmentVariable(\"gcsObjectPrefix\", jsonData.gcsurl.split('/')[1]);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"",
									"    if (pm.variables.get(\"tokenType\") == \"SasUrl\") {",
									"        postman.setNextRequest(\"DOWNLOAD X2 FROM ACS\");",
									"    } else {",
									"        postman.setNextRequest(\"DOWNLOAD X2 FROM GCS\");",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx02}}?path={{testPathEncoded02}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx02}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded02}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DOWNLOAD X2 FROM GCS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check content type\", function () {",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=UTF-8\");",
									"    });",
									"",
									"    pm.test(\"check crc32c code\", function () {",
									"        pm.expect(jsonData.crc32c).to.eql(pm.environment.get(\"gcsXcrc32c\"));",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1);",
									"    ",
									"    postman.setNextRequest(\"DATASET DELETE X1\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gcsAccessToken}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://www.googleapis.com/storage/v1/b/{{gcsBucketName}}/o/{{gcsObjectPrefix}}%2FOBJX00",
							"protocol": "https",
							"host": [
								"www",
								"googleapis",
								"com"
							],
							"path": [
								"storage",
								"v1",
								"b",
								"{{gcsBucketName}}",
								"o",
								"{{gcsObjectPrefix}}%2FOBJX00"
							]
						}
					},
					"response": []
				},
				{
					"name": "DOWNLOAD X2 FROM ACS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check content type\", function () {",
									"    pm.response.to.be.header(\"Content-Type\", \"text/plain\");",
									"    });",
									"",
									"    pm.test(\"check blob type\", function () {",
									"        pm.expect(pm.response.headers.get(\"x-ms-blob-type\")).to.eql(\"BlockBlob\");",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1);",
									"    ",
									"    postman.setNextRequest(\"DATASET DELETE X1\");",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(function(){}, 5000);\r",
									"pm.variables.set(\"acsSasX2Url\", pm.variables.get(\"gcsAccessToken\").replace('?', '/' + pm.variables.get(\"gcsObjectPrefix\") + '/o?'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{acsSasX2Url}}",
							"host": [
								"{{acsSasX2Url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET DELETE X1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET DELETE X2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx02}}?path={{testPathEncoded02}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx02}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded02}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CP STATUS UNSET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.unset('dsx01')",
									"pm.environment.unset('testPath01')",
									"pm.environment.unset('testPathEncoded01')",
									"pm.environment.unset('dsx02')",
									"pm.environment.unset('testPath02')",
									"pm.environment.unset('testPathEncoded02')",
									"pm.environment.unset('ltag')",
									"pm.environment.unset('gcsurl')",
									"pm.environment.unset('gcsBucketName')",
									"pm.environment.unset('gcsObjectPrefix')",
									"pm.environment.unset('gcsAccessToken')",
									"pm.environment.unset('tokenType')",
									"pm.environment.unset('gcsXcrc32c')",
									"pm.environment.unset('sbit')",
									"postman.setEnvironmentVariable('execCounter', 1);",
									"",
									"console.log('Dataset variables were removed for CP Command folder');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/svcstatus",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"svcstatus"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Idempotency",
			"item": [
				{
					"name": "IDM STATUS SET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.setEnvironmentVariable('execCounter', 1);",
									"",
									"console.log('Dataset variables are initialized for Idempotency folder');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function makeID_cp(length) {\r",
									"   var result           = '';\r",
									"   var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"   var charactersLength = characters.length;\r",
									"   for ( var i = 0; i < length; i++ ) {\r",
									"      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"   }\r",
									"   return result;\r",
									"}\r",
									"\r",
									"postman.setEnvironmentVariable(\"dsx01\", makeID_cp(16));\r",
									"\r",
									"var path = \"/\" + makeID_cp(8) + \"/\" + makeID_cp(4) + \"/\" + makeID_cp(3) + \"/\" \r",
									"postman.setEnvironmentVariable(\"testPath\", path);\r",
									"postman.setEnvironmentVariable(\"testPathEncoded\", encodeURIComponent(path));\r",
									"\r",
									"\r",
									"var key = \"W\" + makeID_cp(32);\r",
									"postman.setEnvironmentVariable(\"idempotencyKey\", key);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/svcstatus",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"svcstatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "IDM DATASET REGISTER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check content type\", function () {",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"    });",
									"",
									"    pm.test(\"Dataset name\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get('dsx01'));",
									"    });",
									"",
									"    pm.test(\"tenant\", function () {",
									"        pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"    });",
									"",
									"    pm.test(\"subproject\", function () {",
									"        pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"    });",
									"",
									"    pm.test(\"path\", function () {",
									"        pm.expect(jsonData.path).to.eql(pm.environment.get('testPath'));",
									"    });",
									"",
									"    pm.test(\"ltag\", function () {",
									"        pm.expect(jsonData.ltag).to.eql(pm.environment.get(\"legaltag01\"));",
									"    });",
									"",
									"    pm.test(\"Dates are present\", function () {",
									"        pm.expect(jsonData.created_date).to.exist;",
									"        pm.expect(jsonData.last_modified_date).to.exist;",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(1);",
									"        postman.setEnvironmentVariable(\"sbit\", jsonData.sbit);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// function makeIdpID(length) {\r",
									"//    var result           = '';\r",
									"//    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"//    var charactersLength = characters.length;\r",
									"//    for ( var i = 0; i < length - 1; i++ ) {\r",
									"//       result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"//    }\r",
									"//    return 'W' + result;\r",
									"// }\r",
									"\r",
									"// postman.setEnvironmentVariable(\"idempotencyKey\", makeIdpID(32));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							},
							{
								"key": "x-seismic-dms-lockid",
								"value": "{{idempotencyKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET REGISTER IDEMPOTENT CALL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check content type\", function () {",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"    });",
									"",
									"    pm.test(\"Dataset name\", function () {",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get('dsx01'));",
									"    });",
									"",
									"    pm.test(\"tenant\", function () {",
									"        pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"    });",
									"",
									"    pm.test(\"subproject\", function () {",
									"        pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"    });",
									"",
									"    pm.test(\"path\", function () {",
									"        pm.expect(jsonData.path).to.eql(pm.environment.get('testPath'));",
									"    });",
									"",
									"    pm.test(\"ltag\", function () {",
									"        pm.expect(jsonData.ltag).to.eql(pm.environment.get(\"legaltag01\"));",
									"    });",
									"",
									"    pm.test(\"Dates are present\", function () {",
									"        pm.expect(jsonData.created_date).to.exist;",
									"        pm.expect(jsonData.last_modified_date).to.exist;",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(1);",
									"        postman.setEnvironmentVariable(\"sbit\", jsonData.sbit);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							},
							{
								"key": "x-seismic-dms-lockid",
								"value": "{{idempotencyKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "IDM DATASET PATCH",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(0);",
									"    });",
									"",
									"    pm.test(\"Metadata is saved\", function () {",
									"        pm.expect(jsonData.metadata.k1).to.eql('v1');",
									"        pm.expect(jsonData.metadata.k3.k4).to.eql('v4');",
									"    });",
									"",
									"    pm.test(\"Filemetadata is added\", function () {",
									"        pm.expect(jsonData.filemetadata).to.exist;",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"metadata\": { \"k1\": \"v1\", \"k2\": \"v2\", \"k3\": { \"k4\": \"v4\" } },\n\t\"filemetadata\": {\"type\": \"GENERIC\", \"size\": 1021 },\n\t\"last_modified_date\": true\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded}}&close={{idempotencyKey}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								},
								{
									"key": "close",
									"value": "{{idempotencyKey}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET PATCH IDEMPOTENT CALL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"sbit_count\", function () {",
									"        pm.expect(jsonData.sbit_count).to.eql(0);",
									"    });",
									"",
									"    pm.test(\"Filemetadata is added\", function () {",
									"        pm.expect(jsonData.filemetadata).to.exist;",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"metadata\": { \"k1\": \"v1\", \"k2\": \"v2\", \"k3\": { \"k4\": \"v4\" } },\n\t\"filemetadata\": {\"type\": \"GENERIC\", \"size\": 1021 },\n\t\"last_modified_date\": true\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded}}&close={{idempotencyKey}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								},
								{
									"key": "close",
									"value": "{{idempotencyKey}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "IDM DATASET DELETE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET DELETE IDEMPOTENT CALL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    ",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dsx01}}?path={{testPathEncoded}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dsx01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testPathEncoded}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "IDM STATUS UNSET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.unset('dsx01');",
									"pm.environment.unset('testPath');",
									"pm.environment.unset('testPathEncoded');",
									"pm.environment.unset('idempotencyKey');",
									"pm.environment.unset('sbit');",
									"postman.setEnvironmentVariable('execCounter', 1);",
									"",
									"console.log('Dataset variables were removed for Idempotency folder');",
									"",
									"if (pm.environment.get(\"hold_subproject\") == \"true\") {",
									"    console.log('Subproject ' + pm.environment.get('subproject') + ' will not be deleted');",
									"    postman.setNextRequest(\"CLEANUP STATUS UNSET\");",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/svcstatus",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"svcstatus"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "cleanup",
			"item": [
				{
					"name": "CLEANUP SUBPROJECT DELETE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code != 200) {",
									"    console.log(pm.response.text())",
									"    _.retryOnFailure(postman, pm.response.code, request.name, pm.environment.get(\"maxAmountOfRetries\"));",
									"",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Reset environment variables if _.retryOnFailure function was used before",
									"    var key = request.name + '_counter';",
									"    pm.environment.unset(key);",
									"    postman.setEnvironmentVariable('execCounter', 1)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/subproject/tenant/{{tenant}}/subproject/{{subproject}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"subproject",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CLEANUP STATUS UNSET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.unset('serviceCloudProvider');",
									"pm.environment.unset('appAdminEmail');",
									"pm.environment.unset('maxAmountOfRetries');",
									"pm.environment.unset('subprojectLongName');",
									"pm.environment.unset('execCounter');",
									"",
									"// if subproject name was not provided remove subproject",
									"if (pm.environment.get(\"hold_subproject\" !== true)) {",
									"    pm.environment.unset('subproject');",
									"}",
									"pm.environment.unset('hold_subproject');",
									"",
									"console.log('Postman environment was cleaned up');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/svcstatus",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"svcstatus"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}