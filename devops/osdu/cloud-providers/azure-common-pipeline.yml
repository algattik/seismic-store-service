azure_containerize:
  needs: []
  script:
      echo 'empty'
  only:
      - $DISABLED == 'true'

container_scanning:
  needs: []
  script:
      echo 'empty'
  rules:
    - if: $DISABLED == 'true'
      when: never

azure_containerize_helm:
  needs: []
  variables:
    AZURE_HELM_SUBDIR: osdu-ddms/standard-ddms
  only:
    variables:
      - $AZURE == '1'
  except:
    variables:
      - $AZURE_SKIP_DEPLOY == 'true'

azure_deploy:
  needs: []
  script:
      echo 'empty'
  only:
      - $DISABLED == 'true'

azure_test:
  needs: []
  extends: []
  script:
      echo 'empty'
  only:
      - $DISABLED == 'true'

azure_code_coverage:
  needs: []
  extends: []
  script:
      echo 'empty'
  only:
      - $DISABLED == 'true'

azure_test_py:
  needs: []
  extends: []
  script:
      echo 'empty'
  only:
      - $DISABLED == 'true'

azure_swagger_test:
  needs: []
  extends: []
  script:
      echo 'empty'
  only:
      - $DISABLED == 'true'

azure-publish:
  needs: []
  before_script:
      echo 'empty'
  script:
      echo 'empty'
  rules:
    - if: $DISABLED == 'true'
      when: never

.azure_containerize:
  tags: ["osdu-medium"]
  image: danielscholl/azure-build-image
  stage: containerize
  needs: []
  extends:
    - .azure_variables
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - az --version
    - az login --service-principal -u $AZURE_PRINCIPAL_ID -p $AZURE_PRINCIPAL_SECRET --tenant $AZURE_TENANT_ID --query '[*].name'
    - |
      echo "AZURE_REGISTRY_TOKEN=$(az acr login -n $AZURE_REGISTRY --expose-token --query 'accessToken' -otsv)" >> acr_tokens.env
      echo "DST_REGISTRY_TOKEN=$(az acr login -n msosdu --expose-token --query 'accessToken' -otsv)" >> acr_tokens.env
  only:
    variables:
      - $AZURE == '1'
  artifacts:
    reports:
      dotenv: ${CI_PROJECT_DIR}/acr_tokens.env

.azure_container_scanning:
  tags: ["osdu-medium"]
  stage: scan
  image: registry.gitlab.com/security-products/container-scanning/trivy:4
  allow_failure: true
  script:
    - |
      echo "[INFO] Scanning with trivy";
      echo "[INFO] Scanning Container Image: $DOCKER_IMAGE"
      trivy image --ignore-unfixed --exit-code 1 --severity "HIGH,CRITICAL" $DOCKER_IMAGE
  rules:
    - if: $AZURE == '1' && $ENFORCE_CONTAINER_SCANNING == 'true'
      allow_failure: false
    - if: $AZURE == '1'

.azure_deploy:
  image: danielscholl/azure-build-image
  tags: ["osdu-medium"]
  stage: deploy
  extends:
    - .azure_variables
  before_script:
    - az login --service-principal -u $AZURE_PRINCIPAL_ID -p $AZURE_PRINCIPAL_SECRET --tenant $AZURE_TENANT_ID
    - az aks get-credentials -g $AZURE_UNIQUE-rg -n $AZURE_UNIQUE-aks
    - az acr login -n ${AZURE_REGISTRY}
  only:
    variables:
      - $AZURE == '1'
  except:
    variables:
      - $AZURE_SKIP_DEPLOY == 'true'

.azure_test:
  tags: ["osdu-medium"]
  stage: integration
  extends:
    - .azure_variables
  before_script:
    - apt-get update
    - apt-get install -y python3
    - apt-get install -y python3-pip
    - pip3 install msal
    - export svctoken=$(python3 ${CI_PROJECT_DIR}/devops/scripts/azure_jwt_client.py)
  only:
    variables:
      - $AZURE == '1'

.azure_code_coverage:
  stage: coverage
  extends:
    - .azure_variables
  allow_failure: true
  artifacts:
    reports:
      dotenv: azure_code_coverage.env
    paths:
      - $AZURE_BUILD_SUBDIR/target/site/

.azure_publish:
  stage: publish
  tags: ["osdu-medium"]
  retry: 1
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [""]
  variables:
    DST_REGISTRY: "msosdu"
  extends:
    - .azure_variables
  before_script:
  - >
    crane auth login ${DST_REGISTRY}.azurecr.io -u 00000000-0000-0000-0000-000000000000 -p $DST_REGISTRY_TOKEN;
    crane auth login ${AZURE_REGISTRY}.azurecr.io -u 00000000-0000-0000-0000-000000000000 -p $AZURE_REGISTRY_TOKEN;
  - >
    if [[ -z $CI_COMMIT_TAG ]] && [[ $CI_COMMIT_BRANCH =~ ^release\/[0-9]{1,2}.[0-9]{1,2}$ ]];
    then
        RELEASE_VER=$(echo $CI_COMMIT_BRANCH | sed "s?^release/??");
        AZ_VER="$RELEASE_VER.0"
    elif [[ $CI_COMMIT_TAG =~ ^v[0-9]{1,2}\.[0-9]{1,2}\.[0-9]{1,2}$ ]];
    then
        AZ_VER=$(echo $CI_COMMIT_TAG | sed "s/^v//");
    else
      AZ_VER=0.0.0-unknown;
      echo "[ERROR] Not able to parse release version";
    fi;
  rules:
    - if: '$AZURE == "1" && $CI_COMMIT_BRANCH =~ /^release/'
      when: on_success
    - if: '$AZURE == "1" && $CI_COMMIT_TAG'
      when: on_success
