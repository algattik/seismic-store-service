filemetadata_azure_containerize:
  extends: .azure_containerize
  variables:
    SHA_IMAGE: ${FILEMETADATA_LOCAL_SERVICE_NAME}:${CI_COMMIT_SHA}
    LATEST_IMAGE: ${FILEMETADATA_LOCAL_SERVICE_NAME}:latest
    RELEASE_IMAGE: release-${CI_COMMIT_TAG}:${FILEMETADATA_LOCAL_SERVICE_NAME}-${CI_COMMIT_TAG}
  script:
    - cd app/$FILEMETADATA_SERVICE
    - sed -i "s/SEGY_LIBRARY_PAT/$SEGY_LIBRARY_FEED_PAT/g" pip.conf
    - docker build -t $FILEMETADATA_LOCAL_SERVICE_NAME --file Dockerfile .
    # Gitlab Container Registry
    - docker tag $FILEMETADATA_LOCAL_SERVICE_NAME $CI_REGISTRY_IMAGE/$SHA_IMAGE
    - docker push ${CI_REGISTRY_IMAGE}/$SHA_IMAGE
    - docker tag $CI_REGISTRY_IMAGE/$SHA_IMAGE $CI_REGISTRY_IMAGE/$LATEST_IMAGE
    - docker push ${CI_REGISTRY_IMAGE}/$LATEST_IMAGE
    # Azure Container Registry
    - az acr login -n $AZURE_REGISTRY
    - docker tag $FILEMETADATA_LOCAL_SERVICE_NAME ${AZURE_REGISTRY}.azurecr.io/$SHA_IMAGE
    - docker push ${AZURE_REGISTRY}.azurecr.io/$SHA_IMAGE
    - docker tag $CI_REGISTRY_IMAGE/$SHA_IMAGE ${AZURE_REGISTRY}.azurecr.io/$LATEST_IMAGE
    - docker push ${AZURE_REGISTRY}.azurecr.io/$LATEST_IMAGE
    - |
      if [ ! -z "$CI_COMMIT_TAG" ]; then
        docker tag $CI_REGISTRY_IMAGE/$SHA_IMAGE ${AZURE_REGISTRY}.azurecr.io/$RELEASE_IMAGE
        docker push ${AZURE_REGISTRY}.azurecr.io/$RELEASE_IMAGE
      fi
  only:
    changes:
      - devops/**/*
      - app/filemetadata/**/*
    refs:
      - branches
      - merge_requests
      - tags

filemetadata_azure_deploy:
  extends: .azure_deploy
  needs:
    - filemetadata_azure_containerize
    - azure_containerize_helm
  script:
    - curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash -s -- --version v3.9.1
    - helm show chart $HELM_CHART_OCI --version $HELM_CHART_OCI_VERSION
    # Uninstall if found in default namespace
    - helm uninstall seismic-dms-file-metadata-service -n default --wait || echo [INFO] No seismic-dms-file-metadata-service in default
    # Install/upgrade helm chart
    - >
      helm upgrade -i ${FILEMETADATA_LOCAL_SERVICE_NAME} $HELM_CHART_OCI --version $HELM_CHART_OCI_VERSION
      --set azure.tenant=$AZURE_TENANT_ID
      --set azure.subscription=$AZURE_SUBSCRIPTION_ID
      --set azure.resourcegroup=$(az keyvault secret show --id https://${ENV_VAULT}.vault.azure.net/secrets/base-name-cr --query value -otsv)-rg
      --set azure.identity=$(az keyvault secret show --id https://${ENV_VAULT}.vault.azure.net/secrets/base-name-cr --query value -otsv)-osdu-identity
      --set azure.identity_id=$(az keyvault secret show --id https://${ENV_VAULT}.vault.azure.net/secrets/osdu-identity-id --query value -otsv)
      --set azure.keyvault.name=${ENV_VAULT}
      --set azure.acr=${AZURE_REGISTRY}.azurecr.io
      --set ingress.dns=${AZURE_DNS_NAME}
      --set configuration[0].container.image=${FILEMETADATA_LOCAL_SERVICE_NAME}
      --set configuration[0].container.tag=${CI_COMMIT_SHA}
      --create-namespace
      -n ${NAMESPACE} -f app/filemetadata/devops/azure/${FILEMETADATA_SERVICE}.osdu.values.yaml --wait --timeout 10m
    # Wait for service to be running to start
    - kubectl rollout status deployment.v1.apps/${FILEMETADATA_LOCAL_SERVICE_NAME} -n ${NAMESPACE} --timeout=20m
    - pod=$(kubectl -n ${NAMESPACE} get po -l app=${FILEMETADATA_LOCAL_SERVICE_NAME} --no-headers=true -o custom-columns=":metadata.name" | tail -1)
    - status=$(kubectl wait -n ${NAMESPACE} --for=condition=Ready pod/$pod --timeout=600s)
    - if [[ "$status" != *"met"* ]]; then echo "${FILEMETADATA_LOCAL_SERVICE_NAME} pod didn't start correctly" ; exit 1 ; fi
  only:
    changes:
      - devops/**/*
      - app/filemetadata/**/*
    refs:
      - branches
      - merge_requests
      - tags

filemetadata_azure_unit_test:
  image: node
  extends: .azure_test
  stage: integration
  needs:
    - filemetadata_azure_deploy
  allow_failure: true
  variables:
    AZURE_AD_APP_RESOURCE_ID: $AZURE_APP_ID
    AZURE_AD_TENANT_ID: $AZURE_TENANT_ID
    AZURE_TESTER_SERVICEPRINCIPAL_SECRET: $AZURE_PRINCIPAL_SECRET
    INTEGRATION_TESTER: $AZURE_PRINCIPAL_ID
    DNS: https://${AZURE_DNS_NAME}
  script:
    - pip3 install requests msal fastapi python-dotenv
    - cd app/$FILEMETADATA_SERVICE/app
    - python3 -m unittest discover -s test -p test_* -v
  only:
    changes:
      - devops/**/*
      - app/filemetadata/**/*
    refs:
      - branches
      - merge_requests
      - tags

filemetadata_azure_integration_test:
  image: node
  extends: .azure_test
  stage: integration
  needs:
    - filemetadata_azure_deploy
  allow_failure: true
  variables:
    AZURE_AD_APP_RESOURCE_ID: $AZURE_APP_ID
    AZURE_AD_TENANT_ID: $AZURE_TENANT_ID
    AZURE_TESTER_SERVICEPRINCIPAL_SECRET: $AZURE_PRINCIPAL_SECRET
    INTEGRATION_TESTER: $AZURE_PRINCIPAL_ID
    DNS: https://${AZURE_DNS_NAME}
    SVC_API_KEY: $AZURE_SVC_API_KEY
  script:
    - pip3 install -Iv pytest==6.2.4 jsonschema==3.2.0 requests~=2.26.0 requests-mock==1.7.0 behave==1.2.6 python-dotenv==0.19.0
    - cd app/$FILEMETADATA_SERVICE/app/integration_test
    - python3 -m behave -v
  only:
    changes:
      - devops/**/*
      - app/filemetadata/**/*
    refs:
      - branches
      - merge_requests
      - tags

filemetadata_azure_publish:
  needs:
    - filemetadata_azure_deploy
    - filemetadata_azure_containerize
    - azure_containerize_helm
  extends: .azure_publish
  variables:
    SHA_IMAGE: ${FILEMETADATA_LOCAL_SERVICE_NAME}:${CI_COMMIT_SHA}
  script:
   - crane copy ${AZURE_REGISTRY}.azurecr.io/$SHA_IMAGE ${DST_REGISTRY}.azurecr.io/seismic-metadata:${AZ_VER}
   - crane copy ${HELM_CHART_OCI#"oci://"}:${HELM_CHART_OCI_VERSION} ${DST_REGISTRY}.azurecr.io/helm/${HELM_CHART_SUBDIR}:${HELM_CHART_OCI_VERSION} || echo "[WARN] Not able to publish helm chart"
