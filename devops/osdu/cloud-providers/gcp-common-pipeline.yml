#  common pipeline could be extended with before_script at respective service pipeline
.common: &common
  - gcloud auth activate-service-account --key-file $OSDU_GCP_DEPLOY_FILE
  - gcloud config set project $OSDU_GCP_PROJECT
  - gcloud container clusters get-credentials $OSDU_GCP_CLUSTER --zone $OSDU_GCP_ZONE --project $OSDU_GCP_PROJECT
  - curl https://get.helm.sh/helm-v3.5.4-linux-amd64.tar.gz -s -o helm.tgz; tar -zxf helm.tgz; mv linux-amd64/helm /usr/local/bin/

.common_dev2: &common_dev2
  - gcloud auth activate-service-account --key-file $OSDU_GCP_DEV2_DEPLOY_FILE
  - gcloud config set project $OSDU_GCP_DEV2_PROJECT
  - gcloud container clusters get-credentials $OSDU_GCP_DEV2_CLUSTER --zone $OSDU_GCP_DEV2_ZONE --project $OSDU_GCP_DEV2_PROJECT
  - curl https://get.helm.sh/helm-v3.5.4-linux-amd64.tar.gz -s -o helm.tgz; tar -zxf helm.tgz; mv linux-amd64/helm /usr/local/bin/

.osdu-gcp-helm-charts-master:
  stage: build
  tags: ["osdu-small"]
  image:
    name: alpine/helm:3.6.3
    entrypoint: [""]
  rules:
    - if: "$OSDU_GCP == 'true' && $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH"
  script:
    - helm plugin install https://github.com/chartmuseum/helm-push.git
    - helm cm-push $SEISMIC_OSDU_GCP_HELM_CONFIG_DIR ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/stable --username gitlab-ci-token --password $CI_JOB_TOKEN
    - helm cm-push $SEISMIC_OSDU_GCP_HELM_DEPLOYMENT_DIR ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/stable --username gitlab-ci-token --password $CI_JOB_TOKEN

.osdu-gcp-helm-charts-release:
  stage: build
  tags: ["osdu-small"]
  image:
    name: alpine/helm:3.6.3
    entrypoint: [""]
  rules:
    - if: "$OSDU_GCP == 'true' && $CI_COMMIT_TAG"
  script:
    - VER=$(echo $CI_COMMIT_TAG | sed "s/^v//")
    - helm plugin install https://github.com/chartmuseum/helm-push.git
    - helm cm-push $SEISMIC_OSDU_GCP_HELM_CONFIG_DIR ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/stable --version $VER --username gitlab-ci-token --password $CI_JOB_TOKEN
    - helm cm-push $SEISMIC_OSDU_GCP_HELM_DEPLOYMENT_DIR ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/stable --version $VER --username gitlab-ci-token --password $CI_JOB_TOKEN

.osdu-gcp-containerize-gitlab:
  stage: containerize
  tags: ["osdu-medium"]
  extends: .osdu-gcp-variables
  image: docker:19.03
  cache: {}
  allow_failure: true
  script:
    - export EXTRA_DOCKER_TAG=""; if [ "$CI_COMMIT_TAG" != "" ] ; then EXTRA_DOCKER_TAG="-t $CI_REGISTRY_IMAGE/osdu-gcp-$SEISMIC_OSDU_GCP_SERVICE:$CI_COMMIT_REF_SLUG-$CI_COMMIT_TAG" ; elif [ "$CI_COMMIT_REF_NAME" = "master" ] ; then EXTRA_DOCKER_TAG="-t $CI_REGISTRY_IMAGE/osdu-gcp-$SEISMIC_OSDU_GCP_SERVICE:latest" ; fi
    - docker build -t $CI_REGISTRY_IMAGE/osdu-gcp-$SEISMIC_OSDU_GCP_SERVICE:$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA $EXTRA_DOCKER_TAG --file $SEISMIC_OSDU_GCP_DOCKERFILE_NAME .
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE/osdu-gcp-$SEISMIC_OSDU_GCP_SERVICE:$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA
    - docker push $CI_REGISTRY_IMAGE/osdu-gcp-$SEISMIC_OSDU_GCP_SERVICE
  only:
    variables:
      - $OSDU_GCP == 'true'
    refs:
      - branches
      - main
      - merge_requests

.osdu-gcp-deploy-configmap:
  stage: deploy
  tags: ["osdu-small"]
  extends: .osdu-gcp-variables
  image: gcr.io/google.com/cloudsdktool/cloud-sdk
  cache: {}
  script:
    - *common
    - >
      helm upgrade $SEISMIC_OSDU_GCP_HELM_CONFIG_SERVICE $SEISMIC_OSDU_GCP_HELM_CONFIG_DIR
      --install
      --create-namespace
      --namespace=$OSDU_GCP_HELM_NAMESPACE
      --wait
      --history-max=3
      $SEISMIC_OSDU_GCP_HELM_CONFIG_SERVICE_VARS
  only:
    variables:
      - $OSDU_GCP == 'true'
    refs:
      - branches
      - main
      - merge_requests

.osdu-gcp-dev2-deploy-configmap:
  tags: ["osdu-small"]
  extends: .osdu-gcp-dev2-variables
  image: gcr.io/google.com/cloudsdktool/cloud-sdk
  stage: deploy
  script:
    - *common_dev2
    - >
      helm upgrade $SEISMIC_OSDU_GCP_HELM_CONFIG_SERVICE $SEISMIC_OSDU_GCP_HELM_CONFIG_DIR
      --install
      --create-namespace
      --namespace=$OSDU_GCP_HELM_NAMESPACE
      --wait
      --history-max=3
      $SEISMIC_OSDU_GCP_HELM_CONFIG_SERVICE_VARS
  rules:
    - if: '$OSDU_GCP == "true" && $CI_COMMIT_BRANCH =~ /^release/'
      when: on_success
    - if: '$OSDU_GCP == "true" && $CI_COMMIT_TAG'
      when: on_success
    # The variable DEV2="true" should be specified manually in GitLab before running a pipeline to test this job against a protected branch
    - if: '$OSDU_GCP == "true" && $DEV2 == "true"'
      when: on_success

.osdu-gcp-deployment:
  tags: ["osdu-small"]
  extends: .osdu-gcp-variables
  image: gcr.io/google.com/cloudsdktool/cloud-sdk
  stage: deploy
  cache: {}
  script:
    - *common
    - kubectl logs deployment/seismic-store
    - >
      helm upgrade $SEISMIC_OSDU_GCP_HELM_DEPLOYMENT_SERVICE $SEISMIC_OSDU_GCP_HELM_DEPLOYMENT_DIR
      --install
      --create-namespace
      --namespace=$OSDU_GCP_HELM_NAMESPACE
      --wait
      --history-max=3
      $SEISMIC_OSDU_GCP_HELM_DEPLOYMENT_SERVICE_VARS
    - echo ----- Verify Deployment -----
    - kubectl rollout status deployment.v1.apps/$SEISMIC_OSDU_GCP_SERVICE -n $OSDU_GCP_HELM_NAMESPACE --timeout=900s
    - POD=$(kubectl get pod --sort-by=.metadata.creationTimestamp -n $OSDU_GCP_HELM_NAMESPACE | grep $SEISMIC_OSDU_GCP_SERVICE | tail -1 | awk '{print $1}')
    - STATUS=$(kubectl wait -n $OSDU_GCP_HELM_NAMESPACE --for=condition=Ready pod/$POD --timeout=600s)
    - echo $STATUS
    - if [[ "$STATUS" != *"met"* ]]; then echo "POD didn't start correctly" ; exit 1 ; fi
  only:
    variables:
      - $OSDU_GCP == 'true'
    refs:
      - branches
      - main
      - merge_requests

.osdu-gcp-dev2-deploy-deployment:
  tags: ["osdu-small"]
  extends: .osdu-gcp-dev2-variables
  image: gcr.io/google.com/cloudsdktool/cloud-sdk
  stage: deploy
  script:
    - *common_dev2
    - >
      helm upgrade $SEISMIC_OSDU_GCP_HELM_DEPLOYMENT_SERVICE $SEISMIC_OSDU_GCP_HELM_DEPLOYMENT_DIR
      --install
      --create-namespace
      --namespace=$OSDU_GCP_HELM_NAMESPACE
      --wait
      --history-max=3
      --set data.imagePullPolicy=Always
      --set data.image=$CI_REGISTRY_IMAGE/osdu-gcp-$SEISMIC_OSDU_GCP_SERVICE:${$CI_COMMIT_REF_SLUG-$CI_COMMIT_TAG-$CI_COMMIT_SHORT_SHA}
      --set data.serviceAccountName=$OSDU_GCP_SERVICE-k8s
      --set data.sql_connection_string=$OSDU_GCP_SQL_CONNECTION_STRING
    - echo ----- Verify Deployment -----
    - kubectl rollout status deployment.v1.apps/$SEISMIC_OSDU_GCP_SERVICE -n $OSDU_GCP_HELM_NAMESPACE --timeout=900s
    - POD=$(kubectl get pod --sort-by=.metadata.creationTimestamp -n $OSDU_GCP_HELM_NAMESPACE | grep $SEISMIC_OSDU_GCP_SERVICE | tail -1 | awk '{print $1}')
    - STATUS=$(kubectl wait -n $OSDU_GCP_HELM_NAMESPACE --for=condition=Ready pod/$POD --timeout=300s)
    - echo $STATUS
    - if [[ "$STATUS" != *"met"* ]]; then echo "POD didn't start correctly" ; exit 1 ; fi
  rules:
    - if: '$OSDU_GCP == "true" && $CI_COMMIT_BRANCH =~ /^release/'
      when: on_success
    - if: '$OSDU_GCP == "true" && $CI_COMMIT_TAG'
      when: on_success
    # The variable DEV2="true" should be specified manually in GitLab before running a pipeline to test this job against a protected branch
    - if: '$OSDU_GCP == "true" && $DEV2 == "true"'
      when: on_success

.osdu-gcp-test-python:
  tags: ["osdu-small"]
  extends: .osdu-gcp-variables
  variables:
    # Service Accounts for running integration tests
    INTEGRATION_TESTER: $OSDU_GCP_INTEGRATION_TESTER
  stage: integration
  only:
    variables:
      - $OSDU_GCP == 'true'
    refs:
      - branches
      - main
      - merge_requests

.osdu-gcp-dev2-test-python:
  tags: ["osdu-small"]
  extends:
    - .osdu-gcp-dev2-variables
  variables:
    # Service Accounts for running integration tests
    INTEGRATION_TESTER: $OSDU_GCP_INTEGRATION_TESTER
  stage: integration
  rules:
    - if: '$OSDU_GCP == "true" && $OSDU_GCP_INT_TEST_TYPE == "python" && $CI_COMMIT_BRANCH =~ /^release/'
      when: on_success
    - if: '$OSDU_GCP == "true" && $OSDU_GCP_INT_TEST_TYPE == "python" && $CI_COMMIT_TAG'
      when: on_success
    # The variable DEV2="true" should be specified manually in GitLab before running a pipeline to test this job against a protected branch
    - if: '$OSDU_GCP == "true" && $OSDU_GCP_INT_TEST_TYPE == "python" && $DEV2 == "true"'
      when: on_success
