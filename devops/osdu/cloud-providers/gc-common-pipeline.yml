variables:
  GC_GCR_REGISTRY: "gcr.io/osdu-anthos"
  APP_VERSION: "$GC_HELM_PACKAGE_VERSION-SNAPSHOT"
  
.common:
  script:
    - gcloud auth activate-service-account --key-file $GC_DEPLOY_FILE
    - gcloud config set project $GC_PROJECT
    - gcloud components install kubectl --quiet
    - export USE_GKE_GCLOUD_AUTH_PLUGIN=True
    - gcloud container clusters get-credentials $GC_CLUSTER --zone $GC_ZONE --project $GC_PROJECT
    - curl https://get.helm.sh/helm-v3.9.0-linux-amd64.tar.gz -s -o helm.tgz; tar -zxf helm.tgz; mv linux-amd64/helm /usr/local/bin/
    - apk update && apk add jq
    - >
      if helm status $SEISMIC_GC_HELM_DEPLOYMENT_SERVICE -n $GC_HELM_NAMESPACE;
      then
        HELM_REVISION=$(helm history $SEISMIC_GC_HELM_DEPLOYMENT_SERVICE -o json | jq '.[] | select(.status == "pending-upgrade").revision')
        if [[ ! -z "$HELM_REVISION" ]]; then kubectl delete secret sh.helm.release.v1.$SEISMIC_GC_HELM_DEPLOYMENT_SERVICE.v$HELM_REVISION; fi
      fi

.common-dev2:
  script:
    - gcloud auth activate-service-account --key-file $GC_DEV2_DEPLOY_FILE
    - gcloud config set project $GC_PROJECT
    - gcloud components install kubectl --quiet
    - export USE_GKE_GCLOUD_AUTH_PLUGIN=True
    - gcloud container clusters get-credentials $GC_CLUSTER --zone $GC_ZONE --project $GC_PROJECT
    - curl https://get.helm.sh/helm-v3.9.0-linux-amd64.tar.gz -s -o helm.tgz; tar -zxf helm.tgz; mv linux-amd64/helm /usr/local/bin/
    - apk update && apk add jq
    - >
      if helm status $SEISMIC_GC_HELM_DEPLOYMENT_SERVICE -n $GC_HELM_NAMESPACE;
      then
        HELM_REVISION=$(helm history $SEISMIC_GC_HELM_DEPLOYMENT_SERVICE -o json | jq '.[] | select(.status == "pending-upgrade").revision')
        if [[ ! -z "$HELM_REVISION" ]]; then kubectl delete secret sh.helm.release.v1.$SEISMIC_GC_HELM_DEPLOYMENT_SERVICE.v$HELM_REVISION; fi
      fi

.common-preship:
  script:
    - gcloud auth activate-service-account --key-file $GC_PRESHIP_DEPLOY_FILE
    - gcloud config set project $GC_PROJECT
    - gcloud components install kubectl --quiet
    - export USE_GKE_GCLOUD_AUTH_PLUGIN=True
    - gcloud container clusters get-credentials $GC_CLUSTER --zone $GC_ZONE --project $GC_PROJECT
    - curl https://get.helm.sh/helm-v3.9.0-linux-amd64.tar.gz -s -o helm.tgz; tar -zxf helm.tgz; mv linux-amd64/helm /usr/local/bin/
    - apk update && apk add jq
    - >
      if helm status $SEISMIC_GC_HELM_DEPLOYMENT_SERVICE -n $GC_HELM_NAMESPACE;
      then
        HELM_REVISION=$(helm history $SEISMIC_GC_HELM_DEPLOYMENT_SERVICE -o json | jq '.[] | select(.status == "pending-upgrade").revision')
        if [[ ! -z "$HELM_REVISION" ]]; then kubectl delete secret sh.helm.release.v1.$SEISMIC_GC_HELM_DEPLOYMENT_SERVICE.v$HELM_REVISION; fi
      fi

.common-anthos:
  script:
    - gcloud auth activate-service-account --key-file $GC_ANTHOS_DEPLOY_FILE
    - gcloud config set project $GC_PROJECT
    - gcloud components install kubectl --quiet
    - export USE_GKE_GCLOUD_AUTH_PLUGIN=True
    - gcloud container clusters get-credentials $GC_CLUSTER --zone $GC_ZONE --project $GC_PROJECT
    - curl https://get.helm.sh/helm-v3.9.0-linux-amd64.tar.gz -s -o helm.tgz; tar -zxf helm.tgz; mv linux-amd64/helm /usr/local/bin/
    - apk update && apk add jq
    - >
      if helm status $SEISMIC_GC_HELM_DEPLOYMENT_SERVICE -n $GC_HELM_NAMESPACE;
      then
        HELM_REVISION=$(helm history $SEISMIC_GC_HELM_DEPLOYMENT_SERVICE -o json | jq '.[] | select(.status == "pending-upgrade").revision')
        if [[ ! -z "$HELM_REVISION" ]]; then kubectl delete secret sh.helm.release.v1.$SEISMIC_GC_HELM_DEPLOYMENT_SERVICE.v$HELM_REVISION; fi
      fi

.define_version:
  script:
    - >
      if [[ -z $CI_COMMIT_TAG ]] && [[ $CI_COMMIT_BRANCH =~ ^release\/[0-9]{1,2}.[0-9]{1,2}$ ]];
      then
        RELEASE_VERSION=$(echo $CI_COMMIT_BRANCH | sed "s?^release/??");
        VERSION="$RELEASE_VERSION.0-release";
      elif [[ $CI_COMMIT_TAG =~ ^v[0-9]{1,2}\.[0-9]{1,2}\.[0-9]{1,2}$ ]];
      then
        VERSION=$(echo $CI_COMMIT_TAG | sed "s/^v//");
      else
        VERSION="0.0.0-invalid";
      fi

.define_app_version:
  script:
    - >
      if [[ "$CI_COMMIT_TAG" != "" ]];
      then APP_VERSION=$(echo $CI_COMMIT_TAG | sed "s/^v//");
      fi

# Requires variables: IMAGE_TAG, IMAGE_NAME
.substitute_image_in_helm:
  script:
    - wget -q https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq && chmod +x /usr/bin/yq
    - IMAGE="$CI_REGISTRY_IMAGE/$IMAGE_NAME:$IMAGE_TAG" yq -i '.data.image = env(IMAGE)' $SEISMIC_GC_HELM_DEPLOYMENT_DIR/values.yaml
    - yq -e '.data | has("bootstrapImage")' $SEISMIC_GC_HELM_DEPLOYMENT_DIR/values.yaml &>/dev/null && BOOTSTRAP_IMAGE="$CI_REGISTRY_IMAGE/$IMAGE_BOOTSTRAP_NAME:$IMAGE_TAG" yq -i '.data.bootstrapImage = env(BOOTSTRAP_IMAGE)' $SEISMIC_GC_HELM_DEPLOYMENT_DIR/values.yaml
    - cat $SEISMIC_GC_HELM_DEPLOYMENT_DIR/values.yaml | grep -i image

.set_image_name:
  script:
    - >
      if echo $CI_COMMIT_REF_NAME | grep -Eq "^release\/[0-9]{1,2}.[0-9]{1,2}$";
      then
        export IMAGE_NAME=$IMAGE_NAME-release;
      fi
    - >
      if [[ "$CI_COMMIT_TAG" != "" ]];
      then
        IMAGE_TAG="$CI_COMMIT_TAG";
      elif [[ "$CI_COMMIT_REF_NAME" == "$CI_DEFAULT_BRANCH" ]];
      then
        IMAGE_TAG="latest";
      else
        IMAGE_TAG="$CI_COMMIT_SHORT_SHA";
      fi

.verify_deploy:
  script:
    - echo ----- Verify Deployment -----
    - kubectl rollout status deployment.v1.apps/$SEISMIC_GC_SERVICE -n $GC_HELM_NAMESPACE --timeout=900s
    - POD=$(kubectl get pod --sort-by=.metadata.creationTimestamp -n $GC_HELM_NAMESPACE | grep $SEISMIC_GC_SERVICE | tail -1 | awk '{print $1}')
    - STATUS=$(kubectl wait -n $GC_HELM_NAMESPACE --for=condition=Ready pod/$POD --timeout=1200s)
    - echo $STATUS
    - >
      if [[ "$STATUS" != *"met"* ]];
      then echo "POD didn't start correctly"; exit 1; fi


.gc-helm-charts-gitlab:
  stage: build
  tags: ["osdu-small"]
  image:
    name: alpine/helm:3.9.0
    entrypoint: [""]
  before_script:
    - helm registry login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - !reference [.set_image_name, script]
    - !reference [.substitute_image_in_helm, script]
  script:
    - !reference [.define_app_version, script]
    - helm package $SEISMIC_GC_HELM_DEPLOYMENT_DIR -u --version $GC_HELM_PACKAGE_VERSION-$IMAGE_TAG --app-version $APP_VERSION
    - helm push gc-$SEISMIC_GC_SERVICE-deploy-$GC_HELM_PACKAGE_VERSION-$IMAGE_TAG.tgz oci://$CI_REGISTRY_IMAGE/gc-helm
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release/"
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - if: '$GC == "1"'
      when: on_success

.gc-helm-charts-release-gitlab:
  stage: build
  tags: ["osdu-small"]
  image:
    name: alpine/helm:3.9.0
    entrypoint: [""]
  before_script:
    - helm registry login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - !reference [.set_image_name, script]
    - !reference [.substitute_image_in_helm, script]
  script:
    - !reference [.define_version, script]
    - helm package $SEISMIC_GC_HELM_DEPLOYMENT_DIR -u --version $VERSION --app-version $VERSION
    - helm push gc-$SEISMIC_GC_SERVICE-deploy-$VERSION.tgz oci://$CI_REGISTRY_IMAGE/gc-helm
  rules:
    - if: '$GC == "1" && $CI_COMMIT_BRANCH =~ /^release/'
      when: on_success
    - if: '$GC == "1" && $CI_COMMIT_TAG'
      when: on_success

.gc-helm-charts-release-gcr:
  stage: build
  tags: ["osdu-small"]
  image:
    name: alpine/helm:3.9.0
    entrypoint: [""]
  before_script:
    - cat $GC_DEPLOY_FILE | helm registry login -u _json_key --password-stdin https://gcr.io
    - !reference [.substitute_image_in_helm, script]
  script:
    - !reference [.define_version, script]
    - helm package $SEISMIC_GC_HELM_DEPLOYMENT_DIR -u --version $VERSION --app-version $VERSION
    - helm push gc-$SEISMIC_GC_SERVICE-deploy-$VERSION.tgz oci://$GC_GCR_REGISTRY/helm
  rules:
    - if: '$GC == "1" && $CI_COMMIT_BRANCH =~ /^release/'
      when: on_success
    - if: '$GC == "1" && $CI_COMMIT_TAG'
      when: on_success


.gc-containerize-gitlab:
  stage: containerize
  tags: ["osdu-medium"]
  extends: .gc-variables
  image: docker:19.03
  cache: {}
  script:
    - export EXTRA_DOCKER_TAG=""
    - !reference [.set_image_name, script]
    - >
      if [[ "$CI_COMMIT_TAG" != "" ]];
      then EXTRA_DOCKER_TAG="-t $CI_REGISTRY_IMAGE/$IMAGE_NAME:$CI_COMMIT_TAG";
      elif [[ "$CI_COMMIT_REF_NAME" = "$CI_DEFAULT_BRANCH" ]];
      then EXTRA_DOCKER_TAG="-t $CI_REGISTRY_IMAGE/$IMAGE_NAME:latest"; fi
    - docker build -t $CI_REGISTRY_IMAGE/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA $EXTRA_DOCKER_TAG --file $SEISMIC_GC_DOCKERFILE_NAME .
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE/$IMAGE_NAME
  rules:
    - if: '$GC == "1"'
      when: on_success

.gc-containerize-gcr:
  stage: containerize
  tags: ["osdu-medium"]
  extends: .gc-variables
  image: docker:19.03
  cache: {}
  script:
    - docker build -t $GC_GCR_REGISTRY/$SEISMIC_GC_SERVICE/$IMAGE_NAME:$CI_COMMIT_TAG -f $SEISMIC_GC_DOCKERFILE_NAME .
    - docker push $GC_GCR_REGISTRY/$SEISMIC_GC_SERVICE/$IMAGE_NAME
  rules:
    - if: "$GC == '1' && $CI_COMMIT_TAG"
      when: on_success

.gc-deploy:
  stage: deploy
  retry: 1
  tags: ["osdu-small"]
  extends: .gc-variables
  image: gcr.io/google.com/cloudsdktool/cloud-sdk:alpine
  cache: {}
  script:
    - !reference [.common, script]
    - !reference [.define_version, script]
    - !reference [.set_image_name, script]
    - >
      helm upgrade $SEISMIC_GC_HELM_DEPLOYMENT_SERVICE oci://$CI_REGISTRY_IMAGE/gc-helm/gc-$SEISMIC_GC_SERVICE-deploy
      --version $GC_HELM_PACKAGE_VERSION-$IMAGE_TAG
      --install
      --create-namespace
      --namespace=$GC_HELM_NAMESPACE
      --wait
      --timeout=1200s
      --history-max=3
      --set data.image=$CI_REGISTRY_IMAGE/gc-$SEISMIC_GC_SERVICE:$CI_COMMIT_SHORT_SHA
      --set data.serviceAccountName=$SEISMIC_GC_SERVICE-k8s
      --set data.domain=$DOMAIN
    - !reference [.verify_deploy, script]
  rules:
    - if: '$GC == "1" && $CI_COMMIT_BRANCH =~ /^release/'
      when: on_success
    - if: '$GC == "1" && $CI_COMMIT_TAG'
      when: on_success

.gc-dev2-deploy:
  stage: deploy
  retry: 1
  tags: ["osdu-small"]
  extends: .gc-dev2-variables
  image: gcr.io/google.com/cloudsdktool/cloud-sdk:alpine
  script:
    - !reference [.common-dev2, script]
    - !reference [.define_version, script]
    - !reference [.set_image_name, script]
    - helm repo add $SEISMIC_GC_SERVICE ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/stable
    - >
      helm upgrade $SEISMIC_GC_HELM_DEPLOYMENT_SERVICE oci://$CI_REGISTRY_IMAGE/gc-helm/gc-$SEISMIC_GC_SERVICE-deploy
      --version $GC_HELM_PACKAGE_VERSION-$IMAGE_TAG
      --install
      --create-namespace
      --namespace=$GC_HELM_NAMESPACE
      --wait
      --history-max=3
      --set data.image=$CI_REGISTRY_IMAGE/$IMAGE_NAME:${CI_COMMIT_TAG:-$CI_COMMIT_SHORT_SHA}
      --set data.imagePullPolicy=Always
      --set data.serviceAccountName=$SEISMIC_GC_SERVICE-k8s
      --set data.domain=$DOMAIN
    - !reference [.verify_deploy, script]
  rules:
    - if: '$GC == "1" && $CI_COMMIT_BRANCH =~ /^release/'
      when: on_success
    - if: '$GC == "1" && $CI_COMMIT_TAG'
      when: on_success

.gc-preship-deploy:
  stage: deploy_preship
  retry: 1
  tags: ["osdu-small"]
  extends: .gc-preship-variables
  image: gcr.io/google.com/cloudsdktool/cloud-sdk:alpine
  script:
    - !reference [.common-preship, script]
    - !reference [.define_version, script]
    - !reference [.set_image_name, script]
    - helm repo add $SEISMIC_GC_SERVICE ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/stable
    - >
      helm upgrade $SEISMIC_GC_HELM_DEPLOYMENT_SERVICE $SEISMIC_GC_HELM_DEPLOYMENT_DIR --version $VER
      --install
      --create-namespace
      --namespace=$GC_HELM_NAMESPACE
      --wait
      --history-max=3
      --set data.image=$CI_REGISTRY_IMAGE/$IMAGE_NAME:${CI_COMMIT_TAG:-$CI_COMMIT_SHORT_SHA}
      --set data.imagePullPolicy=Always
      --set data.serviceAccountName=$SEISMIC_GC_SERVICE-k8s
    - !reference [.verify_deploy, script]
  rules:
    - if: '$GC == "1" && $CI_COMMIT_TAG'
      when: manual
      allow_failure: true
    - if: '$GC == "1" && $CI_COMMIT_BRANCH =~ /^release/'
      when: manual
      allow_failure: true

.gc-anthos-deploy:
  stage: deploy
  retry: 1
  tags: ["osdu-small"]
  extends: .gc-anthos-variables
  image: gcr.io/google.com/cloudsdktool/cloud-sdk:alpine
  script:
    - gcloud auth activate-service-account --key-file $GC_ANTHOS_DEPLOY_FILE
    - !reference [.common-anthos, script]
    - !reference [.define_version, script]
    - !reference [.set_image_name, script]
    - >
      helm upgrade $SEISMIC_GC_HELM_DEPLOYMENT_SERVICE oci://$CI_REGISTRY_IMAGE/gc-helm/gc-$SEISMIC_GC_SERVICE-deploy
      --version $GC_HELM_PACKAGE_VERSION-$IMAGE_TAG
      --install
      --create-namespace
      --namespace=$GC_HELM_NAMESPACE
      --wait
      --history-max=3
      --set data.cloudProvider=anthos
      --set data.image=$CI_REGISTRY_IMAGE/gc-$SEISMIC_GC_SERVICE:$CI_COMMIT_SHORT_SHA
      --set data.serviceAccountName=$SEISMIC_GC_SERVICE
      --set data.domain=$DOMAIN
      --set conf.onPremEnabled=true
    - !reference [.verify_deploy, script]
  rules:
    - if: '$GC == "1" && $CI_COMMIT_BRANCH =~ /^release/'
      when: on_success
    - if: '$GC == "1" && $CI_COMMIT_TAG'
      when: on_success

.gc-test-python:
  stage: integration
  tags: ["osdu-small"]
  extends: .gc-variables
  variables:
    # Service Accounts for running integration tests
    INTEGRATION_TESTER: $GC_INTEGRATION_TESTER
  rules:
    - if: '$GC == "1" && $CI_COMMIT_BRANCH =~ /^release/'
      when: on_success
    - if: '$GC == "1" && $CI_COMMIT_TAG'
      when: on_success

.gc-dev2-test-python:
  stage: integration
  tags: ["osdu-small"]
  extends:
    - .gc-dev2-variables
  variables:
    # Service Accounts for running integration tests
    INTEGRATION_TESTER: $GC_INTEGRATION_TESTER
  rules:
    - if: '$GC == "1" && $CI_COMMIT_BRANCH =~ /^release/'
      when: on_success
    - if: '$GC == "1" && $CI_COMMIT_TAG'
      when: on_success

.gc-anthos-test-python:
  stage: integration
  tags: ["osdu-small"]
  extends: .gc-anthos-variables
  rules:
    - if: '$GC == "1" && $CI_COMMIT_BRANCH =~ /^release/'
      when: on_success
    - if: '$GC == "1" && $CI_COMMIT_TAG'
      when: on_success
