parameters:
  serviceName: ""
  providerName: ""
  environment: ""
  secureFile: ""
  installRequirements: false

steps:
  - task: DownloadSecureFile@1
    name: 'downloadKey'
    displayName: 'Download key'
    condition: and(eq('${{ parameters.providerName }}', 'GCP'),${{ parameters.installRequirements }})
    inputs:
      secureFile: ${{ parameters.secureFile }}
      retryCount: 5
  - task: Bash@3
    displayName: "Install requirements"
    condition: and(eq('${{ parameters.providerName }}', 'Azure'),${{ parameters.installRequirements }})
    inputs:
      targetType: "inline"
      script: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | bash
  - task: Bash@3
    displayName: "Install requirements"
    condition: and(eq('${{ parameters.providerName }}', 'GCP'),${{ parameters.installRequirements }})
    inputs:
      targetType: "inline"
      script: |
        curl https://sdk.cloud.google.com > install.sh
        bash install.sh --disable-prompts || true
  - task: AzureCLI@1
    name: PushRuntimeImage
    displayName: 'Push Runtime Image'
    condition: and(succeeded(), eq('${{ parameters.providerName }}', 'Azure'))
    env:
      IMAGE: $(CONTAINER_REGISTRY_NAME).azurecr.io/${{ parameters.imageRepoName }}:$(Build.BuildId)-${{ parameters.environment }}
    inputs:
      azureSubscription: '$(SERVICE_CONNECTION_NAME)'
      addSpnToEnvironment: true
      scriptLocation: inlineScript
      inlineScript: |
       !/usr/bin/env bash
        set -euo pipefail

        echo "Logging in to the ACR Registry"
        echo "------------------------------------"
        az acr login -n $(CONTAINER_REGISTRY_NAME)

        echo "------------------------------------"
        docker load --input ${{ parameters.providerName }}_seistore-svc-runtime/$(utest.runtime.image).tar
        docker tag $(utest.runtime.image) $(CONTAINER_REGISTRY_NAME).azurecr.io/$(utest.runtime.image):$(Build.SourceBranchName)-$(Build.BuildNumber)
        
        docker push $(CONTAINER_REGISTRY_NAME).azurecr.io/$(utest.runtime.image):$(Build.SourceBranchName)-$(Build.BuildNumber)
  - task: Bash@3
    displayName: "Push Runtime Image"
    condition: and(succeeded(), eq('${{ parameters.providerName }}', 'GCP'))
    inputs:
      targetType: "inline"
      script: |
        gcloud auth activate-service-account --key-file $(downloadKey.secureFilePath) --project "$(gcp_project)"
        gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://$(CONTAINER_REGISTRY_NAME)
        docker load --input ${{ parameters.providerName }}_seistore-svc-runtime/$(utest.runtime.image).tar
        docker tag $(utest.runtime.image) $(CONTAINER_REGISTRY_NAME)/$(container_registry_path)/$(utest.runtime.image):$(Build.SourceBranchName)-$(Build.BuildNumber)
        cat $(downloadKey.secureFilePath) | docker login -u _json_key --password-stdin https://$(CONTAINER_REGISTRY_NAME)
        docker push $(CONTAINER_REGISTRY_NAME)/$(container_registry_path)/$(utest.runtime.image):$(Build.SourceBranchName)-$(Build.BuildNumber)