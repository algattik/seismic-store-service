parameters:
  serviceName: ""
  branchName: ""
  chartPath: ""
  skipDeploy: false
  hldRegPath: ""
  generationPath: "generated"
  manifestRepo: ""
  fluxEnabled: false

steps:
  - task: AzureCLI@1
    name: LoadSP
    displayName: 'Load SP'
    condition: |
      eq(${{ parameters.fluxEnabled }},true)
    inputs:
      azureSubscription: '$(SERVICE_CONNECTION_NAME)'
      addSpnToEnvironment: true
      scriptLocation: inlineScript
      inlineScript: |
       !/usr/bin/env bash
        set -euo pipefail
        
        echo "##vso[task.setvariable variable=ARM_CLIENT_ID]${servicePrincipalId}"
        echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET]${servicePrincipalKey}"
        echo "##vso[task.setvariable variable=ARM_TENANT_ID]${tenantId}"
  - task: Bash@3
    displayName: "Flux Commit"
    condition: |
      eq(${{ parameters.fluxEnabled }},true)
    env:
      CHART_PATH: ${{parameters.chartPath}}
      BRANCH_NAME: ${{ parameters.branchName }}
      SKIP_DEPLOY: ${{parameters.skipDeploy}}
      SERVICE_NAME: ${{parameters.serviceName}}
      HLD_REG_PATH: ${{parameters.hldRegPath}}
      GENERATION_PATH: ${{parameters.generationPath}}
      BASE_NAME_SR: $(base-name-sr)
      AZURE_CLIENT_ID: $(ARM_CLIENT_ID)
      AZURE_SECRET: $(ARM_CLIENT_SECRET)
      AZURE_TENANT: $(ARM_TENANT_ID)
      runtimeTag: "$(Build.SourceBranchName)-$(Build.BuildNumber)"
      MANIFEST_REPO: ${{ parameters.manifestRepo }}
    inputs:
      targetType: "inline"
      script: |
        #!/usr/bin/env bash
        set -euo pipefail

        az login --service-principal --username $AZURE_CLIENT_ID --password $AZURE_SECRET --tenant $AZURE_TENANT
        az aks get-credentials -g $BASE_NAME_SR-rg -n $BASE_NAME_SR-aks

        GITOPS_MANIFEST_DIRECTORY=$(Build.SourcesDirectory)/$(Build.Repository.Name)/$CHART_PATH/$GENERATION_PATH
        cd $(Build.SourcesDirectory)/$MANIFEST_REPO

        function configure_git_profile() {
          git config --global user.email "gitops@azure.com"
          git config --global user.name "osdu bot"
          git config --global pull.ff only
        }

        function git_checkout() {
          echo "GIT CHECKOUT $BRANCH_NAME"

          if ! git checkout "$BRANCH_NAME" ; then
              git checkout -b "$BRANCH_NAME"
          fi

          echo "GIT STATUS"
          git status
        }

        function git_commit() {
          echo "COPY YAML FILES FROM $GITOPS_MANIFEST_DIRECTORY..."
          cp -rf $GITOPS_MANIFEST_DIRECTORY .

          echo "SKIP DEPLOY: $SKIP_DEPLOY, HLD-REG: $HLD_REG_PATH"
          if [[ $SKIP_DEPLOY == true ]]
          then
              echo "***********************"
              echo "FLUX DEPLOYMENT SKIPPED"
              echo "***********************"
          else
              echo "COPYING YAML FILES TO $HLD_REG_PATH/$SERVICE_NAME"
              mkdir -p ./$HLD_REG_PATH/$SERVICE_NAME
              rm -rf ./$HLD_REG_PATH/$SERVICE_NAME/*
              cp -rf $GITOPS_MANIFEST_DIRECTORY/$SERVICE_NAME/templates/* ./$HLD_REG_PATH/$SERVICE_NAME
          fi
            
          git add -A

          if [[ $(git status --porcelain) ]]; then
              echo "GIT COMMIT"
              git commit -m "Updated k8s manifest files post commit: $(Build.SourceVersionMessage)"
          else
              echo "NOTHING TO COMMIT"
          fi
        }

        function git_pull(){
          if [[ $(git ls-remote --heads origin $BRANCH_NAME | wc -l) -eq 1 ]]; then
             git pull origin $BRANCH_NAME
          fi
        }

        function git_push(){
          git push origin $BRANCH_NAME
        }

        configure_git_profile
        git_checkout
        git_commit
        git_pull
        git_push        
        sleep 9m
        kubectl rollout status deployment.v1.apps/$SERVICE_NAME -n osdu --timeout=900s
