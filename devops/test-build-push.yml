#  Copyright Â© Microsoft Corporation
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

#####################
# README: Defines a job for running unit tests, building runtime, and pushing to ACR.
#         Runtime build requires that the builder image is available in the specified ACR.
#####################

trigger:
  batch: false
  branches:
    include:
    - '*'
    exclude:
    - master
  paths:
    include:
    - '*'
    exclude:
    - /.devcontainer/*
    - /**/*.md

pr:
  branches:
    include:
    - '*'
    exclude:
    - master
  paths:
    include:
    - '*'
    exclude:
    - /.devcontainer/*
    - /**/*.md/

variables:
- ${{ if contains(variables['Build.SourceBranch'], '/release/') }}:
  - name: 'ENVIRONMENT'
    value: ${{ variables['Build.SourceBranchName'] }}
- ${{ if not(contains(variables['Build.SourceBranch'], '/release/')) }}:
  - name: 'ENVIRONMENT'
    value: 'sdmsevd'
- name: 'builderImage'
  value: '$(CONTAINER_REGISTRY_NAME).azurecr.io/$(BUILD_IMAGE)'
- name: 'runtimeImageTag'
  value: '$(Build.BuildId)-$(ENVIRONMENT)'
- name: 'runtimeRepo'
  value: 'sdms-runtime'
- name: 'runtimeImage'
  value: '$(CONTAINER_REGISTRY_NAME).azurecr.io/$(runtimeRepo)'

jobs:
- job: Test_Build_Push
  pool:
    vmImage: ubuntu-18.04

  steps:
  - task: Docker@2
    inputs:
      containerRegistry: '$(ACR_SERVICE_CONNECTION)'
      command: 'login'
  # - task: Bash@3
  #   displayName: 'Run unit tests'
  #   condition: succeeded()
  #   inputs:
  #     targetType: 'inline'
  #     script: |
  #       #!/usr/bin/env bash
  #       set -euo pipefail

  #       echo "Pulling ${{ variables.builderImage }}"
  #       echo "------------------------------------"
  #       docker pull ${{ variables.builderImage }}

  #       echo "Running unit tests"
  #       echo "------------------------------------"
  #       docker run --name=svctests -v=$(pwd):/test -w=/test ${{ variables.builderImage }} npm run test-automation
  # - task: PublishTestResults@1
  #   inputs:
  #     testResultsFiles: '$(System.DefaultWorkingDirectory)/test-results.xml'
  # - task: PublishCodeCoverageResults@1
  #   inputs:
  #     codeCoverageTool: 'Cobertura'
  #     summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml'
  #     pathToSources: '$(System.DefaultWorkingDirectory)'
  #     failIfCoverageEmpty: true
  - task: Docker@2
    inputs:
      containerRegistry: '$(ACR_SERVICE_CONNECTION)'
      command: 'build'
      repository: '$(runtimeRepo)'
      Dockerfile: '**/docker/runtime.Dockerfile'
      tags: '$(runtimeImageTag)'
      buildContext: '$(System.DefaultWorkingDirectory)'
      arguments: '--build-arg docker_builder_image=${{ variables.builderImage }}'
  - task: Docker@2
    inputs:
      containerRegistry: '$(ACR_SERVICE_CONNECTION)'
      repository: '$(runtimeRepo)'
      tags: '$(runtimeImageTag)'
      command: 'push'
  - script: |
      echo "##vso[task.setvariable variable=IMAGE_VERSION;]${{ variables.runtimeImageTag }}" >>  $(Build.ArtifactStagingDirectory)/pipeline.env
      echo "##vso[task.setvariable variable=K8_ENV;]$(ENVIRONMENT)" >>  $(Build.ArtifactStagingDirectory)/pipeline.env
      echo "##vso[task.setvariable variable=ACR_REPO;]${{ variables.runtimeImage }}" >>  $(Build.ArtifactStagingDirectory)/pipeline.env
    displayName: 'Pipe artifact variables to pass for downstream service'
  - task: PublishBuildArtifacts@1
    displayName: publish variables
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'variables'
      publishLocation: 'Container'