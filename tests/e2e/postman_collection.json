{
	"info": {
		"_postman_id": "642c426d-a551-4913-9cdb-ad6e0c2c9a79",
		"name": "seismic-store-e2e-tests-gitlab",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "general",
			"item": [
				{
					"name": "STATUS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"service OK\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (pm.environment.get(\"VCS_Provider\") === 'gitlab') {\r",
									"    // create dummy variable\r",
									"    postman.setEnvironmentVariable('adminEmail', 'dummy@dummy.com');\r",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/svcstatus",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"svcstatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "ACCESS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(jsonData.status).to.eql(\"running\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/svcstatus/access",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"svcstatus",
								"access"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "tenant",
			"item": [
				{
					"name": "TENANT GET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Tenant details\", function () {",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"tenant\"));",
									"    pm.expect(jsonData.gcpid).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/tenant/{{tenant}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"tenant",
								"{{tenant}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET sdpath",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Body is correct\", function () {",
									"    pm.response.to.have.body(\"sd://\" + pm.environment.get(\"datapartition\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/tenant/sdpath?datapartition={{datapartition}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"tenant",
								"sdpath"
							],
							"query": [
								{
									"key": "datapartition",
									"value": "{{datapartition}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "subproject",
			"item": [
				{
					"name": "SUBPROJECT GET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 404 or 403\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,404,403]);",
									"});",
									"",
									"if (pm.environment.get(\"VCS_Provider\") === 'gitlab') {",
									"    var jsonData = pm.response.json();",
									"    if (pm.expect(jsonData.name).to.eql(pm.environment.get(\"subproject\"))) {",
									"        postman.setNextRequest(\"SUBPROJECT LIST\");",
									"    } else {",
									"        postman.setNextRequest(\"SUBPROJECT REGISTER Gitlab\");",
									"    };",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/subproject/tenant/{{tenant}}/subproject/{{subproject}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"subproject",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SUBPROJECT DELETE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 404 or 403\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,404,403]);",
									"});",
									"",
									"if (pm.response.headers.get('service-provider') !== 'google') {",
									"    postman.setNextRequest(\"SUBPROJECT REGISTER\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/subproject/tenant/{{tenant}}/subproject/{{subproject}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"subproject",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SUBPROJECT REGISTER NEGATIVE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "ltag",
								"value": "slb-public-usa-seistore-1"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"storage_class\": \"REGIONAL\",\n\t\"storage_location\": \"US-CENTRAL1\"\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/subproject/tenant/{{tenant}}/subproject/{{subprojectLongName}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"subproject",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subprojectLongName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SUBPROJECT GET New",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Subproject created\", function () {",
									"    var child = Object.keys(jsonData);",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"subproject\"));",
									"    pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"    pm.expect(jsonData.ltag).to.exist;",
									"    pm.expect(jsonData.gcs_bucket).to.exist;",
									"});",
									"",
									"if (pm.environment.get(\"VCS_Provider\") !== 'gitlab') {",
									"    postman.setNextRequest(\"SUBPROJECT GET New\");",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "ltag",
								"value": "{{legaltag01}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"admin\": \"{{adminEmail}}\",\n\t\"storage_class\": \"REGIONAL\",\n\t\"storage_location\": \"US-CENTRAL1\"\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/subproject/tenant/{{tenant}}/subproject/{{subproject}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"subproject",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SUBPROJECT REGISTER Gitlab",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Subproject created\", function () {",
									"    var child = Object.keys(jsonData);",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"subproject\"));",
									"    pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"    pm.expect(jsonData.ltag).to.exist;",
									"    pm.expect(jsonData.gcs_bucket).to.exist;",
									"});",
									"",
									"if (pm.environment.get(\"VCS_Provider\") !== 'gitlab') {",
									"    postman.setNextRequest(\"SUBPROJECT GET New\");",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "ltag",
								"value": "{{legaltag01}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"admin\": \"{{adminEmail}}\",\n\t\"storage_class\": \"REGIONAL\",\n\t\"storage_location\": \"US-CENTRAL1\"\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/subproject/tenant/{{tenant}}/subproject/{{subproject}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"subproject",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SUBPROJECT REGISTER Gitlab",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Subproject created\", function () {",
									"    var child = Object.keys(jsonData);",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"subproject\"));",
									"    pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"    pm.expect(jsonData.ltag).to.exist;",
									"    pm.expect(jsonData.gcs_bucket).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "ltag",
								"value": "{{legaltag01}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"storage_class\": \"REGIONAL\",\n\t\"storage_location\": \"US-CENTRAL1\"\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/subproject/tenant/{{tenant}}/subproject/{{subproject}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"subproject",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SUBPROJECT GET New",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Subproject created\", function () {",
									"    var child = Object.keys(jsonData);",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"subproject\"));",
									"    pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"    pm.expect(jsonData.ltag).to.eql(pm.environment.get(\"legaltag01\"));",
									"    pm.expect(jsonData.gcs_bucket).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "ltag",
								"value": "{{legaltag01}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"storage_class\": \"REGIONAL\",\n\t\"storage_location\": \"US-CENTRAL1\"\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/subproject/tenant/{{tenant}}/subproject/{{subproject}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"subproject",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SUBPROJECT GET New",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate Subproject Details\", function () {",
									"    var child = Object.keys(jsonData);",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"subproject\"));",
									"    pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"    pm.expect(jsonData.ltag).to.eql(pm.environment.get(\"legaltag01\"));",
									"    pm.expect(jsonData.gcs_bucket).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/subproject/tenant/{{tenant}}/subproject/{{subproject}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"subproject",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SUBPROJECT LIST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Find the subproject in list\", function () {",
									"    var subproject = _.find(pm.response.json(), { ",
									"    name: pm.environment.get(\"subproject\")",
									"    });",
									"    pm.expect(subproject.name).to.eql(pm.environment.get(\"subproject\"));",
									"});",
									"",
									"pm.test('Subproject details are present in response', () => {",
									"    _.each(pm.response.json(), (item) => {",
									"        pm.expect(item).to.have.property('gcs_bucket');",
									"        pm.expect(item).to.have.property('ltag');",
									"        pm.expect(item).to.have.property('tenant');",
									"        pm.expect(item).to.have.property('name');",
									"        ",
									"    });",
									"    pm.expect(jsonData.length).to.be.above(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/subproject/tenant/{{tenant}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"subproject",
								"tenant",
								"{{tenant}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SUBPROJECT PATCH",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Subproject created\", function () {",
									"    var child = Object.keys(jsonData);",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"subproject\"));",
									"    pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"    pm.expect(jsonData.ltag).to.eql(pm.environment.get(\"legaltag02\"));",
									"    pm.expect(jsonData.gcs_bucket).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "ltag",
								"value": "{{legaltag02}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/subproject/tenant/{{tenant}}/subproject/{{subproject}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"subproject",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SUBPROJECT PATCH 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Subproject created\", function () {",
									"    var child = Object.keys(jsonData);",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"subproject\"));",
									"    pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"    pm.expect(jsonData.ltag).to.eql(pm.environment.get(\"legaltag01\"));",
									"    pm.expect(jsonData.gcs_bucket).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "ltag",
								"value": "{{legaltag01}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/subproject/tenant/{{tenant}}/subproject/{{subproject}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"subproject",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "datasets",
			"item": [
				{
					"name": "DATASET DELETE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function makeid(lenght) {\r",
									"\r",
									"    var result = '';\r",
									"    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"    var charactersLength = characters.length;\r",
									"\r",
									"    for (var index = 0; index < arguments[0]; index++) {\r",
									"    result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"pm.environment.set(\"dataset01\", makeid(8));\r",
									"pm.environment.set(\"path01\", makeid(3)+\"/\"+makeid(3)+\"/\"+makeid(3));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dataset01}}?path={{path01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dataset01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{path01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET DELETE 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function makeid(lenght) {\r",
									"\r",
									"    var result = '';\r",
									"    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"    var charactersLength = characters.length;\r",
									"\r",
									"    for (var index = 0; index < arguments[0]; index++) {\r",
									"    result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"pm.environment.set(\"dataset02\", makeid(8));\r",
									"pm.environment.set(\"path02\", makeid(3)+\"/\"+makeid(3)+\"/\"+makeid(3));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dataset02}}?path={{path02}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dataset02}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{path02}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET REGISTER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check content type\", function () {",
									"   pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"",
									"pm.test(\"Dataset name\", function () {",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"dataset01\"));",
									"});",
									"",
									"pm.test(\"tenant\", function () {",
									"    pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"});",
									"",
									"pm.test(\"subproject\", function () {",
									"    pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"});",
									"",
									"pm.test(\"path\", function () {",
									"    pm.expect(jsonData.path).to.eql(\"/\"+pm.environment.get(\"path01\")+\"/\");",
									"});",
									"",
									"pm.test(\"ltag\", function () {",
									"    pm.expect(jsonData.ltag).to.eql(pm.environment.get(\"legaltag01\"));",
									"});",
									"",
									"pm.test(\"Dates are present\", function () {",
									"    pm.expect(jsonData.created_date).to.exist;",
									"    pm.expect(jsonData.last_modified_date).to.exist;",
									"});",
									"",
									"pm.test(\"sbit_count\", function () {",
									"    pm.expect(jsonData.sbit_count).to.eql(1);",
									"});",
									"",
									"pm.test(\"Check gtag\", function () {",
									"    pm.expect(jsonData.gtags.length).to.eql(1);",
									"    pm.expect(jsonData.gtags[0]).to.eql(\"tagA\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"gtags\": [\r\n    \"tagA\"\r\n  ]\r\n} \r\n \r\n"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dataset01}}?path={{path01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dataset01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{path01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET REGISTER 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check content type\", function () {",
									"   pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Dataset name\", function () {",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"dataset02\"));",
									"});",
									"",
									"pm.test(\"tenant\", function () {",
									"    pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"});",
									"",
									"pm.test(\"subproject\", function () {",
									"    pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"});",
									"",
									"pm.test(\"path\", function () {",
									"    pm.expect(jsonData.path).to.eql(\"/\"+pm.environment.get(\"path02\")+\"/\");",
									"});",
									"",
									"pm.test(\"ltag\", function () {",
									"    pm.expect(jsonData.ltag).to.eql(pm.environment.get(\"legaltag01\"));",
									"});",
									"",
									"pm.test(\"Dates are present\", function () {",
									"    pm.expect(jsonData.created_date).to.exist;",
									"    pm.expect(jsonData.last_modified_date).to.exist;",
									"});",
									"",
									"pm.test(\"sbit_count\", function () {",
									"    pm.expect(jsonData.sbit_count).to.eql(1);",
									"});",
									"",
									"pm.test(\"Check gtag\", function () {",
									"    pm.expect(jsonData.gtags.length).to.eql(2);",
									"    pm.expect(jsonData.gtags[1]).to.eql(\"tagB\");",
									"});",
									"",
									"function makeid2(lenght) {",
									"",
									"    var result = '';",
									"    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"",
									"    for (var index = 0; index < arguments[0]; index++) {",
									"    result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"    return result;",
									"}",
									"",
									"// datasets with  paths that match the regex /^[\\/A-Za-z0-9_-]*$/g ",
									"const dataSetsWithPaths = [ {",
									"        \"name\": makeid2(8),",
									"        \"path\": \"/a0909090909/b23242/c32423\" + \"/\" + makeid2(4)",
									"    }, ",
									"    {",
									"        \"name\": makeid2(8),",
									"        \"path\": \"/AB/CD/EF\" + \"/\" + makeid2(4)",
									"    },",
									"    {",
									"        \"name\": makeid2(8),",
									"        \"path\": \"/0A0B/0C0D/0E0F0000000\" + \"/\" + makeid2(4)",
									"    }, ",
									"    {",
									"        \"name\": makeid2(8),",
									"        \"path\": \"/_0A_B/_2C_3D/4-z_A-0000\" + \"/\" + makeid2(4)",
									"    }",
									"]",
									"",
									"pm.environment.set(\"datasetdsx02sbit\", jsonData.sbit);",
									"pm.environment.set(\"datasetsWithPaths\", JSON.stringify(dataSetsWithPaths));",
									"pm.environment.set(\"datasetName\", makeid2(8));",
									"pm.environment.set(\"datasetPath\", \"/ab/cd/ef/gh/ij/000/001\" + makeid2(4));",
									"postman.setNextRequest('DATASET REGISTER USING AN ALLOWED HIERARCHY PATH');",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"gtags\": [\r\n    \"tagA\",\r\n    \"tagB\"\r\n  ]\r\n} \r\n \r\n"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dataset02}}?path={{path02}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dataset02}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{path02}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET REGISTER USING AN ALLOWED HIERARCHY PATH",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.environment.set('datasetWithPathSbit', jsonData.sbit)",
									"postman.setNextRequest('PATCHING DATASET WITH ALLOWED HIERARCHY PATH');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"type": "text",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{datasetName}}?path={{datasetPath}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{datasetName}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{datasetPath}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCHING DATASET WITH ALLOWED HIERARCHY PATH",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{datasetName}}?path={{datasetPath}}&close={{datasetWithPathSbit}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{datasetName}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{datasetPath}}"
								},
								{
									"key": "close",
									"value": "{{datasetWithPathSbit}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET DELETE USING AN ALLOWED HIERARCHY PATH",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
									"});",
									"",
									"var datasets = JSON.parse(pm.environment.get(\"datasetsWithPaths\"));",
									"var dataset =  datasets.shift();",
									"",
									"if (dataset) {",
									"    pm.environment.set(\"datasetName\", dataset.name);",
									"    pm.environment.set(\"datasetPath\", dataset.path);",
									"    pm.environment.set(\"datasetsWithPaths\", JSON.stringify(datasets)); ",
									"    postman.setNextRequest('DATASET REGISTER USING AN ALLOWED HIERARCHY PATH');",
									"",
									"}    ",
									"else {",
									"    pm.environment.unset(\"datasetName\");",
									"    pm.environment.unset(\"datasetPath\");",
									"    pm.environment.unset('datasetWithPathSbit')",
									"    pm.environment.unset('datasetsWithPaths')",
									"    postman.setNextRequest('DATASET DSX01 GET')",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{datasetName}}?path={{datasetPath}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{datasetName}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{datasetPath}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET DSX01 GET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check content type\", function () {",
									"   pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"",
									"pm.test(\"Dataset name\", function () {",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"dataset01\"));",
									"});",
									"",
									"pm.test(\"tenant\", function () {",
									"    pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"});",
									"",
									"pm.test(\"subproject\", function () {",
									"    pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"});",
									"",
									"pm.test(\"path\", function () {",
									"    pm.expect(jsonData.path).to.eql(\"/\"+pm.environment.get(\"path01\")+\"/\");",
									"});",
									"",
									"pm.test(\"ltag\", function () {",
									"    pm.expect(jsonData.ltag).to.eql(pm.environment.get('legaltag01'));",
									"});",
									"",
									"pm.test(\"Dates are present\", function () {",
									"    pm.expect(jsonData.created_date).to.exist;",
									"    pm.expect(jsonData.last_modified_date).to.exist;",
									"});",
									"",
									"pm.test(\"sbit_count\", function () {",
									"    pm.expect(jsonData.sbit_count).to.eql(1);",
									"});",
									"",
									"pm.test(\"sbit\", function () {",
									"    postman.setEnvironmentVariable(\"sbit\", jsonData.sbit);",
									"});",
									"",
									"pm.test(\"gcsurl\", () => {",
									"    postman.setEnvironmentVariable(\"gcsBucketName\", jsonData.gcsurl.split('/')[0]);",
									"    postman.setEnvironmentVariable(\"gcsObjectPrefix\", jsonData.gcsurl.split('/')[1]);",
									"});",
									"",
									"pm.test(\"Check gtag\", function () {",
									"    pm.expect(jsonData.gtags.length).to.eql(1);",
									"    pm.expect(jsonData.gtags[0]).to.eql(\"tagA\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dataset01}}?path={{path01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dataset01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{path01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET LOCK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"sbit_count\", function () {",
									"    pm.expect(jsonData.sbit_count).to.eql(1);",
									"});",
									"",
									"pm.test(\"ctag\", function () {",
									"    postman.setEnvironmentVariable(\"ctag\", jsonData.ctag);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dataset01}}/lock?path={{path01}}&openmode=write&wid={{sbit}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dataset01}}",
								"lock"
							],
							"query": [
								{
									"key": "path",
									"value": "{{path01}}"
								},
								{
									"key": "openmode",
									"value": "write"
								},
								{
									"key": "wid",
									"value": "{{sbit}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET CHECK CTAG",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.eql('true');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dataset01}}/ctagcheck?path={{path01}}&ctag={{ctag}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dataset01}}",
								"ctagcheck"
							],
							"query": [
								{
									"key": "path",
									"value": "{{path01}}"
								},
								{
									"key": "ctag",
									"value": "{{ctag}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET LIST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check content type\", function () {",
									"   pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"",
									"pm.test(\"Data List\", function () {",
									"    pm.expect(jsonData.length).to.gte(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET PATCH",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"sbit_count\", function () {",
									"    pm.expect(jsonData.sbit_count).to.eql(0);",
									"});",
									"",
									"pm.test(\"Metadata is saved\", function () {",
									"    pm.expect(jsonData.metadata.k1).to.eql('v1');",
									"    pm.expect(jsonData.metadata.k3.k4).to.eql('v4');",
									"});",
									"",
									"pm.test(\"Filemetadata is added\", function () {",
									"    pm.expect(jsonData.filemetadata).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"metadata\": { \"k1\": \"v1\", \"k2\": \"v2\", \"k3\": { \"k4\": \"v4\" } },\n\t\"filemetadata\": {\"type\": \"GENERIC\", \"size\": 1021 },\n\t\"last_modified_date\": true\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dataset01}}?path={{path01}}&close={{sbit}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dataset01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{path01}}"
								},
								{
									"key": "close",
									"value": "{{sbit}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET EXIST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.environment.get(\"VCS_Provider\") === 'gitlab') {",
									"    pm.test(\"Body matches string\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"[false,false,false,false,true]\");",
									"    });",
									"} else {",
									"    pm.test(\"Body matches string\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"[false,false,false,false,true]\");",
									"    });",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"datasets\":[\n\t\t\"{{path01}}/\",\n\t\t\"{{path01}}/a/b/c/{{dataset01}}\",\n\t\t\"{{path01}}/a/{{dataset01}}\",\n\t\t\"{{dataset01}}\",\n\t\t\"{{path01}}/{{dataset01}}\"\n\t]\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/exist",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"exist"
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET SIZES",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.environment.get(\"VCS_Provider\") === 'gitlab') {",
									"    pm.test(\"Body matches string\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"[-1,-1,-1,-1,1021]\");",
									"    });",
									"} else {",
									"    pm.test(\"Body matches string\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"[-1,-1,-1,-1,1021]\");",
									"    });",
									"};",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"[-1,1021,-1,-1,1021]\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"datasets\":[\n\t\t\"{{path01}}/\",\n\t\t\"{{path01}}/a/b/c/{{dataset01}}\",\n\t\t\"{{path01}}/a/{{dataset01}}\",\n\t\t\"{{dataset01}}\",\n\t\t\"{{path01}}/{{dataset01}}\"\n\t]\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/sizes",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"sizes"
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET READDIR",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Read Datasets\", function () {",
									"    pm.expect(jsonData.datasets.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"Read Directories\", function () {",
									"    pm.expect(jsonData.directories.length).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/readdsdirfulllist?path={{path01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"readdsdirfulllist"
							],
							"query": [
								{
									"key": "path",
									"value": "{{path01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET PERMISSIONS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"check Permission\", function () {",
									"    pm.expect(jsonData.read).to.eql(true);",
									"    pm.expect(jsonData.write).to.eql(true);",
									"    pm.expect(jsonData.delete).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dataset01}}/permission?path={{path01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dataset01}}",
								"permission"
							],
							"query": [
								{
									"key": "path",
									"value": "{{path01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET DELETE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dataset01}}?path={{path01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dataset01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{path01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET LIST AFTER DELETE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check content type\", function () {",
									"   pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"",
									"pm.test(\"Data List\", function () {",
									"    pm.expect(jsonData.length).to.gte(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET PATCH 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"sbit_count\", function () {",
									"    pm.expect(jsonData.sbit_count).to.eql(0);",
									"});",
									"",
									"",
									"pm.environment.unset('datasetdsx02sbit')"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"metadata\": { \"k1\": \"v1\", \"k2\": \"v2\", \"k3\": { \"k4\": \"v4\" } },\n\t\"filemetadata\": {\"type\": \"GENERIC\", \"size\": 1021 },\n\t\"last_modified_date\": true\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dataset02}}?path={{path02}}&close={{datasetdsx02sbit}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dataset02}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{path02}}"
								},
								{
									"key": "close",
									"value": "{{datasetdsx02sbit}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "dataset lock",
			"item": [
				{
					"name": "DATASET DELETE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function makeid(lenght) {\r",
									"\r",
									"    var result = '';\r",
									"    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"    var charactersLength = characters.length;\r",
									"\r",
									"    for (var index = 0; index < arguments[0]; index++) {\r",
									"    result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"pm.environment.set(\"testdata\", makeid(8));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{testdata}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{testdata}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE DATASET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Dataset name\", function () {",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"testdata\"));",
									"});",
									"",
									"pm.test(\"tenant\", function () {",
									"    pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"});",
									"",
									"pm.test(\"subproject\", function () {",
									"    pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"});",
									"",
									"pm.test(\"path\", function () {",
									"    pm.expect(jsonData.path).to.eql('/');",
									"});",
									"",
									"pm.test(\"ltag\", function () {",
									"    pm.expect(jsonData.ltag).to.eql(pm.environment.get('legaltag01'));",
									"});",
									"",
									"pm.test(\"Dates are present\", function () {",
									"    pm.expect(jsonData.created_date).to.exist;",
									"    pm.expect(jsonData.last_modified_date).to.exist;",
									"});",
									"",
									"pm.test(\"sbit_count\", function () {",
									"    pm.expect(jsonData.sbit_count).to.eql(1);",
									"});",
									"",
									"pm.test(\"sbit\", function () {",
									"    pm.expect(jsonData.sbit).not.to.eql(null);",
									"    postman.setEnvironmentVariable(\"sbit\", jsonData.sbit);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{testdata}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{testdata}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET LOCK READ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 423 locked\", function () {",
									"    pm.response.to.have.status(423);",
									"});",
									"",
									"",
									"pm.test(\"Read a data locked for writing\", function () {",
									"    pm.expect(pm.response.text()).to.include('locked for write');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{testdata}}/lock?openmode=read",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{testdata}}",
								"lock"
							],
							"query": [
								{
									"key": "openmode",
									"value": "read"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET LOCK READ SBIT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{testdata}}/lock?openmode=read&wid={{sbit}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{testdata}}",
								"lock"
							],
							"query": [
								{
									"key": "openmode",
									"value": "read"
								},
								{
									"key": "wid",
									"value": "{{sbit}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET LOCK WRITE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 423 locked\", function () {",
									"    pm.response.to.have.status(423);",
									"});",
									"",
									"",
									"pm.test(\"Write a data already locked for writing\", function () {",
									"    pm.expect(pm.response.text()).to.include('locked for write');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{testdata}}/lock?openmode=write",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{testdata}}",
								"lock"
							],
							"query": [
								{
									"key": "openmode",
									"value": "write"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET LOCK WRITE SBIT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Dataset name\", function () {",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"testdata\"));",
									"});",
									"",
									"pm.test(\"sbit_count\", function () {",
									"    pm.expect(jsonData.sbit_count).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{testdata}}/lock?openmode=write&wid={{sbit}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{testdata}}",
								"lock"
							],
							"query": [
								{
									"key": "openmode",
									"value": "write"
								},
								{
									"key": "wid",
									"value": "{{sbit}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET CLOSE WRONG SBIT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"pm.test(\"Close data using wrong sbit\", function () {",
									"    pm.expect(pm.response.text()).to.include('locked with different ID');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function makeid(lenght) {\r",
									"\r",
									"    var result = '';\r",
									"    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"    var charactersLength = characters.length;\r",
									"\r",
									"    for (var index = 0; index < arguments[0]; index++) {\r",
									"    result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"pm.environment.set(\"close_path\", makeid(8));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"metadata\": { \"k1\": \"v1\", \"k2\": \"v2\", \"k3\": { \"k4\": \"v4\" } },\n\t\"filemetadata\": {\"type\": \"GENERIC\", \"size\": 1021 },\n\t\"last_modified_date\": true\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{testdata}}?close={{close_path}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{testdata}}"
							],
							"query": [
								{
									"key": "close",
									"value": "{{close_path}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET CLOSE SBIT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"sbit_count\", function () {",
									"    pm.expect(jsonData.sbit_count).to.eql(0);",
									"});",
									"",
									"pm.test(\"sbit\", function () {",
									"    pm.expect(jsonData.sbit).to.eql(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"metadata\": { \"k1\": \"v1\", \"k2\": \"v2\", \"k3\": { \"k4\": \"v4\" } },\n\t\"filemetadata\": {\"type\": \"GENERIC\", \"size\": 1021 },\n\t\"last_modified_date\": true\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{testdata}}?close={{sbit}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{testdata}}"
							],
							"query": [
								{
									"key": "close",
									"value": "{{sbit}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET GET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Dataset name\", function () {",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"testdata\"));",
									"});",
									"",
									"pm.test(\"tenant\", function () {",
									"    pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"});",
									"",
									"pm.test(\"subproject\", function () {",
									"    pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"});",
									"",
									"pm.test(\"path\", function () {",
									"    pm.expect(jsonData.path).to.eql('/');",
									"});",
									"",
									"pm.test(\"sbit_count\", function () {",
									"    pm.expect(jsonData.sbit_count).to.eql(0);",
									"});",
									"",
									"pm.test(\"sbit\", function () {",
									"    pm.expect(jsonData.sbit).to.eql(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{testdata}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{testdata}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET LOCK WRITE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"sbit_count\", function () {",
									"    pm.expect(jsonData.sbit_count).to.eql(1);",
									"});",
									"",
									"pm.test(\"sbit\", function () {",
									"    pm.expect(jsonData.sbit).not.to.eql(null);",
									"    postman.setEnvironmentVariable(\"sbit_new\", jsonData.sbit);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{testdata}}/lock?openmode=write",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{testdata}}",
								"lock"
							],
							"query": [
								{
									"key": "openmode",
									"value": "write"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET LOCK READ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 423 locked\", function () {",
									"    pm.response.to.have.status(423);",
									"});",
									"",
									"",
									"pm.test(\"Read a data locked for writing\", function () {",
									"    pm.expect(pm.response.text()).to.include('locked for write');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{testdata}}/lock?openmode=read",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{testdata}}",
								"lock"
							],
							"query": [
								{
									"key": "openmode",
									"value": "read"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET LOCK WRITE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 423 locked\", function () {",
									"    pm.response.to.have.status(423);",
									"});",
									"",
									"",
									"pm.test(\"Write a data already locked for writing\", function () {",
									"    pm.expect(pm.response.text()).to.include('locked for write');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{testdata}}/lock?openmode=write",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{testdata}}",
								"lock"
							],
							"query": [
								{
									"key": "openmode",
									"value": "write"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET LOCK WRITE SBIT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Dataset name\", function () {",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"testdata\"));",
									"});",
									"",
									"pm.test(\"sbit_count\", function () {",
									"    pm.expect(jsonData.sbit_count).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{testdata}}/lock?openmode=write&wid={{sbit_new}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{testdata}}",
								"lock"
							],
							"query": [
								{
									"key": "openmode",
									"value": "write"
								},
								{
									"key": "wid",
									"value": "{{sbit_new}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET CLOSE WRONG SBIT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"pm.test(\"Close data using wrong sbit\", function () {",
									"    pm.expect(pm.response.text()).to.include('locked with different ID');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"metadata\": { \"k1\": \"v1\", \"k2\": \"v2\", \"k3\": { \"k4\": \"v4\" } },\n\t\"filemetadata\": {\"type\": \"GENERIC\", \"size\": 1021 },\n\t\"last_modified_date\": true\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{testdata}}?close={{sbit}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{testdata}}"
							],
							"query": [
								{
									"key": "close",
									"value": "{{sbit}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET CLOSE SBIT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"sbit_count\", function () {",
									"    pm.expect(jsonData.sbit_count).to.eql(0);",
									"});",
									"",
									"pm.test(\"sbit\", function () {",
									"    pm.expect(jsonData.sbit).to.eql(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"metadata\": { \"k1\": \"v1\", \"k2\": \"v2\", \"k3\": { \"k4\": \"v4\" } },\n\t\"filemetadata\": {\"type\": \"GENERIC\", \"size\": 1021 },\n\t\"last_modified_date\": true\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{testdata}}?close={{sbit_new}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{testdata}}"
							],
							"query": [
								{
									"key": "close",
									"value": "{{sbit_new}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET GET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Dataset name\", function () {",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"testdata\"));",
									"});",
									"",
									"pm.test(\"tenant\", function () {",
									"    pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"});",
									"",
									"pm.test(\"subproject\", function () {",
									"    pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"});",
									"",
									"pm.test(\"path\", function () {",
									"    pm.expect(jsonData.path).to.eql('/');",
									"});",
									"",
									"pm.test(\"sbit_count\", function () {",
									"    pm.expect(jsonData.sbit_count).to.eql(0);",
									"});",
									"",
									"pm.test(\"sbit\", function () {",
									"    pm.expect(jsonData.sbit).to.eql(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{testdata}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{testdata}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET LOCK READ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Lock a data for reading\", function () {",
									"    pm.expect(jsonData.sbit_count).to.eql(1);",
									"    pm.expect(jsonData.sbit).not.to.eql(null);",
									"    postman.setEnvironmentVariable(\"sbit_new_01\", jsonData.sbit);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{testdata}}/lock?openmode=read&wid=R",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{testdata}}",
								"lock"
							],
							"query": [
								{
									"key": "openmode",
									"value": "read"
								},
								{
									"key": "wid",
									"value": "R"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET LOCK WRITE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 423 locked\", function () {",
									"    pm.response.to.have.status(423);",
									"});",
									"",
									"",
									"pm.test(\"Write a data locked for reading\", function () {",
									"    pm.expect(pm.response.text()).to.include('locked for read');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{testdata}}/lock?openmode=write",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{testdata}}",
								"lock"
							],
							"query": [
								{
									"key": "openmode",
									"value": "write"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET LOCK READ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Read a data locked for reading\", function () {",
									"    pm.expect(jsonData.sbit_count).to.eql(2);",
									"    postman.setEnvironmentVariable(\"sbit_new_02\", jsonData.sbit);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{testdata}}/lock?openmode=read",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{testdata}}",
								"lock"
							],
							"query": [
								{
									"key": "openmode",
									"value": "read"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET CLOSE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"sbit_count\", function () {",
									"    pm.expect(jsonData.sbit_count).to.eql(1);",
									"});",
									"",
									"pm.test(\"sbit\", function () {",
									"    pm.expect(jsonData.sbit).not.to.eql(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"metadata\": { \"k1\": \"v1\", \"k2\": \"v2\", \"k3\": { \"k4\": \"v4\" } },\n\t\"filemetadata\": {\"type\": \"GENERIC\", \"size\": 1021 },\n\t\"last_modified_date\": true\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{testdata}}?close={{sbit_new_01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{testdata}}"
							],
							"query": [
								{
									"key": "close",
									"value": "{{sbit_new_01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET CLOSE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"sbit_count\", function () {",
									"    pm.expect(jsonData.sbit_count).to.eql(0);",
									"});",
									"",
									"pm.test(\"sbit\", function () {",
									"    pm.expect(jsonData.sbit).to.eql(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"metadata\": { \"k1\": \"v1\", \"k2\": \"v2\", \"k3\": { \"k4\": \"v4\" } },\n\t\"filemetadata\": {\"type\": \"GENERIC\", \"size\": 1021 },\n\t\"last_modified_date\": true\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{testdata}}?close={{sbit_new_02}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{testdata}}"
							],
							"query": [
								{
									"key": "close",
									"value": "{{sbit_new_02}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET GET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Dataset name\", function () {",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"testdata\"));",
									"});",
									"",
									"pm.test(\"tenant\", function () {",
									"    pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"});",
									"",
									"pm.test(\"subproject\", function () {",
									"    pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"});",
									"",
									"pm.test(\"path\", function () {",
									"    pm.expect(jsonData.path).to.eql('/');",
									"});",
									"",
									"pm.test(\"sbit_count\", function () {",
									"    pm.expect(jsonData.sbit_count).to.eql(0);",
									"});",
									"",
									"pm.test(\"sbit\", function () {",
									"    pm.expect(jsonData.sbit).to.eql(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{testdata}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{testdata}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET DELETE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{testdata}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{testdata}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE DATASET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Dataset name\", function () {",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"testdata\"));",
									"});",
									"",
									"pm.test(\"tenant\", function () {",
									"    pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"});",
									"",
									"pm.test(\"subproject\", function () {",
									"    pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"});",
									"",
									"pm.test(\"path\", function () {",
									"    pm.expect(jsonData.path).to.eql('/');",
									"});",
									"",
									"pm.test(\"ltag\", function () {",
									"    pm.expect(jsonData.ltag).to.eql(pm.environment.get('legaltag01'));",
									"});",
									"",
									"pm.test(\"Dates are present\", function () {",
									"    pm.expect(jsonData.created_date).to.exist;",
									"    pm.expect(jsonData.last_modified_date).to.exist;",
									"});",
									"",
									"pm.test(\"sbit_count\", function () {",
									"    pm.expect(jsonData.sbit_count).to.eql(1);",
									"});",
									"",
									"pm.test(\"sbit\", function () {",
									"    pm.expect(jsonData.sbit).not.to.eql(null);",
									"    postman.setEnvironmentVariable(\"sbit\", jsonData.sbit);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{testdata}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{testdata}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET CLOSE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"sbit_count\", function () {",
									"    pm.expect(jsonData.sbit_count).to.eql(0);",
									"});",
									"",
									"pm.test(\"sbit\", function () {",
									"    pm.expect(jsonData.sbit).to.eql(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"metadata\": { \"k1\": \"v1\", \"k2\": \"v2\", \"k3\": { \"k4\": \"v4\" } },\n\t\"filemetadata\": {\"type\": \"GENERIC\", \"size\": 1021 },\n\t\"last_modified_date\": true\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{testdata}}?close={{sbit}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{testdata}}"
							],
							"query": [
								{
									"key": "close",
									"value": "{{sbit}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET MAKE READONLY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"readonly\", function () {",
									"    pm.expect(jsonData.readonly).to.eql(true);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"readonly\": true\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{testdata}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{testdata}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET READONLY LOCK READ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{testdata}}/lock?openmode=read",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{testdata}}",
								"lock"
							],
							"query": [
								{
									"key": "openmode",
									"value": "read"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET READONLY LOCK WRITE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Read a data locked for writing\", function () {",
									"    pm.expect(pm.response.text()).to.include('cannot be locked');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{testdata}}/lock?openmode=write",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{testdata}}",
								"lock"
							],
							"query": [
								{
									"key": "openmode",
									"value": "write"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET DELETE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{testdata}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{testdata}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "seismicmeta",
			"item": [
				{
					"name": "DATASET DELETE (SEISMICMETA)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dataset01}}?path={{path01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dataset01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{path01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET REGISTER + SEISMICMETA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check content type\", function () {",
									"   pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"",
									"pm.test(\"Dataset name\", function () {",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"dataset01\"));",
									"});",
									"",
									"pm.test(\"tenant\", function () {",
									"    pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"});",
									"",
									"pm.test(\"subproject\", function () {",
									"    pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"});",
									"",
									"pm.test(\"path\", function () {",
									"    pm.expect(jsonData.path).to.eql(\"/\"+pm.environment.get(\"path01\")+\"/\");",
									"});",
									"",
									"pm.test(\"ltag\", function () {",
									"    pm.expect(jsonData.ltag).to.eql(pm.environment.get('legaltag01'));",
									"});",
									"",
									"pm.test(\"Dates are present\", function () {",
									"    pm.expect(jsonData.created_date).to.exist;",
									"    pm.expect(jsonData.last_modified_date).to.exist;",
									"});",
									"",
									"pm.test(\"sbit_count\", function () {",
									"    pm.expect(jsonData.sbit_count).to.eql(1);",
									"});",
									"",
									"pm.test(\"Check gtag\", function () {",
									"    pm.expect(jsonData.gtags.length).to.eql(1);",
									"    pm.expect(jsonData.gtags[0]).to.eql('tagA');",
									"});",
									"",
									"pm.test(\"Check seismicmetadata\", () => {",
									"    pm.expect(jsonData.seismicmeta_guid).not.equal(null);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var result           = '';\r",
									"var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"var charactersLength = characters.length;\r",
									"for ( var i = 0; i < 16; i++ ) {\r",
									"    result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"}\r",
									"pm.variables.set(\"randomStringId\", result);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"gtags\": [\r\n        \"tagA\"\r\n    ],\r\n    \"seismicmeta\": {\r\n        \"id\": \"{{datapartition}}:seismic3d:{{randomStringId}}\",\r\n        \"data\": {\r\n            \"additionalMetaData\": [\r\n                {\r\n                    \"name\": \"SOURCE BARCODE\",\r\n                    \"value\": 3843967263,\r\n                    \"valueAsString\": \"3843967263\"\r\n                },\r\n                {\r\n                    \"name\": \"ORIGINAL FILE NAME\",\r\n                    \"value\": \"1_67_Srv3D_1_8_Original.sgy\",\r\n                    \"valueAsString\": \"1_67_Srv3D_1_8_Original.sgy\"\r\n                },\r\n                {\r\n                    \"name\": \"BIN SPACING\",\r\n                    \"value\": 90,\r\n                    \"valueAsString\": \"90\"\r\n                }\r\n            ],\r\n            \"binGridOperation\": {\r\n                \"binGridOriginEasting\": 1276435.2,\r\n                \"binGridOriginI\": 1,\r\n                \"binGridOriginJ\": 1,\r\n                \"binGridOriginNorthing\": 242030.61,\r\n                \"binGridScaleFactor\": 1,\r\n                \"binNodeIncrementI\": 1,\r\n                \"binNodeIncrementJ\": 1,\r\n                \"binWidthI\": 83.39992,\r\n                \"binWidthJ\": 91.77242,\r\n                \"crsKey\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                \"mapGridBearingJ\": 206.58368,\r\n                \"persistableReferenceCrs\": {\r\n                    \"lateBoundCRS\": {\r\n                        \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"26782\"\r\n                        },\r\n                        \"type\": \"LBC\"\r\n                    },\r\n                    \"singleCT\": {\r\n                        \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"15851\"\r\n                        },\r\n                        \"type\": \"ST\"\r\n                    },\r\n                    \"ver\": \"PE_10_3_1\",\r\n                    \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                    \"authCode\": {\r\n                        \"auth\": \"SLB\",\r\n                        \"code\": \"26782079\"\r\n                    },\r\n                    \"type\": \"EBC\"\r\n                },\r\n                \"transformationMethodNumber\": 1049,\r\n                \"unitKeyBearing\": \"dega\"\r\n            },\r\n            \"binNodePositions\": [\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        1276435.2,\r\n                                        242030.61\r\n                                    ],\r\n                                    [\r\n                                        1281357.8,\r\n                                        239567.36\r\n                                    ],\r\n                                    [\r\n                                        1280002.5,\r\n                                        236859.05\r\n                                    ],\r\n                                    [\r\n                                        1275080,\r\n                                        239322.28\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsMultiPoint\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ]\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"26782\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"26782079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                },\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        -93.60371,\r\n                                        29.312513\r\n                                    ],\r\n                                    [\r\n                                        -93.58811,\r\n                                        29.306007\r\n                                    ],\r\n                                    [\r\n                                        -93.59219,\r\n                                        29.298489\r\n                                    ],\r\n                                    [\r\n                                        -93.60779,\r\n                                        29.304993\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsMultiPoint\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ]\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433],AUTHORITY[\\\"EPSG\\\",4267]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"GCS_North_American_1927\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"4267\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus [4267,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"4267079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                },\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        -93.60387,\r\n                                        29.312752\r\n                                    ],\r\n                                    [\r\n                                        -93.58827,\r\n                                        29.306248\r\n                                    ],\r\n                                    [\r\n                                        -93.592354,\r\n                                        29.298727\r\n                                    ],\r\n                                    [\r\n                                        -93.60795,\r\n                                        29.305231\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsMultiPoint\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ]\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"wkt\": \"GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433],AUTHORITY[\\\"EPSG\\\",4326]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"GCS_WGS_1984\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"4326\"\r\n                        },\r\n                        \"type\": \"LBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                }\r\n            ],\r\n            \"classification\": \"Post-stack, time-migrated\",\r\n            \"dateCreated\": \"2013-03-22T11:16:03Z\",\r\n            \"dateModified\": \"2013-03-22T11:16:03Z\",\r\n            \"derivedBulk\": [\r\n                {\r\n                    \"size\": 1223488818,\r\n                    \"type\": \"ZGY\",\r\n                    \"url\": \"sd://SNTC/colors/test.zgy\"\r\n                },\r\n                {\r\n                    \"size\": 2653649950,\r\n                    \"type\": \"DIO\",\r\n                    \"url\": \"sd://SNTC/colors/test.DIO\"\r\n                }\r\n            ],\r\n            \"description\": \"A comment or a remark.\",\r\n            \"elevationReferenceTime\": {\r\n                \"elevationFromMsl\": {\r\n                    \"unitKey\": \"ft\",\r\n                    \"value\": 0\r\n                },\r\n                \"name\": \"SRD\",\r\n                \"replacementVelocity\": {\r\n                    \"unitKey\": \"ft/s\",\r\n                    \"value\": 4800\r\n                }\r\n            },\r\n            \"externalIds\": [\r\n                \"Petrel:tenant1/ProjectLouisiana/3491763/a9b46fc4-1840-450a-ac01-d15bdaa086ba:aef0e55c-4fcb-4546-a7a2-9df8f27277a1\"\r\n            ],\r\n            \"locationAtIndexZero\": {\r\n                \"features\": [\r\n                    {\r\n                        \"geometry\": {\r\n                            \"coordinates\": [\r\n                                1276435.2,\r\n                                242030.61,\r\n                                -1234\r\n                            ],\r\n                            \"type\": \"AnyCrsPoint\"\r\n                        },\r\n                        \"type\": \"AnyCrsFeature\"\r\n                    }\r\n                ],\r\n                \"persistableReferenceCrs\": {\r\n                    \"lateBoundCRS\": {\r\n                        \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"26782\"\r\n                        },\r\n                        \"type\": \"LBC\"\r\n                    },\r\n                    \"singleCT\": {\r\n                        \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"15851\"\r\n                        },\r\n                        \"type\": \"ST\"\r\n                    },\r\n                    \"ver\": \"PE_10_3_1\",\r\n                    \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                    \"authCode\": {\r\n                        \"auth\": \"SLB\",\r\n                        \"code\": \"26782079\"\r\n                    },\r\n                    \"type\": \"EBC\"\r\n                },\r\n                \"persistableReferenceUnitZ\": {\r\n                    \"scaleOffset\": {\r\n                        \"scale\": 0.001,\r\n                        \"offset\": 0\r\n                    },\r\n                    \"symbol\": \"ms\",\r\n                    \"baseMeasurement\": {\r\n                        \"ancestry\": \"Time\",\r\n                        \"type\": \"UM\"\r\n                    },\r\n                    \"type\": \"USO\"\r\n                },\r\n                \"type\": \"AnyCrsFeatureCollection\"\r\n            },\r\n            \"locationWGS84\": {\r\n                \"features\": [\r\n                    {\r\n                        \"geometry\": {\r\n                            \"coordinates\": [\r\n                                [\r\n                                    [\r\n                                        -93.60387,\r\n                                        29.312752\r\n                                    ],\r\n                                    [\r\n                                        -93.58827,\r\n                                        29.306248\r\n                                    ],\r\n                                    [\r\n                                        -93.592354,\r\n                                        29.298727\r\n                                    ],\r\n                                    [\r\n                                        -93.60795,\r\n                                        29.305231\r\n                                    ],\r\n                                    [\r\n                                        -93.60387,\r\n                                        29.312752\r\n                                    ]\r\n                                ]\r\n                            ],\r\n                            \"type\": \"Polygon\"\r\n                        },\r\n                        \"properties\": {\r\n                            \"name\": \"Survey 4 INLINE_1_67_Srv3D_1_8_Original\"\r\n                        },\r\n                        \"type\": \"Feature\"\r\n                    }\r\n                ],\r\n                \"type\": \"FeatureCollection\"\r\n            },\r\n            \"name\": \"Survey 4 INLINE_1_67_Srv3D_1_8_Original\",\r\n            \"originalBulk\": {\r\n                \"size\": 2873437400,\r\n                \"type\": \"SEGY\",\r\n                \"url\": \"sd://SNTC/colors/test.segy\"\r\n            },\r\n            \"perimeters\": [\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        [\r\n                                            1276435.2,\r\n                                            242030.61\r\n                                        ],\r\n                                        [\r\n                                            1281357.8,\r\n                                            239567.36\r\n                                        ],\r\n                                        [\r\n                                            1280002.5,\r\n                                            236859.05\r\n                                        ],\r\n                                        [\r\n                                            1275080,\r\n                                            239322.28\r\n                                        ],\r\n                                        [\r\n                                            1276435.2,\r\n                                            242030.61\r\n                                        ]\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsPolygon\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ],\r\n                                \"perimeterType\": \"Full Fold Coverage\"\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"26782\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"26782079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                },\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        [\r\n                                            -93.60371,\r\n                                            29.312513\r\n                                        ],\r\n                                        [\r\n                                            -93.58811,\r\n                                            29.306007\r\n                                        ],\r\n                                        [\r\n                                            -93.59219,\r\n                                            29.298489\r\n                                        ],\r\n                                        [\r\n                                            -93.60779,\r\n                                            29.304993\r\n                                        ],\r\n                                        [\r\n                                            -93.60371,\r\n                                            29.312513\r\n                                        ]\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsPolygon\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ],\r\n                                \"perimeterType\": \"Full Fold Coverage\"\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433],AUTHORITY[\\\"EPSG\\\",4267]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"GCS_North_American_1927\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"4267\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus [4267,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"4267079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                }\r\n            ],\r\n            \"rangeAmplitudeMax\": {\r\n                \"unitKey\": \"amplitude\",\r\n                \"value\": 232467.8\r\n            },\r\n            \"rangeAmplitudeMin\": {\r\n                \"unitKey\": \"amplitude\",\r\n                \"value\": -226153.4\r\n            },\r\n            \"rangeCrosslineIncrement\": 1,\r\n            \"rangeCrosslineStart\": 1,\r\n            \"rangeCrosslineStop\": 34,\r\n            \"rangeInlineIncrement\": 1,\r\n            \"rangeInlineStart\": 1,\r\n            \"rangeInlineStop\": 67,\r\n            \"relationships\": {\r\n                \"binGrid\": {\r\n                    \"id\": \"slb:wke:binGrid-5067af51fe6542968ce8868c01af6cb7\"\r\n                },\r\n                \"seismicSurvey\": {\r\n                    \"id\": \"slb:wke:seismicSurvey3d-62d8fe58-c044-537a-b354-7f3f8e860421\",\r\n                    \"name\": \"ST2013-L\"\r\n                },\r\n                \"usesAssociations\": true\r\n            },\r\n            \"seismicProperty\": \"Instantaneous Amplitude\",\r\n            \"stackAngleRangeMax\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": 10\r\n            },\r\n            \"stackAngleRangeMin\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": 0\r\n            },\r\n            \"stackAzimuthRangeMax\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": 20\r\n            },\r\n            \"stackAzimuthRangeMin\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": -20\r\n            },\r\n            \"stackOffsetRangeMax\": {\r\n                \"unitKey\": \"ftUS\",\r\n                \"value\": 3000\r\n            },\r\n            \"stackOffsetRangeMin\": {\r\n                \"unitKey\": \"ftUS\",\r\n                \"value\": 0\r\n            },\r\n            \"stackSubType\": \"Full\",\r\n            \"stackType\": \"Full\",\r\n            \"storageType\": \"32-BIT\",\r\n            \"textualFileHeader\": [\r\n                \"C 1 CLIENT COMPANY CREW NO                                                      C 2 LINE line1dS AREA MAP ID                                                    C 3 REEL NO DAY-START OF REEL YEAR OBSERVER                                     C 4 INSTRUMENT: DELPH MODEL xx SERIAL NO                                        C 5 DATA TRACES/RECORD 1 AUXILIARY TRACES/RECORD 0 CDP FOLD                     C 6 SAMPLE INTERVAL 333 SAMPLES/TRACE 1496 BITS/IN 16 BYTES/SAMPLE 2            C 7 RECORDING FORMAT FORMAT THIS REEL MEASUREMENT SYSTEM                        C 8 SAMPLE CODE: FIXED PT                                                       C 9 GAIN TYPE: FIXED                                                            C10 FILTERS: ALIAS 1500HZ NOTCH HZ BAND - HZ SLOPE - DB/OCT                     C11 SOURCE: TYPE NUMBER/POINT POINT INTERVAL                                    C12 PATTERN: LENGTH WIDTH                                                       C13 SWEEP: START HZ END HZ LENGTH MS CHANEL NO TYPE                             C14 TAPER: START LENGTH MS END LENGTH MS TYPE                                   C15 SPREAD: OFFSET MAX DISTANCE GROUP INTERVAL                                  C16 GEOPHONES: PER GROUP SPACING FREQUENCY MFG MODEL                            C17 PATTERN: LENGTH WIDTH                                                       C18 TRACES SORTED BY: RECORD                                                    C19 AMPLITUDE RECOVERY: NONE                                                    C20 MAP PROJECTION ZONE ID COORDINATE UNITS                                     C21 PROCESSING:                                                                 C22 PROCESSING:                                                                 C23                                                                             C24                                                                             C25                                                                             C26                                                                             C27                                                                             C28                                                                             C29                                                                             C30                                                                             C31                                                                             C32                                                                             C33                                                                             C34                                                                             C35                                                                             C36                                                                             C37                                                                             C38                                                                             C39                                                                             C40 END EBCDIC                                                                  \"\r\n            ],\r\n            \"verticalDomain\": \"Elevation time (two-way travel time)\",\r\n            \"verticalIncrement\": {\r\n                \"unitKey\": \"ms\",\r\n                \"value\": -4\r\n            },\r\n            \"verticalSampleCount\": 1000,\r\n            \"verticalStart\": {\r\n                \"unitKey\": \"ms\",\r\n                \"value\": 0\r\n            },\r\n            \"verticalStop\": {\r\n                \"unitKey\": \"ms\",\r\n                \"value\": -3996\r\n            },\r\n            \"vintage\": \"ST2013-InstantaneousAmplitude\",\r\n            \"waveType\": \"PP\"\r\n        },\r\n        \"kind\": \"{{datapartition}}:wks:seismic3d:1.0.5\",\r\n        \"legal\": {\r\n            \"legaltags\": [\r\n                \"{{legaltag01}}\"\r\n            ],\r\n            \"otherRelevantDataCountries\": [\r\n                \"US\",\r\n                \"BE\",\r\n                \"NO\",\r\n                \"IN\"\r\n            ]\r\n        },\r\n        \"version\": 1040891613125385\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dataset01}}?path={{path01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dataset01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{path01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET GET + SEISMICMETA (FROM POST)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check content type\", function () {",
									"   pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"",
									"pm.test(\"Dataset name\", function () {",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"dataset01\"));",
									"});",
									"",
									"pm.test(\"tenant\", function () {",
									"    pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"});",
									"",
									"pm.test(\"subproject\", function () {",
									"    pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"});",
									"",
									"pm.test(\"path\", function () {",
									"    pm.expect(jsonData.path).to.eql(\"/\"+pm.environment.get(\"path01\")+\"/\");",
									"});",
									"",
									"pm.test(\"ltag\", function () {",
									"    pm.expect(jsonData.ltag).to.eql(pm.environment.get('legaltag01'));",
									"});",
									"",
									"pm.test(\"Dates are present\", function () {",
									"    pm.expect(jsonData.created_date).to.exist;",
									"    pm.expect(jsonData.last_modified_date).to.exist;",
									"});",
									"",
									"pm.test(\"sbit_count\", function () {",
									"    pm.expect(jsonData.sbit_count).to.eql(1);",
									"});",
									"",
									"pm.test(\"sbit\", function () {",
									"    postman.setEnvironmentVariable(\"sbit\", jsonData.sbit);",
									"});",
									"",
									"pm.test(\"gcsurl\", () => {",
									"    postman.setEnvironmentVariable(\"gcsBucketName\", jsonData.gcsurl.split('/')[0]);",
									"    postman.setEnvironmentVariable(\"gcsObjectPrefix\", jsonData.gcsurl.split('/')[1]);",
									"})",
									"",
									"pm.test(\"Check gtag\", function () {",
									"    pm.expect(jsonData.gtags.length).to.eql(1);",
									"    pm.expect(jsonData.gtags[0]).to.eql('tagA');",
									"});",
									"",
									"pm.test(\"Check seismicmetadata\", () => {",
									"    pm.expect(jsonData.seismicmeta).not.equal(null);",
									"    pm.expect(jsonData.seismicmeta.id).not.equal(null);",
									"    pm.expect(jsonData.seismicmeta.kind).to.eql(pm.environment.get('datapartition') + \":wks:seismic3d:1.0.5\");",
									"    pm.expect(jsonData.seismicmeta.acl).not.equal(null);",
									"    pm.expect(jsonData.seismicmeta.acl.viewers).not.equal(null);",
									"    pm.expect(jsonData.seismicmeta.acl.owners).not.equal(null);",
									"    pm.expect(jsonData.seismicmeta.legal).not.equal(null);",
									"    pm.expect(jsonData.seismicmeta.legal.legaltags).not.equal(null);",
									"    pm.expect(jsonData.seismicmeta.legal.otherRelevantDataCountries).to.contain(\"US\");",
									"    pm.expect(jsonData.seismicmeta.data.binNodePositions[0].features[0].geometry.coordinates[0][1]).to.equal(242030.61);",
									"    pm.expect(jsonData.seismicmeta.data.binNodePositions[0].features[0].geometry.type).to.equal(\"AnyCrsMultiPoint\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dataset01}}?path={{path01}}&seismicmeta=true",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dataset01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{path01}}"
								},
								{
									"key": "seismicmeta",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET PATCH + SEISMICMETA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check content type\", function () {",
									"   pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"",
									"pm.test(\"Dataset name\", function () {",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"dataset01\"));",
									"});",
									"",
									"pm.test(\"tenant\", function () {",
									"    pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"});",
									"",
									"pm.test(\"subproject\", function () {",
									"    pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"});",
									"",
									"pm.test(\"path\", function () {",
									"    pm.expect(jsonData.path).to.eql(\"/\"+pm.environment.get(\"path01\")+\"/\");",
									"});",
									"",
									"pm.test(\"ltag\", function () {",
									"    pm.expect(jsonData.ltag).to.eql(pm.environment.get('legaltag01'));",
									"});",
									"",
									"pm.test(\"Dates are present\", function () {",
									"    pm.expect(jsonData.created_date).to.exist;",
									"    pm.expect(jsonData.last_modified_date).to.exist;",
									"});",
									"",
									"pm.test(\"sbit_count\", function () {",
									"    pm.expect(jsonData.sbit_count).to.eql(1);",
									"});",
									"",
									"pm.test(\"Check gtag\", function () {",
									"    pm.expect(jsonData.gtags.length).to.eql(1);",
									"    pm.expect(jsonData.gtags[0]).to.eql(\"tagA\");",
									"});",
									"",
									"pm.test(\"Check seismicmetadata\", () => {",
									"    pm.expect(jsonData.seismicmeta_guid).not.equal(null);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var result           = '';\r",
									"var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"var charactersLength = characters.length;\r",
									"for ( var i = 0; i < 16; i++ ) {\r",
									"    result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"}\r",
									"pm.variables.set(\"randomString16\", result);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"gtags\": [\n    \"tagA\"\n  ],\n  \"seismicmeta\": {\n  \"id\": \"{{datapartition}}:seismic3d:{{randomString16}}\",\n  \"kind\": \"{{datapartition}}:wks:seismic3d:1.0.5\",\n    \"legal\": {\n    \"legaltags\": [\n      \"{{legaltag01}}\"\n    ],\n      \"otherRelevantDataCountries\": [\n        \"US\"\n      ]\n  },\n  \"data\": {\n    \"geometry\": {\n      \"coordinates\": [\n        [\n          -93.61,\n          9.32\n        ],\n        [\n          -93.78,\n          29.44\n        ]\n      ],\n        \"type\": \"Polygon\"\n     }\n   },\n  \"meta\": [\n\t    {\n\t        \"kind\": \"Unit\",\n\t        \"name\": \"ft/s\",\n\t        \"persistableReference\": {\n\t            \"scaleOffset\": {\n\t                \"scale\": 0.3048,\n\t                \"offset\": 0\n\t            },\n\t            \"symbol\": \"ft/s\",\n\t            \"baseMeasurement\": {\n\t                \"ancestry\": \"Velocity\",\n\t                \"type\": \"UM\"\n\t            },\n\t            \"type\": \"USO\"\n\t        },\n\t        \"propertyNames\": [\n\t            \"elevationReferenceTime.replacementVelocity.value\"\n\t        ]\n\t    }\n    ]\n  }\n} \n \n"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dataset01}}?path={{path01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dataset01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{path01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET GET + SEISMICMETA (FROM PATCH)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check content type\", function () {",
									"   pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"",
									"pm.test(\"Dataset name\", function () {",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"dataset01\"));",
									"});",
									"",
									"pm.test(\"tenant\", function () {",
									"    pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"});",
									"",
									"pm.test(\"subproject\", function () {",
									"    pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"});",
									"",
									"pm.test(\"path\", function () {",
									"    pm.expect(jsonData.path).to.eql(\"/\"+pm.environment.get(\"path01\")+\"/\");",
									"});",
									"",
									"pm.test(\"ltag\", function () {",
									"    pm.expect(jsonData.ltag).to.eql(pm.environment.get('legaltag01'));",
									"});",
									"",
									"pm.test(\"Dates are present\", function () {",
									"    pm.expect(jsonData.created_date).to.exist;",
									"    pm.expect(jsonData.last_modified_date).to.exist;",
									"});",
									"",
									"pm.test(\"sbit_count\", function () {",
									"    pm.expect(jsonData.sbit_count).to.eql(1);",
									"});",
									"",
									"pm.test(\"sbit\", function () {",
									"    postman.setEnvironmentVariable(\"sbit\", jsonData.sbit);",
									"});",
									"",
									"pm.test(\"gcsurl\", () => {",
									"    postman.setEnvironmentVariable(\"gcsBucketName\", jsonData.gcsurl.split('/')[0]);",
									"    postman.setEnvironmentVariable(\"gcsObjectPrefix\", jsonData.gcsurl.split('/')[1]);",
									"})",
									"",
									"pm.test(\"Check gtag\", function () {",
									"    pm.expect(jsonData.gtags.length).to.eql(1);",
									"    pm.expect(jsonData.gtags[0]).to.eql(\"tagA\");",
									"});",
									"",
									"pm.test(\"Check seismicmetadata\", () => {",
									"    pm.expect(jsonData.seismicmeta).not.equal(null);",
									"    pm.expect(jsonData.seismicmeta.kind).to.eql(pm.environment.get('datapartition') +\":wks:seismic3d:1.0.5\");",
									"    pm.expect(jsonData.seismicmeta.acl).not.equal(null);",
									"    pm.expect(jsonData.seismicmeta.acl.viewers).not.equal(null);",
									"    pm.expect(jsonData.seismicmeta.acl.owners).not.equal(null);",
									"    pm.expect(jsonData.seismicmeta.legal).not.equal(null);",
									"    pm.expect(jsonData.seismicmeta.legal.legaltags).not.equal(null);",
									"    pm.expect(jsonData.seismicmeta.legal.otherRelevantDataCountries).to.contain(\"US\");",
									"    pm.expect(jsonData.seismicmeta.data.geometry.coordinates[0][1]).to.equal(9.32);",
									"    pm.expect(jsonData.seismicmeta.data.geometry.type).to.equal(\"Polygon\");",
									"    pm.expect(jsonData.seismicmeta.meta[0].kind).to.eql(\"Unit\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dataset01}}?path={{path01}}&seismicmeta=true",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dataset01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{path01}}"
								},
								{
									"key": "seismicmeta",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET DELETE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dataset01}}?path={{path01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dataset01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{path01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET REGISTER WITH SEISMICMETA (RECORD_TYPE USED)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check content type\", function () {",
									"   pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"",
									"pm.test(\"Dataset name\", function () {",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"dataset01\"));",
									"});",
									"",
									"pm.test(\"tenant\", function () {",
									"    pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"});",
									"",
									"pm.test(\"subproject\", function () {",
									"    pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"});",
									"",
									"pm.test(\"path\", function () {",
									"    pm.expect(jsonData.path).to.eql(\"/\"+pm.environment.get(\"path01\")+\"/\");",
									"});",
									"",
									"pm.test(\"ltag\", function () {",
									"    pm.expect(jsonData.ltag).to.eql(pm.environment.get('legaltag01'));",
									"});",
									"",
									"pm.test(\"Dates are present\", function () {",
									"    pm.expect(jsonData.created_date).to.exist;",
									"    pm.expect(jsonData.last_modified_date).to.exist;",
									"});",
									"",
									"pm.test(\"sbit_count\", function () {",
									"    pm.expect(jsonData.sbit_count).to.eql(1);",
									"});",
									"",
									"pm.test(\"Check gtag\", function () {",
									"    pm.expect(jsonData.gtags.length).to.eql(1);",
									"    pm.expect(jsonData.gtags[0]).to.eql(\"tagA\");",
									"});",
									"",
									"pm.test(\"Check seismicmetadata\", () => {",
									"    pm.expect(jsonData.seismicmeta_guid).not.equal(null);",
									"});",
									"",
									"",
									"pm.test(\"Set record_type as env variable\", function () {",
									"    var req = JSON.parse(pm.request.body.raw);",
									"    pm.environment.set(\"dsx01_record_type\", req.seismicmeta.recordType);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"gtags\": [\r\n        \"tagA\"\r\n    ],\r\n    \"seismicmeta\": {\r\n        \"recordType\": \"seismic3d\",\r\n        \"data\": {\r\n            \"additionalMetaData\": [\r\n                {\r\n                    \"name\": \"SOURCE BARCODE\",\r\n                    \"value\": 3843967263,\r\n                    \"valueAsString\": \"3843967263\"\r\n                },\r\n                {\r\n                    \"name\": \"ORIGINAL FILE NAME\",\r\n                    \"value\": \"1_67_Srv3D_1_8_Original.sgy\",\r\n                    \"valueAsString\": \"1_67_Srv3D_1_8_Original.sgy\"\r\n                },\r\n                {\r\n                    \"name\": \"BIN SPACING\",\r\n                    \"value\": 90,\r\n                    \"valueAsString\": \"90\"\r\n                }\r\n            ],\r\n            \"binGridOperation\": {\r\n                \"binGridOriginEasting\": 1276435.2,\r\n                \"binGridOriginI\": 1,\r\n                \"binGridOriginJ\": 1,\r\n                \"binGridOriginNorthing\": 242030.61,\r\n                \"binGridScaleFactor\": 1,\r\n                \"binNodeIncrementI\": 1,\r\n                \"binNodeIncrementJ\": 1,\r\n                \"binWidthI\": 83.39992,\r\n                \"binWidthJ\": 91.77242,\r\n                \"crsKey\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                \"mapGridBearingJ\": 206.58368,\r\n                \"persistableReferenceCrs\": {\r\n                    \"lateBoundCRS\": {\r\n                        \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"26782\"\r\n                        },\r\n                        \"type\": \"LBC\"\r\n                    },\r\n                    \"singleCT\": {\r\n                        \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"15851\"\r\n                        },\r\n                        \"type\": \"ST\"\r\n                    },\r\n                    \"ver\": \"PE_10_3_1\",\r\n                    \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                    \"authCode\": {\r\n                        \"auth\": \"SLB\",\r\n                        \"code\": \"26782079\"\r\n                    },\r\n                    \"type\": \"EBC\"\r\n                },\r\n                \"transformationMethodNumber\": 1049,\r\n                \"unitKeyBearing\": \"dega\"\r\n            },\r\n            \"binNodePositions\": [\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        1276435.2,\r\n                                        242030.61\r\n                                    ],\r\n                                    [\r\n                                        1281357.8,\r\n                                        239567.36\r\n                                    ],\r\n                                    [\r\n                                        1280002.5,\r\n                                        236859.05\r\n                                    ],\r\n                                    [\r\n                                        1275080,\r\n                                        239322.28\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsMultiPoint\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ]\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"26782\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"26782079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                },\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        -93.60371,\r\n                                        29.312513\r\n                                    ],\r\n                                    [\r\n                                        -93.58811,\r\n                                        29.306007\r\n                                    ],\r\n                                    [\r\n                                        -93.59219,\r\n                                        29.298489\r\n                                    ],\r\n                                    [\r\n                                        -93.60779,\r\n                                        29.304993\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsMultiPoint\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ]\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433],AUTHORITY[\\\"EPSG\\\",4267]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"GCS_North_American_1927\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"4267\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus [4267,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"4267079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                },\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        -93.60387,\r\n                                        29.312752\r\n                                    ],\r\n                                    [\r\n                                        -93.58827,\r\n                                        29.306248\r\n                                    ],\r\n                                    [\r\n                                        -93.592354,\r\n                                        29.298727\r\n                                    ],\r\n                                    [\r\n                                        -93.60795,\r\n                                        29.305231\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsMultiPoint\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ]\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"wkt\": \"GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433],AUTHORITY[\\\"EPSG\\\",4326]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"GCS_WGS_1984\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"4326\"\r\n                        },\r\n                        \"type\": \"LBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                }\r\n            ],\r\n            \"classification\": \"Post-stack, time-migrated\",\r\n            \"dateCreated\": \"2013-03-22T11:16:03Z\",\r\n            \"dateModified\": \"2013-03-22T11:16:03Z\",\r\n            \"derivedBulk\": [\r\n                {\r\n                    \"size\": 1223488818,\r\n                    \"type\": \"ZGY\",\r\n                    \"url\": \"sd://SNTC/colors/test.zgy\"\r\n                },\r\n                {\r\n                    \"size\": 2653649950,\r\n                    \"type\": \"DIO\",\r\n                    \"url\": \"sd://SNTC/colors/test.DIO\"\r\n                }\r\n            ],\r\n            \"description\": \"A comment or a remark.\",\r\n            \"elevationReferenceTime\": {\r\n                \"elevationFromMsl\": {\r\n                    \"unitKey\": \"ft\",\r\n                    \"value\": 0\r\n                },\r\n                \"name\": \"SRD\",\r\n                \"replacementVelocity\": {\r\n                    \"unitKey\": \"ft/s\",\r\n                    \"value\": 4800\r\n                }\r\n            },\r\n            \"externalIds\": [\r\n                \"Petrel:tenant1/ProjectLouisiana/3491763/a9b46fc4-1840-450a-ac01-d15bdaa086ba:aef0e55c-4fcb-4546-a7a2-9df8f27277a1\"\r\n            ],\r\n            \"locationAtIndexZero\": {\r\n                \"features\": [\r\n                    {\r\n                        \"geometry\": {\r\n                            \"coordinates\": [\r\n                                1276435.2,\r\n                                242030.61,\r\n                                -1234\r\n                            ],\r\n                            \"type\": \"AnyCrsPoint\"\r\n                        },\r\n                        \"type\": \"AnyCrsFeature\"\r\n                    }\r\n                ],\r\n                \"persistableReferenceCrs\": {\r\n                    \"lateBoundCRS\": {\r\n                        \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"26782\"\r\n                        },\r\n                        \"type\": \"LBC\"\r\n                    },\r\n                    \"singleCT\": {\r\n                        \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"15851\"\r\n                        },\r\n                        \"type\": \"ST\"\r\n                    },\r\n                    \"ver\": \"PE_10_3_1\",\r\n                    \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                    \"authCode\": {\r\n                        \"auth\": \"SLB\",\r\n                        \"code\": \"26782079\"\r\n                    },\r\n                    \"type\": \"EBC\"\r\n                },\r\n                \"persistableReferenceUnitZ\": {\r\n                    \"scaleOffset\": {\r\n                        \"scale\": 0.001,\r\n                        \"offset\": 0\r\n                    },\r\n                    \"symbol\": \"ms\",\r\n                    \"baseMeasurement\": {\r\n                        \"ancestry\": \"Time\",\r\n                        \"type\": \"UM\"\r\n                    },\r\n                    \"type\": \"USO\"\r\n                },\r\n                \"type\": \"AnyCrsFeatureCollection\"\r\n            },\r\n            \"locationWGS84\": {\r\n                \"features\": [\r\n                    {\r\n                        \"geometry\": {\r\n                            \"coordinates\": [\r\n                                [\r\n                                    [\r\n                                        -93.60387,\r\n                                        29.312752\r\n                                    ],\r\n                                    [\r\n                                        -93.58827,\r\n                                        29.306248\r\n                                    ],\r\n                                    [\r\n                                        -93.592354,\r\n                                        29.298727\r\n                                    ],\r\n                                    [\r\n                                        -93.60795,\r\n                                        29.305231\r\n                                    ],\r\n                                    [\r\n                                        -93.60387,\r\n                                        29.312752\r\n                                    ]\r\n                                ]\r\n                            ],\r\n                            \"type\": \"Polygon\"\r\n                        },\r\n                        \"properties\": {\r\n                            \"name\": \"Survey 4 INLINE_1_67_Srv3D_1_8_Original\"\r\n                        },\r\n                        \"type\": \"Feature\"\r\n                    }\r\n                ],\r\n                \"type\": \"FeatureCollection\"\r\n            },\r\n            \"name\": \"Survey 4 INLINE_1_67_Srv3D_1_8_Original\",\r\n            \"originalBulk\": {\r\n                \"size\": 2873437400,\r\n                \"type\": \"SEGY\",\r\n                \"url\": \"sd://SNTC/colors/test.segy\"\r\n            },\r\n            \"perimeters\": [\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        [\r\n                                            1276435.2,\r\n                                            242030.61\r\n                                        ],\r\n                                        [\r\n                                            1281357.8,\r\n                                            239567.36\r\n                                        ],\r\n                                        [\r\n                                            1280002.5,\r\n                                            236859.05\r\n                                        ],\r\n                                        [\r\n                                            1275080,\r\n                                            239322.28\r\n                                        ],\r\n                                        [\r\n                                            1276435.2,\r\n                                            242030.61\r\n                                        ]\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsPolygon\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ],\r\n                                \"perimeterType\": \"Full Fold Coverage\"\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"26782\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"26782079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                },\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        [\r\n                                            -93.60371,\r\n                                            29.312513\r\n                                        ],\r\n                                        [\r\n                                            -93.58811,\r\n                                            29.306007\r\n                                        ],\r\n                                        [\r\n                                            -93.59219,\r\n                                            29.298489\r\n                                        ],\r\n                                        [\r\n                                            -93.60779,\r\n                                            29.304993\r\n                                        ],\r\n                                        [\r\n                                            -93.60371,\r\n                                            29.312513\r\n                                        ]\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsPolygon\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ],\r\n                                \"perimeterType\": \"Full Fold Coverage\"\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433],AUTHORITY[\\\"EPSG\\\",4267]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"GCS_North_American_1927\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"4267\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus [4267,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"4267079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                }\r\n            ],\r\n            \"rangeAmplitudeMax\": {\r\n                \"unitKey\": \"amplitude\",\r\n                \"value\": 232467.8\r\n            },\r\n            \"rangeAmplitudeMin\": {\r\n                \"unitKey\": \"amplitude\",\r\n                \"value\": -226153.4\r\n            },\r\n            \"rangeCrosslineIncrement\": 1,\r\n            \"rangeCrosslineStart\": 1,\r\n            \"rangeCrosslineStop\": 34,\r\n            \"rangeInlineIncrement\": 1,\r\n            \"rangeInlineStart\": 1,\r\n            \"rangeInlineStop\": 67,\r\n            \"relationships\": {\r\n                \"binGrid\": {\r\n                    \"id\": \"slb:wke:binGrid-5067af51fe6542968ce8868c01af6cb7\"\r\n                },\r\n                \"seismicSurvey\": {\r\n                    \"id\": \"slb:wke:seismicSurvey3d-62d8fe58-c044-537a-b354-7f3f8e860421\",\r\n                    \"name\": \"ST2013-L\"\r\n                },\r\n                \"usesAssociations\": true\r\n            },\r\n            \"seismicProperty\": \"Instantaneous Amplitude\",\r\n            \"stackAngleRangeMax\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": 10\r\n            },\r\n            \"stackAngleRangeMin\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": 0\r\n            },\r\n            \"stackAzimuthRangeMax\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": 20\r\n            },\r\n            \"stackAzimuthRangeMin\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": -20\r\n            },\r\n            \"stackOffsetRangeMax\": {\r\n                \"unitKey\": \"ftUS\",\r\n                \"value\": 3000\r\n            },\r\n            \"stackOffsetRangeMin\": {\r\n                \"unitKey\": \"ftUS\",\r\n                \"value\": 0\r\n            },\r\n            \"stackSubType\": \"Full\",\r\n            \"stackType\": \"Full\",\r\n            \"storageType\": \"32-BIT\",\r\n            \"textualFileHeader\": [\r\n                \"C 1 CLIENT COMPANY CREW NO                                                      C 2 LINE line1dS AREA MAP ID                                                    C 3 REEL NO DAY-START OF REEL YEAR OBSERVER                                     C 4 INSTRUMENT: DELPH MODEL xx SERIAL NO                                        C 5 DATA TRACES/RECORD 1 AUXILIARY TRACES/RECORD 0 CDP FOLD                     C 6 SAMPLE INTERVAL 333 SAMPLES/TRACE 1496 BITS/IN 16 BYTES/SAMPLE 2            C 7 RECORDING FORMAT FORMAT THIS REEL MEASUREMENT SYSTEM                        C 8 SAMPLE CODE: FIXED PT                                                       C 9 GAIN TYPE: FIXED                                                            C10 FILTERS: ALIAS 1500HZ NOTCH HZ BAND - HZ SLOPE - DB/OCT                     C11 SOURCE: TYPE NUMBER/POINT POINT INTERVAL                                    C12 PATTERN: LENGTH WIDTH                                                       C13 SWEEP: START HZ END HZ LENGTH MS CHANEL NO TYPE                             C14 TAPER: START LENGTH MS END LENGTH MS TYPE                                   C15 SPREAD: OFFSET MAX DISTANCE GROUP INTERVAL                                  C16 GEOPHONES: PER GROUP SPACING FREQUENCY MFG MODEL                            C17 PATTERN: LENGTH WIDTH                                                       C18 TRACES SORTED BY: RECORD                                                    C19 AMPLITUDE RECOVERY: NONE                                                    C20 MAP PROJECTION ZONE ID COORDINATE UNITS                                     C21 PROCESSING:                                                                 C22 PROCESSING:                                                                 C23                                                                             C24                                                                             C25                                                                             C26                                                                             C27                                                                             C28                                                                             C29                                                                             C30                                                                             C31                                                                             C32                                                                             C33                                                                             C34                                                                             C35                                                                             C36                                                                             C37                                                                             C38                                                                             C39                                                                             C40 END EBCDIC                                                                  \"\r\n            ],\r\n            \"verticalDomain\": \"Elevation time (two-way travel time)\",\r\n            \"verticalIncrement\": {\r\n                \"unitKey\": \"ms\",\r\n                \"value\": -4\r\n            },\r\n            \"verticalSampleCount\": 1000,\r\n            \"verticalStart\": {\r\n                \"unitKey\": \"ms\",\r\n                \"value\": 0\r\n            },\r\n            \"verticalStop\": {\r\n                \"unitKey\": \"ms\",\r\n                \"value\": -3996\r\n            },\r\n            \"vintage\": \"ST2013-InstantaneousAmplitude\",\r\n            \"waveType\": \"PP\"\r\n        },\r\n        \"kind\": \"{{datapartition}}:wks:seismic3d:1.0.5\",\r\n        \"legal\": {\r\n            \"legaltags\": [\r\n                \"{{legaltag01}}\"\r\n            ],\r\n            \"otherRelevantDataCountries\": [\r\n                \"US\",\r\n                \"BE\",\r\n                \"NO\",\r\n                \"IN\"\r\n            ]\r\n        },\r\n        \"meta\": [\r\n            {\r\n                \"kind\": \"Unit\",\r\n                \"name\": \"ft/s\",\r\n                \"persistableReference\": {\r\n                    \"scaleOffset\": {\r\n                        \"scale\": 0.3048,\r\n                        \"offset\": 0\r\n                    },\r\n                    \"symbol\": \"ft/s\",\r\n                    \"baseMeasurement\": {\r\n                        \"ancestry\": \"Velocity\",\r\n                        \"type\": \"UM\"\r\n                    },\r\n                    \"type\": \"USO\"\r\n                },\r\n                \"propertyNames\": [\r\n                    \"elevationReferenceTime.replacementVelocity.value\"\r\n                ]\r\n            },\r\n            {\r\n                \"kind\": \"Unit\",\r\n                \"name\": \"ftUS\",\r\n                \"persistableReference\": {\r\n                    \"scaleOffset\": {\r\n                        \"scale\": 0.3048006,\r\n                        \"offset\": 0\r\n                    },\r\n                    \"symbol\": \"ftUS\",\r\n                    \"baseMeasurement\": {\r\n                        \"ancestry\": \"Length\",\r\n                        \"type\": \"UM\"\r\n                    },\r\n                    \"type\": \"USO\"\r\n                },\r\n                \"propertyNames\": [\r\n                    \"stackOffsetRangeMin.value\",\r\n                    \"stackOffsetRangeMax.value\"\r\n                ]\r\n            },\r\n            {\r\n                \"kind\": \"DateTime\",\r\n                \"name\": \"datetime\",\r\n                \"persistableReference\": {\r\n                    \"format\": \"yyyy-MM-ddTHH:mm:ssZ\",\r\n                    \"timeZone\": \"UTC\",\r\n                    \"type\": \"DTM\"\r\n                },\r\n                \"propertyNames\": [\r\n                    \"dateCreated\",\r\n                    \"dateModified\"\r\n                ]\r\n            },\r\n            {\r\n                \"kind\": \"Measurement\",\r\n                \"name\": \"ShortTime\",\r\n                \"persistableReference\": {\r\n                    \"ancestry\": \"Time.Short_Time\",\r\n                    \"type\": \"UM\"\r\n                },\r\n                \"propertyNames\": [\r\n                    \"verticalDomain\"\r\n                ]\r\n            },\r\n            {\r\n                \"kind\": \"Unit\",\r\n                \"name\": \"ms\",\r\n                \"persistableReference\": {\r\n                    \"scaleOffset\": {\r\n                        \"scale\": 0.001,\r\n                        \"offset\": 0\r\n                    },\r\n                    \"symbol\": \"ms\",\r\n                    \"baseMeasurement\": {\r\n                        \"ancestry\": \"Time\",\r\n                        \"type\": \"UM\"\r\n                    },\r\n                    \"type\": \"USO\"\r\n                },\r\n                \"propertyNames\": [\r\n                    \"verticalStart.value\",\r\n                    \"verticalIncrement.value\",\r\n                    \"verticalStop.value\"\r\n                ]\r\n            },\r\n            {\r\n                \"kind\": \"Unit\",\r\n                \"name\": \"amplitude\",\r\n                \"persistableReference\": {\r\n                    \"scaleOffset\": {\r\n                        \"scale\": 1,\r\n                        \"offset\": 0\r\n                    },\r\n                    \"symbol\": \"----\",\r\n                    \"baseMeasurement\": {\r\n                        \"ancestry\": \"Dimensionless\",\r\n                        \"type\": \"UM\"\r\n                    },\r\n                    \"type\": \"USO\"\r\n                },\r\n                \"propertyNames\": [\r\n                    \"rangeAmplitudeMax.value\",\r\n                    \"rangeAmplitudeMin.value\"\r\n                ]\r\n            },\r\n            {\r\n                \"kind\": \"Unit\",\r\n                \"name\": \"ft\",\r\n                \"persistableReference\": {\r\n                    \"scaleOffset\": {\r\n                        \"scale\": 0.3048,\r\n                        \"offset\": 0\r\n                    },\r\n                    \"symbol\": \"ft\",\r\n                    \"baseMeasurement\": {\r\n                        \"ancestry\": \"Length\",\r\n                        \"type\": \"UM\"\r\n                    },\r\n                    \"type\": \"USO\"\r\n                },\r\n                \"propertyNames\": [\r\n                    \"elevationReferenceTime.elevationFromMsl.value\"\r\n                ]\r\n            },\r\n            {\r\n                \"kind\": \"Measurement\",\r\n                \"name\": \"seismicProperty\",\r\n                \"persistableReference\": {\r\n                    \"ancestry\": \"Dimensionless.Amplitude.Acoustic_Amplitude.Analytic_Trace.Instantaneous_Amplitude\",\r\n                    \"type\": \"UM\"\r\n                },\r\n                \"propertyNames\": [\r\n                    \"seismicProperty\"\r\n                ]\r\n            },\r\n            {\r\n                \"kind\": \"Unit\",\r\n                \"name\": \"deg\",\r\n                \"persistableReference\": {\r\n                    \"scaleOffset\": {\r\n                        \"scale\": 0.017453292,\r\n                        \"offset\": 0\r\n                    },\r\n                    \"symbol\": \"dega\",\r\n                    \"baseMeasurement\": {\r\n                        \"ancestry\": \"Plane_Angle\",\r\n                        \"type\": \"UM\"\r\n                    },\r\n                    \"type\": \"USO\"\r\n                },\r\n                \"propertyNames\": [\r\n                    \"stackAngleRangeMin.value\",\r\n                    \"stackAngleRangeMax.value\",\r\n                    \"stackAzimuthRangeMin.value\",\r\n                    \"stackAzimuthRangeMax.value\"\r\n                ]\r\n            }\r\n        ],\r\n        \"version\": 1040891613125385\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dataset01}}?path={{path01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dataset01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{path01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET GET AND CHECK IF THE RECORD_TYPE IS USED IN THE SEISMICMETA_GUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check content type\", function () {",
									"   pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"",
									"pm.test(\"Dataset name\", function () {",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"dataset01\"));",
									"});",
									"",
									"pm.test(\"tenant\", function () {",
									"    pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"});",
									"",
									"pm.test(\"subproject\", function () {",
									"    pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"});",
									"",
									"pm.test(\"path\", function () {",
									"    pm.expect(jsonData.path).to.eql(\"/\"+pm.environment.get(\"path01\")+\"/\");",
									"});",
									"",
									"pm.test(\"ltag\", function () {",
									"    pm.expect(jsonData.ltag).to.eql(pm.environment.get('legaltag01'));",
									"});",
									"",
									"pm.test(\"Dates are present\", function () {",
									"    pm.expect(jsonData.created_date).to.exist;",
									"    pm.expect(jsonData.last_modified_date).to.exist;",
									"});",
									"",
									"pm.test(\"sbit_count\", function () {",
									"    pm.expect(jsonData.sbit_count).to.eql(1);",
									"});",
									"",
									"pm.test(\"sbit\", function () {",
									"    postman.setEnvironmentVariable(\"sbit\", jsonData.sbit);",
									"});",
									"",
									"pm.test(\"gcsurl\", () => {",
									"    postman.setEnvironmentVariable(\"gcsBucketName\", jsonData.gcsurl.split('/')[0]);",
									"    postman.setEnvironmentVariable(\"gcsObjectPrefix\", jsonData.gcsurl.split('/')[1]);",
									"})",
									"",
									"pm.test(\"Check gtag\", function () {",
									"    pm.expect(jsonData.gtags.length).to.eql(1);",
									"    pm.expect(jsonData.gtags[0]).to.eql(\"tagA\");",
									"});",
									"",
									"pm.test(\"Check seismicmetadata\", () => {",
									"    pm.expect(jsonData.seismicmeta).not.equal(null);",
									"    pm.expect(jsonData.seismicmeta.id).not.equal(null);",
									"    pm.expect(jsonData.seismicmeta.kind).to.eql(pm.environment.get('datapartition') + \":wks:seismic3d:1.0.5\");",
									"    pm.expect(jsonData.seismicmeta.acl).not.equal(null);",
									"    pm.expect(jsonData.seismicmeta.acl.viewers).not.equal(null);",
									"    pm.expect(jsonData.seismicmeta.acl.owners).not.equal(null);",
									"    pm.expect(jsonData.seismicmeta.legal).not.equal(null);",
									"    pm.expect(jsonData.seismicmeta.legal.legaltags).not.equal(null);",
									"    pm.expect(jsonData.seismicmeta.legal.otherRelevantDataCountries).to.contain(\"US\");",
									"    pm.expect(jsonData.seismicmeta.data.binNodePositions[0].features[0].geometry.coordinates[0][1]).to.equal(242030.61);",
									"    pm.expect(jsonData.seismicmeta.data.binNodePositions[0].features[0].geometry.type).to.equal(\"AnyCrsMultiPoint\");",
									"});",
									"",
									"pm.test(\"Check the record_type inclusion in dataset seismicmeta_guid\", ()=> {",
									"    const dsx01_record_type = pm.environment.get(\"dsx01_record_type\")",
									"    const record_type = jsonData.seismicmeta_guid.split(\":\")[1] ",
									"    pm.expect(dsx01_record_type).to.equal(record_type)",
									"}) ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dataset01}}?path={{path01}}&seismicmeta=true",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dataset01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{path01}}"
								},
								{
									"key": "seismicmeta",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET DELETE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dataset01}}?path={{path01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dataset01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{path01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET REGISTER WITH SEISMICMETA (Customer_acl_ID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check content type\", function () {",
									"   pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"",
									"pm.test(\"Dataset name\", function () {",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"dataset01\"));",
									"});",
									"",
									"pm.test(\"tenant\", function () {",
									"    pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"});",
									"",
									"pm.test(\"subproject\", function () {",
									"    pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"});",
									"",
									"pm.test(\"path\", function () {",
									"    pm.expect(jsonData.path).to.eql(\"/\"+pm.environment.get(\"path01\")+\"/\");",
									"});",
									"",
									"pm.test(\"ltag\", function () {",
									"    pm.expect(jsonData.ltag).to.eql(pm.environment.get('legaltag01'));",
									"});",
									"",
									"pm.test(\"Dates are present\", function () {",
									"    pm.expect(jsonData.created_date).to.exist;",
									"    pm.expect(jsonData.last_modified_date).to.exist;",
									"});",
									"",
									"pm.test(\"sbit_count\", function () {",
									"    pm.expect(jsonData.sbit_count).to.eql(1);",
									"});",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\r\n    \"kind\": \"slb:wks:seismic3d:1.0.5\",\r\n  \"acl\": {\r\n\r\n    \"viewers\": [\r\n\r\n      \"data.default.viewers@slb.p4d.cloud.slb-ds.com\"\r\n\r\n    ],\r\n\r\n    \"owners\": [\r\n\r\n      \"data.default.owners@slb.p4d.cloud.slb-ds.com\"\r\n\r\n    ]\r\n\r\n },\r\n\r\n    \"id\": \"slb:seismic:XGdNU3Wa5TEST\",\r\n    \"legal\": {\r\n      \"legaltags\": [\r\n        \"slb-NO-Testdata\"\r\n      ],\r\n      \"otherRelevantDataCountries\": [\r\n        \"US\"\r\n      ]\r\n    },\r\n    \"data\": {\r\n      \"msg\": \"hello world, from Data Ecosystem\"\r\n    }\r\n  }"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dataset01}}?path={{path01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dataset01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{path01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET GET AND CHECK IF  it exist or not",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check content type\", function () {",
									"   pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"",
									"pm.test(\"Dataset name\", function () {",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"dataset01\"));",
									"});",
									"",
									"pm.test(\"tenant\", function () {",
									"    pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"});",
									"",
									"pm.test(\"subproject\", function () {",
									"    pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"});",
									"",
									"pm.test(\"path\", function () {",
									"    pm.expect(jsonData.path).to.eql(\"/\"+pm.environment.get(\"path01\")+\"/\");",
									"});",
									"",
									"pm.test(\"ltag\", function () {",
									"    pm.expect(jsonData.ltag).to.eql(pm.environment.get('legaltag01'));",
									"});",
									"",
									"pm.test(\"Dates are present\", function () {",
									"    pm.expect(jsonData.created_date).to.exist;",
									"    pm.expect(jsonData.last_modified_date).to.exist;",
									"});",
									"",
									"pm.test(\"sbit_count\", function () {",
									"    pm.expect(jsonData.sbit_count).to.eql(1);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dataset01}}?path={{path01}}&seismicmeta=true",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dataset01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{path01}}"
								},
								{
									"key": "seismicmeta",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET DELETE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dataset01}}?path={{path01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dataset01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{path01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET REGISTER WITHOUT SEISMICMETA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dataset01}}?path={{path01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dataset01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{path01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET PATCH + SEISMICMETA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check seismicmetadata\", () => {",
									"    pm.expect(jsonData.seismicmeta_guid).not.equal(null);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"seismicmeta\": {\r\n        \"data\": {\r\n            \"additionalMetaData\": [\r\n                {\r\n                    \"name\": \"SOURCE BARCODE\",\r\n                    \"value\": 3843967263,\r\n                    \"valueAsString\": \"3843967263\"\r\n                },\r\n                {\r\n                    \"name\": \"ORIGINAL FILE NAME\",\r\n                    \"value\": \"1_67_Srv3D_1_8_Original.sgy\",\r\n                    \"valueAsString\": \"1_67_Srv3D_1_8_Original.sgy\"\r\n                },\r\n                {\r\n                    \"name\": \"BIN SPACING\",\r\n                    \"value\": 90,\r\n                    \"valueAsString\": \"90\"\r\n                }\r\n            ],\r\n            \"binGridOperation\": {\r\n                \"binGridOriginEasting\": 1276435.2,\r\n                \"binGridOriginI\": 1,\r\n                \"binGridOriginJ\": 1,\r\n                \"binGridOriginNorthing\": 242030.61,\r\n                \"binGridScaleFactor\": 1,\r\n                \"binNodeIncrementI\": 1,\r\n                \"binNodeIncrementJ\": 1,\r\n                \"binWidthI\": 83.39992,\r\n                \"binWidthJ\": 91.77242,\r\n                \"crsKey\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                \"mapGridBearingJ\": 206.58368,\r\n                \"persistableReferenceCrs\": {\r\n                    \"lateBoundCRS\": {\r\n                        \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"26782\"\r\n                        },\r\n                        \"type\": \"LBC\"\r\n                    },\r\n                    \"singleCT\": {\r\n                        \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"15851\"\r\n                        },\r\n                        \"type\": \"ST\"\r\n                    },\r\n                    \"ver\": \"PE_10_3_1\",\r\n                    \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                    \"authCode\": {\r\n                        \"auth\": \"SLB\",\r\n                        \"code\": \"26782079\"\r\n                    },\r\n                    \"type\": \"EBC\"\r\n                },\r\n                \"transformationMethodNumber\": 1049,\r\n                \"unitKeyBearing\": \"dega\"\r\n            },\r\n            \"binNodePositions\": [\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        1276435.2,\r\n                                        242030.61\r\n                                    ],\r\n                                    [\r\n                                        1281357.8,\r\n                                        239567.36\r\n                                    ],\r\n                                    [\r\n                                        1280002.5,\r\n                                        236859.05\r\n                                    ],\r\n                                    [\r\n                                        1275080,\r\n                                        239322.28\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsMultiPoint\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ]\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"26782\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"26782079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                },\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        -93.60371,\r\n                                        29.312513\r\n                                    ],\r\n                                    [\r\n                                        -93.58811,\r\n                                        29.306007\r\n                                    ],\r\n                                    [\r\n                                        -93.59219,\r\n                                        29.298489\r\n                                    ],\r\n                                    [\r\n                                        -93.60779,\r\n                                        29.304993\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsMultiPoint\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ]\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433],AUTHORITY[\\\"EPSG\\\",4267]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"GCS_North_American_1927\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"4267\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus [4267,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"4267079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                },\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        -93.60387,\r\n                                        29.312752\r\n                                    ],\r\n                                    [\r\n                                        -93.58827,\r\n                                        29.306248\r\n                                    ],\r\n                                    [\r\n                                        -93.592354,\r\n                                        29.298727\r\n                                    ],\r\n                                    [\r\n                                        -93.60795,\r\n                                        29.305231\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsMultiPoint\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ]\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"wkt\": \"GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433],AUTHORITY[\\\"EPSG\\\",4326]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"GCS_WGS_1984\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"4326\"\r\n                        },\r\n                        \"type\": \"LBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                }\r\n            ],\r\n            \"classification\": \"Post-stack, time-migrated\",\r\n            \"dateCreated\": \"2013-03-22T11:16:03Z\",\r\n            \"dateModified\": \"2013-03-22T11:16:03Z\",\r\n            \"derivedBulk\": [\r\n                {\r\n                    \"size\": 1223488818,\r\n                    \"type\": \"ZGY\",\r\n                    \"url\": \"sd://SNTC/colors/test.zgy\"\r\n                },\r\n                {\r\n                    \"size\": 2653649950,\r\n                    \"type\": \"DIO\",\r\n                    \"url\": \"sd://SNTC/colors/test.DIO\"\r\n                }\r\n            ],\r\n            \"description\": \"A comment or a remark.\",\r\n            \"elevationReferenceTime\": {\r\n                \"elevationFromMsl\": {\r\n                    \"unitKey\": \"ft\",\r\n                    \"value\": 0\r\n                },\r\n                \"name\": \"SRD\",\r\n                \"replacementVelocity\": {\r\n                    \"unitKey\": \"ft/s\",\r\n                    \"value\": 4800\r\n                }\r\n            },\r\n            \"externalIds\": [\r\n                \"Petrel:tenant1/ProjectLouisiana/3491763/a9b46fc4-1840-450a-ac01-d15bdaa086ba:aef0e55c-4fcb-4546-a7a2-9df8f27277a1\"\r\n            ],\r\n            \"locationAtIndexZero\": {\r\n                \"features\": [\r\n                    {\r\n                        \"geometry\": {\r\n                            \"coordinates\": [\r\n                                1276435.2,\r\n                                242030.61,\r\n                                -1234\r\n                            ],\r\n                            \"type\": \"AnyCrsPoint\"\r\n                        },\r\n                        \"type\": \"AnyCrsFeature\"\r\n                    }\r\n                ],\r\n                \"persistableReferenceCrs\": {\r\n                    \"lateBoundCRS\": {\r\n                        \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"26782\"\r\n                        },\r\n                        \"type\": \"LBC\"\r\n                    },\r\n                    \"singleCT\": {\r\n                        \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"15851\"\r\n                        },\r\n                        \"type\": \"ST\"\r\n                    },\r\n                    \"ver\": \"PE_10_3_1\",\r\n                    \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                    \"authCode\": {\r\n                        \"auth\": \"SLB\",\r\n                        \"code\": \"26782079\"\r\n                    },\r\n                    \"type\": \"EBC\"\r\n                },\r\n                \"persistableReferenceUnitZ\": {\r\n                    \"scaleOffset\": {\r\n                        \"scale\": 0.001,\r\n                        \"offset\": 0\r\n                    },\r\n                    \"symbol\": \"ms\",\r\n                    \"baseMeasurement\": {\r\n                        \"ancestry\": \"Time\",\r\n                        \"type\": \"UM\"\r\n                    },\r\n                    \"type\": \"USO\"\r\n                },\r\n                \"type\": \"AnyCrsFeatureCollection\"\r\n            },\r\n            \"locationWGS84\": {\r\n                \"features\": [\r\n                    {\r\n                        \"geometry\": {\r\n                            \"coordinates\": [\r\n                                [\r\n                                    [\r\n                                        -93.60387,\r\n                                        29.312752\r\n                                    ],\r\n                                    [\r\n                                        -93.58827,\r\n                                        29.306248\r\n                                    ],\r\n                                    [\r\n                                        -93.592354,\r\n                                        29.298727\r\n                                    ],\r\n                                    [\r\n                                        -93.60795,\r\n                                        29.305231\r\n                                    ],\r\n                                    [\r\n                                        -93.60387,\r\n                                        29.312752\r\n                                    ]\r\n                                ]\r\n                            ],\r\n                            \"type\": \"Polygon\"\r\n                        },\r\n                        \"properties\": {\r\n                            \"name\": \"Survey 4 INLINE_1_67_Srv3D_1_8_Original\"\r\n                        },\r\n                        \"type\": \"Feature\"\r\n                    }\r\n                ],\r\n                \"type\": \"FeatureCollection\"\r\n            },\r\n            \"name\": \"Survey 4 INLINE_1_67_Srv3D_1_8_Original\",\r\n            \"originalBulk\": {\r\n                \"size\": 2873437400,\r\n                \"type\": \"SEGY\",\r\n                \"url\": \"sd://SNTC/colors/test.segy\"\r\n            },\r\n            \"perimeters\": [\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        [\r\n                                            1276435.2,\r\n                                            242030.61\r\n                                        ],\r\n                                        [\r\n                                            1281357.8,\r\n                                            239567.36\r\n                                        ],\r\n                                        [\r\n                                            1280002.5,\r\n                                            236859.05\r\n                                        ],\r\n                                        [\r\n                                            1275080,\r\n                                            239322.28\r\n                                        ],\r\n                                        [\r\n                                            1276435.2,\r\n                                            242030.61\r\n                                        ]\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsPolygon\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ],\r\n                                \"perimeterType\": \"Full Fold Coverage\"\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"26782\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"26782079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                },\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        [\r\n                                            -93.60371,\r\n                                            29.312513\r\n                                        ],\r\n                                        [\r\n                                            -93.58811,\r\n                                            29.306007\r\n                                        ],\r\n                                        [\r\n                                            -93.59219,\r\n                                            29.298489\r\n                                        ],\r\n                                        [\r\n                                            -93.60779,\r\n                                            29.304993\r\n                                        ],\r\n                                        [\r\n                                            -93.60371,\r\n                                            29.312513\r\n                                        ]\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsPolygon\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ],\r\n                                \"perimeterType\": \"Full Fold Coverage\"\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433],AUTHORITY[\\\"EPSG\\\",4267]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"GCS_North_American_1927\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"4267\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus [4267,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"4267079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                }\r\n            ],\r\n            \"rangeAmplitudeMax\": {\r\n                \"unitKey\": \"amplitude\",\r\n                \"value\": 232467.8\r\n            },\r\n            \"rangeAmplitudeMin\": {\r\n                \"unitKey\": \"amplitude\",\r\n                \"value\": -226153.4\r\n            },\r\n            \"rangeCrosslineIncrement\": 1,\r\n            \"rangeCrosslineStart\": 1,\r\n            \"rangeCrosslineStop\": 34,\r\n            \"rangeInlineIncrement\": 1,\r\n            \"rangeInlineStart\": 1,\r\n            \"rangeInlineStop\": 67,\r\n            \"relationships\": {\r\n                \"binGrid\": {\r\n                    \"id\": \"slb:wke:binGrid-5067af51fe6542968ce8868c01af6cb7\"\r\n                },\r\n                \"seismicSurvey\": {\r\n                    \"id\": \"slb:wke:seismicSurvey3d-62d8fe58-c044-537a-b354-7f3f8e860421\",\r\n                    \"name\": \"ST2013-L\"\r\n                },\r\n                \"usesAssociations\": true\r\n            },\r\n            \"seismicProperty\": \"Instantaneous Amplitude\",\r\n            \"stackAngleRangeMax\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": 10\r\n            },\r\n            \"stackAngleRangeMin\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": 0\r\n            },\r\n            \"stackAzimuthRangeMax\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": 20\r\n            },\r\n            \"stackAzimuthRangeMin\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": -20\r\n            },\r\n            \"stackOffsetRangeMax\": {\r\n                \"unitKey\": \"ftUS\",\r\n                \"value\": 3000\r\n            },\r\n            \"stackOffsetRangeMin\": {\r\n                \"unitKey\": \"ftUS\",\r\n                \"value\": 0\r\n            },\r\n            \"stackSubType\": \"Full\",\r\n            \"stackType\": \"Full\",\r\n            \"storageType\": \"32-BIT\",\r\n            \"textualFileHeader\": [\r\n                \"C 1 CLIENT COMPANY CREW NO                                                      C 2 LINE line1dS AREA MAP ID                                                    C 3 REEL NO DAY-START OF REEL YEAR OBSERVER                                     C 4 INSTRUMENT: DELPH MODEL xx SERIAL NO                                        C 5 DATA TRACES/RECORD 1 AUXILIARY TRACES/RECORD 0 CDP FOLD                     C 6 SAMPLE INTERVAL 333 SAMPLES/TRACE 1496 BITS/IN 16 BYTES/SAMPLE 2            C 7 RECORDING FORMAT FORMAT THIS REEL MEASUREMENT SYSTEM                        C 8 SAMPLE CODE: FIXED PT                                                       C 9 GAIN TYPE: FIXED                                                            C10 FILTERS: ALIAS 1500HZ NOTCH HZ BAND - HZ SLOPE - DB/OCT                     C11 SOURCE: TYPE NUMBER/POINT POINT INTERVAL                                    C12 PATTERN: LENGTH WIDTH                                                       C13 SWEEP: START HZ END HZ LENGTH MS CHANEL NO TYPE                             C14 TAPER: START LENGTH MS END LENGTH MS TYPE                                   C15 SPREAD: OFFSET MAX DISTANCE GROUP INTERVAL                                  C16 GEOPHONES: PER GROUP SPACING FREQUENCY MFG MODEL                            C17 PATTERN: LENGTH WIDTH                                                       C18 TRACES SORTED BY: RECORD                                                    C19 AMPLITUDE RECOVERY: NONE                                                    C20 MAP PROJECTION ZONE ID COORDINATE UNITS                                     C21 PROCESSING:                                                                 C22 PROCESSING:                                                                 C23                                                                             C24                                                                             C25                                                                             C26                                                                             C27                                                                             C28                                                                             C29                                                                             C30                                                                             C31                                                                             C32                                                                             C33                                                                             C34                                                                             C35                                                                             C36                                                                             C37                                                                             C38                                                                             C39                                                                             C40 END EBCDIC                                                                  \"\r\n            ],\r\n            \"verticalDomain\": \"Elevation time (two-way travel time)\",\r\n            \"verticalIncrement\": {\r\n                \"unitKey\": \"ms\",\r\n                \"value\": -4\r\n            },\r\n            \"verticalSampleCount\": 1000,\r\n            \"verticalStart\": {\r\n                \"unitKey\": \"ms\",\r\n                \"value\": 0\r\n            },\r\n            \"verticalStop\": {\r\n                \"unitKey\": \"ms\",\r\n                \"value\": -3996\r\n            },\r\n            \"vintage\": \"ST2013-InstantaneousAmplitude\",\r\n            \"waveType\": \"PP\"\r\n        },\r\n        \"id\": \"{{datapartition}}:seismic3d:{{randomStringId}}\",\r\n        \"kind\": \"{{datapartition}}:wks:seismic3d:1.0.5\",\r\n        \"legal\": {\r\n            \"legaltags\": [\r\n                \"{{legaltag01}}\"\r\n            ],\r\n            \"otherRelevantDataCountries\": [\r\n                \"US\",\r\n                \"BE\",\r\n                \"NO\",\r\n                \"IN\"\r\n            ]\r\n        },\r\n        \"version\": 1040891613125385\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dataset01}}?path={{path01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dataset01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{path01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET DELETE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dataset01}}?path={{path01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dataset01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{path01}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "tags",
			"item": [
				{
					"name": "REGISTER TAGGED DATA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Dataset name\", function () {",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"taggedData01\"));",
									"});",
									"",
									"pm.test(\"path\", function () {",
									"    pm.expect(jsonData.path).to.eql(\"/\"+pm.environment.get(\"taggedPath01\")+\"/\");",
									"});",
									"",
									"",
									"pm.test(\"Check gtag\", function () {",
									"    pm.expect(jsonData.gtags.length).to.eql(2);",
									"    pm.expect(jsonData.gtags[0]).to.eql(pm.environment.get(\"tag1\"));",
									"    pm.expect(jsonData.gtags[1]).to.eql(pm.environment.get(\"tag2\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function makeid(lenght) {\r",
									"\r",
									"    var result = '';\r",
									"    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"    var charactersLength = characters.length;\r",
									"\r",
									"    for (var index = 0; index < arguments[0]; index++) {\r",
									"    result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"pm.environment.set(\"taggedData01\", makeid(8));\r",
									"pm.environment.set(\"taggedPath01\", makeid(3)+\"/\"+makeid(3)+\"/\"+makeid(3));\r",
									"pm.environment.set(\"tagX\", makeid(8));\r",
									"pm.environment.set(\"tag1\", makeid(8));\r",
									"pm.environment.set(\"tag2\", makeid(8));\r",
									"pm.environment.set(\"tag3\", makeid(8));\r",
									"pm.environment.set(\"tag4\", makeid(8));\r",
									"pm.environment.set(\"tag5\", makeid(8));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"gtags\": [\r\n    \"{{tag1}}\",\r\n    \"{{tag2}}\"\r\n  ]\r\n} \r\n \r\n"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{taggedData01}}?path={{taggedPath01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{taggedData01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{taggedPath01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "REGISTER TAGGED DATA 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Dataset name\", function () {",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"taggedData02\"));",
									"});",
									"",
									"pm.test(\"path\", function () {",
									"    pm.expect(jsonData.path).to.eql(\"/\"+pm.environment.get(\"taggedPath02\")+\"/\");",
									"});",
									"",
									"",
									"pm.test(\"Check gtag\", function () {",
									"    pm.expect(jsonData.gtags.length).to.eql(3);",
									"    pm.expect(jsonData.gtags[0]).to.eql(pm.environment.get(\"tag2\"));",
									"    pm.expect(jsonData.gtags[1]).to.eql(pm.environment.get(\"tag3\"));",
									"    pm.expect(jsonData.gtags[2]).to.eql(pm.environment.get(\"tag4\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function makeid(lenght) {\r",
									"\r",
									"    var result = '';\r",
									"    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"    var charactersLength = characters.length;\r",
									"\r",
									"    for (var index = 0; index < arguments[0]; index++) {\r",
									"    result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"pm.environment.set(\"taggedData02\", makeid(8));\r",
									"pm.environment.set(\"taggedPath02\", makeid(3)+\"/\"+makeid(3)+\"/\"+makeid(3));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"gtags\": [\r\n    \"{{tag2}}\",\r\n    \"{{tag3}}\",\r\n    \"{{tag4}}\"\r\n  ]\r\n} \r\n \r\n"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{taggedData02}}?path={{taggedPath02}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{taggedData02}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{taggedPath02}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "REGISTER TAGGED DATA 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Dataset name\", function () {",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"taggedData03\"));",
									"});",
									"",
									"pm.test(\"path\", function () {",
									"    pm.expect(jsonData.path).to.eql(\"/\"+pm.environment.get(\"taggedPath03\")+\"/\");",
									"});",
									"",
									"",
									"pm.test(\"Check gtag\", function () {",
									"    pm.expect(jsonData.gtags.length).to.eql(4);",
									"    pm.expect(jsonData.gtags[0]).to.eql(pm.environment.get(\"tag1\"));",
									"    pm.expect(jsonData.gtags[1]).to.eql(pm.environment.get(\"tag3\"));",
									"    pm.expect(jsonData.gtags[2]).to.eql(pm.environment.get(\"tag4\"));",
									"    pm.expect(jsonData.gtags[3]).to.eql(pm.environment.get(\"tag5\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function makeid(lenght) {\r",
									"\r",
									"    var result = '';\r",
									"    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"    var charactersLength = characters.length;\r",
									"\r",
									"    for (var index = 0; index < arguments[0]; index++) {\r",
									"    result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"pm.environment.set(\"taggedData03\", makeid(8));\r",
									"pm.environment.set(\"taggedPath03\", makeid(3)+\"/\"+makeid(3)+\"/\"+makeid(3));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"gtags\": [\r\n    \"{{tag1}}\",\r\n    \"{{tag3}}\",\r\n    \"{{tag4}}\",\r\n    \"{{tag5}}\"\r\n  ]\r\n} \r\n \r\n"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{taggedData03}}?path={{taggedPath03}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{taggedData03}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{taggedPath03}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SEARCH BY FAKE TAG",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check content type\", function () {",
									"   pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"",
									"pm.test(\"Data List\", function () {",
									"    pm.expect(jsonData.length).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}?gtag[]=tagXX",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}"
							],
							"query": [
								{
									"key": "gtag[]",
									"value": "tagXX"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SEARCH BY SINGLE TAG",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check content type\", function () {",
									"   pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"",
									"pm.test(\"Tagged Data List\", function () {",
									"    pm.expect(jsonData.length).to.eql(2);",
									"});",
									"",
									"pm.test(\"Find tagged data in list\", function () {",
									"    var data1 = _.find(pm.response.json(), { ",
									"    name: (pm.environment.get(\"taggedData03\"))",
									"    });",
									"    pm.expect(data1.path).to.eql(\"/\"+pm.environment.get(\"taggedPath03\")+\"/\");",
									"    ",
									"    var data2 = _.find(pm.response.json(), { ",
									"    name: (pm.environment.get(\"taggedData01\"))",
									"    });",
									"    pm.expect(data2.path).to.eql(\"/\"+pm.environment.get(\"taggedPath01\")+\"/\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}?gtag[]={{tag1}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}"
							],
							"query": [
								{
									"key": "gtag[]",
									"value": "{{tag1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SEARCH BY MULTIPLE TAG",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check content type\", function () {",
									"   pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"",
									"pm.test(\"Data List\", function () {",
									"    pm.expect(jsonData.length).to.eql(2);",
									"});",
									"",
									"pm.test(\"Find the tagged data in list\", function () {",
									"    var data1 = _.find(pm.response.json(), { ",
									"    name: (pm.environment.get(\"taggedData03\"))",
									"    });",
									"    pm.expect(data1.path).to.eql(\"/\"+pm.environment.get(\"taggedPath03\")+\"/\");",
									"    var data2 = _.find(pm.response.json(), { ",
									"    name: (pm.environment.get(\"taggedData02\"))",
									"    });",
									"    pm.expect(data2.path).to.eql(\"/\"+pm.environment.get(\"taggedPath02\")+\"/\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}?gtag={{tag3}}&gtag={{tag4}}&=",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}"
							],
							"query": [
								{
									"key": "gtag",
									"value": "{{tag3}}"
								},
								{
									"key": "gtag",
									"value": "{{tag4}}"
								},
								{
									"key": "",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ADD TAG",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check content type\", function () {",
									"   pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{taggedData02}}/gtags?path={{taggedPath02}}&gtag={{tag1}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{taggedData02}}",
								"gtags"
							],
							"query": [
								{
									"key": "path",
									"value": "{{taggedPath02}}"
								},
								{
									"key": "gtag",
									"value": "{{tag1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CHECK ADDED TAG",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Dataset name\", function () {",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"taggedData02\"));",
									"});",
									"",
									"pm.test(\"path\", function () {",
									"    pm.expect(jsonData.path).to.eql(\"/\"+pm.environment.get(\"taggedPath02\")+\"/\");",
									"});",
									"",
									"pm.test(\"gtag is added\", function () {",
									"    pm.expect(jsonData.gtags[0]).to.eql(pm.environment.get(\"tag2\"));",
									"    pm.expect(jsonData.gtags[1]).to.eql(pm.environment.get(\"tag3\"));",
									"    pm.expect(jsonData.gtags[2]).to.eql(pm.environment.get(\"tag4\"));",
									"    pm.expect(jsonData.gtags[3]).to.eql(pm.environment.get(\"tag1\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{taggedData02}}?path={{taggedPath02}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{taggedData02}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{taggedPath02}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SEARCH BY ADDED TAG",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check content type\", function () {",
									"   pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"",
									"pm.test(\"Tagged Data List\", function () {",
									"    pm.expect(jsonData.length).to.eql(3);",
									"});",
									"",
									"pm.test(\"Find tagged data in list\", function () {",
									"    var data1 = _.find(pm.response.json(), { ",
									"    name: (pm.environment.get(\"taggedData02\"))",
									"    });",
									"    pm.expect(data1.path).to.eql(\"/\"+pm.environment.get(\"taggedPath02\")+\"/\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}?gtag[]={{tag1}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}"
							],
							"query": [
								{
									"key": "gtag[]",
									"value": "{{tag1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "REPLACE TAG",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"gtag is replaced\", function () {",
									"    pm.expect(jsonData.gtags[0]).to.eql(pm.environment.get(\"tagX\"));",
									"    pm.expect(jsonData.gtags[1]).to.eql(pm.environment.get(\"tag3\"));",
									"    pm.expect(jsonData.gtags[2]).to.eql(pm.environment.get(\"tag4\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"gtags\": [\n    \"{{tagX}}\",\n    \"{{tag3}}\",\n    \"{{tag4}}\"\n  ]\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{taggedData03}}?path={{taggedPath03}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{taggedData03}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{taggedPath03}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SEARCH BY OLD TAG",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Tagged Data List\", function () {",
									"    pm.expect(jsonData.length).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}?gtag[]={{tag5}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}"
							],
							"query": [
								{
									"key": "gtag[]",
									"value": "{{tag5}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SEARCH BY NEW TAG",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Tagged Data List\", function () {",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"Find tagged data in list\", function () {",
									"    var data1 = _.find(pm.response.json(), { ",
									"    name: (pm.environment.get(\"taggedData03\"))",
									"    });",
									"    pm.expect(data1.path).to.eql(\"/\"+pm.environment.get(\"taggedPath03\")+\"/\");",
									"    pm.expect(data1.gtags[2]).to.eql(pm.environment.get(\"tag4\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}?gtag={{tagX}}&gtag={{tag3}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}"
							],
							"query": [
								{
									"key": "gtag",
									"value": "{{tagX}}"
								},
								{
									"key": "gtag",
									"value": "{{tag3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE TAGGED DATA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{taggedData01}}?path={{taggedPath01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{taggedData01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{taggedPath01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE TAGGED DATA 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{taggedData02}}?path={{taggedPath02}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{taggedData02}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{taggedPath02}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE TAGGED DATA 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{taggedData03}}?path={{taggedPath03}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{taggedData03}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{taggedPath03}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "utility",
			"item": [
				{
					"name": "UTILITY GET GCS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"gcstoken\", () => {",
									"    postman.setEnvironmentVariable(\"gcsAccessToken\", jsonData.access_token);",
									"})",
									"",
									"pm.test(\"Validate Subproject Details\", function () {",
									"    pm.expect(jsonData.access_token).to.exist;",
									"    pm.expect(jsonData.expires_in).to.greaterThan(0);",
									"    postman.setEnvironmentVariable(\"tokenType\", jsonData.token_type);",
									"",
									"    if(pm.response.headers.get('service-provider') == 'azure') {",
									"        postman.setNextRequest(\"UPLOAD NEW TO ACS\");",
									"    } else {",
									"        pm.expect(jsonData.token_type).to.eql('Bearer');",
									"        postman.setNextRequest(\"UPLOAD NEW TO GCS\");",
									"    }",
									"",
									"    // if (jsonData.token_type == 'SasUrl') {",
									"    //     postman.setNextRequest(\"UPLOAD NEW TO ACS\");",
									"    // } else {",
									"    //     pm.expect(jsonData.token_type).to.eql('Bearer');",
									"    //     postman.setNextRequest(\"UPLOAD NEW TO GCS\");",
									"    // }",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/utility/gcs-access-token?sdpath=sd://{{tenant}}/{{subproject}}&readonly=false",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"utility",
								"gcs-access-token"
							],
							"query": [
								{
									"key": "sdpath",
									"value": "sd://{{tenant}}/{{subproject}}"
								},
								{
									"key": "readonly",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UPLOAD NEW TO GCS",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check content type\", function () {",
									"  pm.response.to.be.header(\"Content-Type\", \"application/json; charset=UTF-8\");",
									"});",
									"",
									"pm.test(\"set crc32c code\", function () {",
									"    postman.setEnvironmentVariable(\"gcsXcrc32c\", jsonData.crc32c);",
									"});",
									"",
									"postman.setNextRequest(\"DOWNLOAD NEW FROM GCS\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gcsAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "hello world from e2e"
						},
						"url": {
							"raw": "https://www.googleapis.com/upload/storage/v1/b/{{gcsBucketName}}/o?uploadType=media&name={{gcsObjectPrefix}}%2FOBJ0000",
							"protocol": "https",
							"host": [
								"www",
								"googleapis",
								"com"
							],
							"path": [
								"upload",
								"storage",
								"v1",
								"b",
								"{{gcsBucketName}}",
								"o"
							],
							"query": [
								{
									"key": "uploadType",
									"value": "media"
								},
								{
									"key": "name",
									"value": "{{gcsObjectPrefix}}%2FOBJ0000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UPLOAD NEW TO ACS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Check content length\", function () {",
									"  pm.response.to.be.header(\"Content-Length\", \"0\");",
									"});",
									"",
									"postman.setNextRequest(\"DOWNLOAD NEW FROM ACS\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"acsSasUrl\", pm.variables.get(\"gcsAccessToken\").replace('?', '/' + pm.variables.get(\"gcsObjectPrefix\") + '/o?'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-ms-blob-type",
								"value": "BlockBlob",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "hello world from e2e"
						},
						"url": {
							"raw": "{{acsSasUrl}}",
							"host": [
								"{{acsSasUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DOWNLOAD NEW FROM GCS",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check content type\", function () {",
									"  pm.response.to.be.header(\"Content-Type\", \"application/json; charset=UTF-8\");",
									"});",
									"",
									"pm.test(\"check crc32c code\", function () {",
									"    pm.expect(jsonData.crc32c).to.eql(pm.environment.get(\"gcsXcrc32c\"));",
									"});",
									"",
									"postman.setNextRequest(\"UTILITY DATASET DELETE\");"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gcsAccessToken}}"
							}
						],
						"url": {
							"raw": "https://www.googleapis.com/storage/v1/b/{{gcsBucketName}}/o/{{gcsObjectPrefix}}%2FOBJ0000",
							"protocol": "https",
							"host": [
								"www",
								"googleapis",
								"com"
							],
							"path": [
								"storage",
								"v1",
								"b",
								"{{gcsBucketName}}",
								"o",
								"{{gcsObjectPrefix}}%2FOBJ0000"
							]
						}
					},
					"response": []
				},
				{
					"name": "DOWNLOAD NEW FROM ACS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check content type\", function () {",
									"  pm.response.to.be.header(\"Content-Type\", \"text/plain\");",
									"});",
									"",
									"pm.test(\"check blob type\", function () {",
									"    pm.expect(pm.response.headers.get(\"x-ms-blob-type\")).to.eql(\"BlockBlob\");",
									"});",
									"",
									"postman.setNextRequest(\"UTILITY DATASET DELETE\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"acsSasUrl\", pm.variables.get(\"gcsAccessToken\").replace('?', '/' + pm.variables.get(\"gcsObjectPrefix\") + '/o?'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{acsSasUrl}}",
							"host": [
								"{{acsSasUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UTILITY DATASET DELETE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function makeid(lenght) {\r",
									"\r",
									"    var result = '';\r",
									"    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"    var charactersLength = characters.length;\r",
									"\r",
									"    for (var index = 0; index < arguments[0]; index++) {\r",
									"    result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"pm.environment.set(\"postmanTest\", makeid(8));\r",
									"pm.environment.set(\"postmanTestpath01\", makeid(3)+\"/\"+makeid(3)+\"/\"+makeid(3));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{postmanTest}}?path={{postmanTestpath01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{postmanTest}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{postmanTestpath01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NEW DATASET REGISTER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check content type\", function () {",
									"   pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"",
									"pm.test(\"Dataset name\", function () {",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"postmanTest\"));",
									"});",
									"",
									"pm.test(\"tenant\", function () {",
									"    pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"});",
									"",
									"pm.test(\"subproject\", function () {",
									"    pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"});",
									"",
									"pm.test(\"path\", function () {",
									"    pm.expect(jsonData.path).to.eql(\"/\"+pm.environment.get(\"postmanTestpath01\")+\"/\");",
									"});",
									"",
									"pm.test(\"ltag\", function () {",
									"    pm.expect(jsonData.ltag).to.eql(pm.environment.get('legaltag01'));",
									"});",
									"",
									"pm.test(\"Dates are present\", function () {",
									"    pm.expect(jsonData.created_date).to.exist;",
									"    pm.expect(jsonData.last_modified_date).to.exist;",
									"});",
									"",
									"pm.test(\"sbit_count\", function () {",
									"    pm.expect(jsonData.sbit_count).to.eql(1);",
									"});",
									"",
									"pm.test(\"sbit\", function () {",
									"    pm.expect(jsonData.sbit).not.to.eql(null);",
									"    postman.setEnvironmentVariable(\"sbit\", jsonData.sbit);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{postmanTest}}?path={{postmanTestpath01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{postmanTest}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{postmanTestpath01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UTILITY LS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Check Data List\", function () {",
									"    var list = jsonData.length;",
									"    pm.expect(list).to.eql(1);",
									"    var test = 'false';",
									"    for(var i = 0; i < list; i++) {",
									"        if(jsonData[i] == (pm.environment.get(\"postmanTest\"))) {",
									"            test = 'true';",
									"        }",
									"    }",
									"    pm.expect(test).to.eql('true');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/utility/ls?sdpath=sd://{{tenant}}/{{subproject}}/{{postmanTestpath01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"utility",
								"ls"
							],
							"query": [
								{
									"key": "sdpath",
									"value": "sd://{{tenant}}/{{subproject}}/{{postmanTestpath01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET CLOSE SBIT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"sbit_count\", function () {",
									"    pm.expect(jsonData.sbit_count).to.eql(0);",
									"});",
									"",
									"pm.test(\"sbit\", function () {",
									"    pm.expect(jsonData.sbit).to.eql(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"metadata\": { \"k1\": \"v1\", \"k2\": \"v2\", \"k3\": { \"k4\": \"v4\" } },\n\t\"filemetadata\": {\"type\": \"GENERIC\", \"size\": 1021 },\n\t\"last_modified_date\": true\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{postmanTest}}?path={{postmanTestpath01}}&close={{sbit}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{postmanTest}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{postmanTestpath01}}"
								},
								{
									"key": "close",
									"value": "{{sbit}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UTILITY CP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 202\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,202]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/utility/cp?sdpath_from=sd://{{tenant}}/{{subproject}}/{{postmanTestpath01}}/{{postmanTest}}&sdpath_to=sd://{{tenant}}/{{subproject}}/{{postmanTestpath01}}/{{postmanTest}}Copy",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"utility",
								"cp"
							],
							"query": [
								{
									"key": "sdpath_from",
									"value": "sd://{{tenant}}/{{subproject}}/{{postmanTestpath01}}/{{postmanTest}}"
								},
								{
									"key": "sdpath_to",
									"value": "sd://{{tenant}}/{{subproject}}/{{postmanTestpath01}}/{{postmanTest}}Copy"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UTILITY LS AFTER COPY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Find copied dataset in list\", function () {",
									"    var list = jsonData.length;",
									"    var test = 'false';",
									"    for(var i = 0; i < list; i++) {",
									"        if(jsonData[i] == (pm.environment.get(\"postmanTest\"))+\"Copy\") {",
									"            test = 'true';",
									"        }",
									"    }",
									"    pm.expect(test).to.eql('true');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/utility/ls?sdpath=sd://{{tenant}}/{{subproject}}/{{postmanTestpath01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"utility",
								"ls"
							],
							"query": [
								{
									"key": "sdpath",
									"value": "sd://{{tenant}}/{{subproject}}/{{postmanTestpath01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE COPY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{postmanTest}}Copy?path={{postmanTestpath01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{postmanTest}}Copy"
							],
							"query": [
								{
									"key": "path",
									"value": "{{postmanTestpath01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE ORIGINAL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.environment.get(\"VCS_Provider\") === 'gitlab') {",
									"    postman.setNextRequest(\"USER ROLES\");",
									"} else {",
									"    postman.setNextRequest(\"USER ADD\");",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{postmanTest}}?path={{postmanTestpath01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{postmanTest}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{postmanTestpath01}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "users",
			"item": [
				{
					"name": "USER ADD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"{{newuser}}\",\n\t\"path\": \"sd://{{tenant}}/{{subproject}}\",\n\t\"group\": \"editor\"\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/user",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "USER ROLES",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Validate user roles\", function () {",
									"    pm.expect(jsonData.roles.length).to.be.above(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/user/roles?sdpath=sd://{{tenant}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"user",
								"roles"
							],
							"query": [
								{
									"key": "sdpath",
									"value": "sd://{{tenant}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "USER LIST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.environment.get(\"VCS_Provider\") === 'gitlab') {",
									"    postman.setNextRequest(\"USER LIST AFTER REMOVE\");",
									"} else {",
									"    postman.setNextRequest(\"USER REMOVE\");",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/user?sdpath=sd://{{tenant}}/{{subproject}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "sdpath",
									"value": "sd://{{tenant}}/{{subproject}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "USER REMOVE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"{{newuser}}\",\n\t\"path\": \"sd://{{tenant}}/{{subproject}}\"\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/user",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "USER LIST AFTER REMOVE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Find deleted account in user list\", function () {",
									"    var list = jsonData.length;",
									"    var check = 'not found';",
									"    for(var i = 0; i < list; i++) {",
									"        if(jsonData[i][0] == pm.environment.get('newuser')) {",
									"            check = 'found';",
									"        }",
									"    }",
									"    pm.expect(check).to.eql('not found');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/user?sdpath=sd://{{tenant}}/{{subproject}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "sdpath",
									"value": "sd://{{tenant}}/{{subproject}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "app",
			"item": [
				{
					"name": "REGISTER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/app/?email={{adminEmail}}&sdpath=sd://{{tenant}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"app",
								""
							],
							"query": [
								{
									"key": "email",
									"value": "{{adminEmail}}"
								},
								{
									"key": "sdpath",
									"value": "sd://{{tenant}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "LIST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// can be re-enabled after 01/22 when sauth v1 will be dismissed",
									"// pm.test(\"Validate app List\", function () {",
									"//     var list = jsonData.length;",
									"//     pm.expect(list).to.be.above(0);",
									"//     var test = 'false';",
									"//     for(var i = 0; i < list; i++) {",
									"//         if(jsonData[i] == pm.environment.get(\"adminEmail\")) {",
									"//             test = 'true';",
									"//         }",
									"//     }",
									"//     pm.expect(test).to.eql('true');",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/app?sdpath=sd://{{tenant}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"app"
							],
							"query": [
								{
									"key": "sdpath",
									"value": "sd://{{tenant}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "REGISTER TRUSTED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/app/trusted?email={{adminEmail}}&sdpath=sd://{{tenant}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"app",
								"trusted"
							],
							"query": [
								{
									"key": "email",
									"value": "{{adminEmail}}"
								},
								{
									"key": "sdpath",
									"value": "sd://{{tenant}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "REGISTER TRUSTED NEGATIVE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/app/trusted?email=fake-{{adminEmail}}&sdpath=sd://{{tenant}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"app",
								"trusted"
							],
							"query": [
								{
									"key": "email",
									"value": "fake-{{adminEmail}}"
								},
								{
									"key": "sdpath",
									"value": "sd://{{tenant}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "LIST TRUSTED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Validate fake email not in trusted app List\", function () {",
									"    var list = jsonData.length;",
									"    pm.expect(list).to.be.above(0);",
									"    var test = 'true';",
									"    var fakeemail = ('fake-').concat(pm.environment.get(\"adminEmail\"));",
									"    for(var i = 0; i < list; i++) {",
									"        if(jsonData[i] == fakeemail) {",
									"            test = 'false';",
									"            break;",
									"        }",
									"    }",
									"    pm.expect(test).to.eql('true');",
									"}); ",
									"",
									"if (pm.environment.get(\"VCS_Provider\") === 'gitlab') {",
									"    postman.setNextRequest(\"SEISTORE DATASET REGISTER\");",
									"} else {",
									"    postman.setNextRequest(\"DATASET DELETE 01 IMP\");",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/app/trusted?sdpath=sd://{{tenant}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"app",
								"trusted"
							],
							"query": [
								{
									"key": "sdpath",
									"value": "sd://{{tenant}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "imptoken",
			"item": [
				{
					"name": "DATASET DELETE 01 IMP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dataset01}}?path={{path01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dataset01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{path01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET DELETE 02",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dataset02}}?path={{path02}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dataset02}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{path02}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "IMPTOKEN GENERATE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.response.code !== 501) {",
									"",
									"    var jsonData = pm.response.json();",
									"    postman.setEnvironmentVariable(\"imptoken\", jsonData.impersonation_token);",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Check content type\", function () {",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"    });",
									"",
									"",
									"    pm.test(\"Check imptoken\", function () {",
									"        postman.setEnvironmentVariable(\"imptoken\", jsonData.impersonation_token);",
									"        pm.expect(jsonData.expires_in).to.eql(3600);",
									"        pm.expect(jsonData.token_type).to.eql('Bearer');",
									"    });",
									"",
									"} else {",
									"    ",
									"    pm.test(\"Status code is 501\", function () {",
									"        pm.response.to.have.status(501);",
									"    });",
									"",
									"    postman.setNextRequest(\"DATASET DELETE 02\");",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"Bearer {{STOKEN}}\",\n  \"resources\": [{\n  \t\t\"readonly\": false, \n  \t\t\"resource\": \"sd://{{tenant}}/{{subproject}}/\"\n  \t\t\n  \t}\n  ],\n  \"refresh-url\": \"https://google.com\"\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/imptoken",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"imptoken"
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET REGISTER 01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check content type\", function () {",
									"   pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"",
									"pm.test(\"Dataset name\", function () {",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"dataset01\"));",
									"});",
									"",
									"pm.test(\"tenant\", function () {",
									"    pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"});",
									"",
									"pm.test(\"subproject\", function () {",
									"    pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"});",
									"",
									"pm.test(\"path\", function () {",
									"    pm.expect(jsonData.path).to.eql(\"/\"+pm.environment.get(\"path01\")+\"/\");",
									"});",
									"",
									"pm.test(\"ltag\", function () {",
									"    pm.expect(jsonData.ltag).to.eql(pm.environment.get('legaltag01'));",
									"});",
									"",
									"pm.test(\"Dates are present\", function () {",
									"    pm.expect(jsonData.created_date).to.exist;",
									"    pm.expect(jsonData.last_modified_date).to.exist;",
									"});",
									"",
									"pm.test(\"sbit_count\", function () {",
									"    pm.expect(jsonData.sbit_count).to.eql(1);",
									"});",
									"",
									"pm.test(\"Check gtag\", function () {",
									"    pm.expect(jsonData.gtags.length).to.eql(1);",
									"    pm.expect(jsonData.gtags[0]).to.eql(pm.environment.get(\"tag1\"));",
									"});",
									"",
									"pm.test(\"Check seismicmetadata\", () => {",
									"    pm.expect(jsonData.seismicmeta_guid).not.equal(null);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{imptoken}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"gtags\": [\r\n        \"{{tag1}}\"\r\n    ],\r\n    \"seismicmeta\": {\r\n        \"data\": {\r\n            \"additionalMetaData\": [\r\n                {\r\n                    \"name\": \"SOURCE BARCODE\",\r\n                    \"value\": 3843967263,\r\n                    \"valueAsString\": \"3843967263\"\r\n                },\r\n                {\r\n                    \"name\": \"ORIGINAL FILE NAME\",\r\n                    \"value\": \"1_67_Srv3D_1_8_Original.sgy\",\r\n                    \"valueAsString\": \"1_67_Srv3D_1_8_Original.sgy\"\r\n                },\r\n                {\r\n                    \"name\": \"BIN SPACING\",\r\n                    \"value\": 90,\r\n                    \"valueAsString\": \"90\"\r\n                }\r\n            ],\r\n            \"binGridOperation\": {\r\n                \"binGridOriginEasting\": 1276435.2,\r\n                \"binGridOriginI\": 1,\r\n                \"binGridOriginJ\": 1,\r\n                \"binGridOriginNorthing\": 242030.61,\r\n                \"binGridScaleFactor\": 1,\r\n                \"binNodeIncrementI\": 1,\r\n                \"binNodeIncrementJ\": 1,\r\n                \"binWidthI\": 83.39992,\r\n                \"binWidthJ\": 91.77242,\r\n                \"crsKey\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                \"mapGridBearingJ\": 206.58368,\r\n                \"persistableReferenceCrs\": {\r\n                    \"lateBoundCRS\": {\r\n                        \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"26782\"\r\n                        },\r\n                        \"type\": \"LBC\"\r\n                    },\r\n                    \"singleCT\": {\r\n                        \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"15851\"\r\n                        },\r\n                        \"type\": \"ST\"\r\n                    },\r\n                    \"ver\": \"PE_10_3_1\",\r\n                    \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                    \"authCode\": {\r\n                        \"auth\": \"SLB\",\r\n                        \"code\": \"26782079\"\r\n                    },\r\n                    \"type\": \"EBC\"\r\n                },\r\n                \"transformationMethodNumber\": 1049,\r\n                \"unitKeyBearing\": \"dega\"\r\n            },\r\n            \"binNodePositions\": [\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        1276435.2,\r\n                                        242030.61\r\n                                    ],\r\n                                    [\r\n                                        1281357.8,\r\n                                        239567.36\r\n                                    ],\r\n                                    [\r\n                                        1280002.5,\r\n                                        236859.05\r\n                                    ],\r\n                                    [\r\n                                        1275080,\r\n                                        239322.28\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsMultiPoint\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ]\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"26782\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"26782079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                },\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        -93.60371,\r\n                                        29.312513\r\n                                    ],\r\n                                    [\r\n                                        -93.58811,\r\n                                        29.306007\r\n                                    ],\r\n                                    [\r\n                                        -93.59219,\r\n                                        29.298489\r\n                                    ],\r\n                                    [\r\n                                        -93.60779,\r\n                                        29.304993\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsMultiPoint\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ]\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433],AUTHORITY[\\\"EPSG\\\",4267]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"GCS_North_American_1927\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"4267\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus [4267,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"4267079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                },\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        -93.60387,\r\n                                        29.312752\r\n                                    ],\r\n                                    [\r\n                                        -93.58827,\r\n                                        29.306248\r\n                                    ],\r\n                                    [\r\n                                        -93.592354,\r\n                                        29.298727\r\n                                    ],\r\n                                    [\r\n                                        -93.60795,\r\n                                        29.305231\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsMultiPoint\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ]\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"wkt\": \"GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433],AUTHORITY[\\\"EPSG\\\",4326]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"GCS_WGS_1984\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"4326\"\r\n                        },\r\n                        \"type\": \"LBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                }\r\n            ],\r\n            \"classification\": \"Post-stack, time-migrated\",\r\n            \"dateCreated\": \"2013-03-22T11:16:03Z\",\r\n            \"dateModified\": \"2013-03-22T11:16:03Z\",\r\n            \"derivedBulk\": [\r\n                {\r\n                    \"size\": 1223488818,\r\n                    \"type\": \"ZGY\",\r\n                    \"url\": \"sd://SNTC/colors/test.zgy\"\r\n                },\r\n                {\r\n                    \"size\": 2653649950,\r\n                    \"type\": \"DIO\",\r\n                    \"url\": \"sd://SNTC/colors/test.DIO\"\r\n                }\r\n            ],\r\n            \"description\": \"A comment or a remark.\",\r\n            \"elevationReferenceTime\": {\r\n                \"elevationFromMsl\": {\r\n                    \"unitKey\": \"ft\",\r\n                    \"value\": 0\r\n                },\r\n                \"name\": \"SRD\",\r\n                \"replacementVelocity\": {\r\n                    \"unitKey\": \"ft/s\",\r\n                    \"value\": 4800\r\n                }\r\n            },\r\n            \"externalIds\": [\r\n                \"Petrel:tenant1/ProjectLouisiana/3491763/a9b46fc4-1840-450a-ac01-d15bdaa086ba:aef0e55c-4fcb-4546-a7a2-9df8f27277a1\"\r\n            ],\r\n            \"locationAtIndexZero\": {\r\n                \"features\": [\r\n                    {\r\n                        \"geometry\": {\r\n                            \"coordinates\": [\r\n                                1276435.2,\r\n                                242030.61,\r\n                                -1234\r\n                            ],\r\n                            \"type\": \"AnyCrsPoint\"\r\n                        },\r\n                        \"type\": \"AnyCrsFeature\"\r\n                    }\r\n                ],\r\n                \"persistableReferenceCrs\": {\r\n                    \"lateBoundCRS\": {\r\n                        \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"26782\"\r\n                        },\r\n                        \"type\": \"LBC\"\r\n                    },\r\n                    \"singleCT\": {\r\n                        \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"15851\"\r\n                        },\r\n                        \"type\": \"ST\"\r\n                    },\r\n                    \"ver\": \"PE_10_3_1\",\r\n                    \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                    \"authCode\": {\r\n                        \"auth\": \"SLB\",\r\n                        \"code\": \"26782079\"\r\n                    },\r\n                    \"type\": \"EBC\"\r\n                },\r\n                \"persistableReferenceUnitZ\": {\r\n                    \"scaleOffset\": {\r\n                        \"scale\": 0.001,\r\n                        \"offset\": 0\r\n                    },\r\n                    \"symbol\": \"ms\",\r\n                    \"baseMeasurement\": {\r\n                        \"ancestry\": \"Time\",\r\n                        \"type\": \"UM\"\r\n                    },\r\n                    \"type\": \"USO\"\r\n                },\r\n                \"type\": \"AnyCrsFeatureCollection\"\r\n            },\r\n            \"locationWGS84\": {\r\n                \"features\": [\r\n                    {\r\n                        \"geometry\": {\r\n                            \"coordinates\": [\r\n                                [\r\n                                    [\r\n                                        -93.60387,\r\n                                        29.312752\r\n                                    ],\r\n                                    [\r\n                                        -93.58827,\r\n                                        29.306248\r\n                                    ],\r\n                                    [\r\n                                        -93.592354,\r\n                                        29.298727\r\n                                    ],\r\n                                    [\r\n                                        -93.60795,\r\n                                        29.305231\r\n                                    ],\r\n                                    [\r\n                                        -93.60387,\r\n                                        29.312752\r\n                                    ]\r\n                                ]\r\n                            ],\r\n                            \"type\": \"Polygon\"\r\n                        },\r\n                        \"properties\": {\r\n                            \"name\": \"Survey 4 INLINE_1_67_Srv3D_1_8_Original\"\r\n                        },\r\n                        \"type\": \"Feature\"\r\n                    }\r\n                ],\r\n                \"type\": \"FeatureCollection\"\r\n            },\r\n            \"name\": \"Survey 4 INLINE_1_67_Srv3D_1_8_Original\",\r\n            \"originalBulk\": {\r\n                \"size\": 2873437400,\r\n                \"type\": \"SEGY\",\r\n                \"url\": \"sd://SNTC/colors/test.segy\"\r\n            },\r\n            \"perimeters\": [\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        [\r\n                                            1276435.2,\r\n                                            242030.61\r\n                                        ],\r\n                                        [\r\n                                            1281357.8,\r\n                                            239567.36\r\n                                        ],\r\n                                        [\r\n                                            1280002.5,\r\n                                            236859.05\r\n                                        ],\r\n                                        [\r\n                                            1275080,\r\n                                            239322.28\r\n                                        ],\r\n                                        [\r\n                                            1276435.2,\r\n                                            242030.61\r\n                                        ]\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsPolygon\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ],\r\n                                \"perimeterType\": \"Full Fold Coverage\"\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"26782\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"26782079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                },\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        [\r\n                                            -93.60371,\r\n                                            29.312513\r\n                                        ],\r\n                                        [\r\n                                            -93.58811,\r\n                                            29.306007\r\n                                        ],\r\n                                        [\r\n                                            -93.59219,\r\n                                            29.298489\r\n                                        ],\r\n                                        [\r\n                                            -93.60779,\r\n                                            29.304993\r\n                                        ],\r\n                                        [\r\n                                            -93.60371,\r\n                                            29.312513\r\n                                        ]\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsPolygon\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ],\r\n                                \"perimeterType\": \"Full Fold Coverage\"\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433],AUTHORITY[\\\"EPSG\\\",4267]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"GCS_North_American_1927\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"4267\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus [4267,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"4267079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                }\r\n            ],\r\n            \"rangeAmplitudeMax\": {\r\n                \"unitKey\": \"amplitude\",\r\n                \"value\": 232467.8\r\n            },\r\n            \"rangeAmplitudeMin\": {\r\n                \"unitKey\": \"amplitude\",\r\n                \"value\": -226153.4\r\n            },\r\n            \"rangeCrosslineIncrement\": 1,\r\n            \"rangeCrosslineStart\": 1,\r\n            \"rangeCrosslineStop\": 34,\r\n            \"rangeInlineIncrement\": 1,\r\n            \"rangeInlineStart\": 1,\r\n            \"rangeInlineStop\": 67,\r\n            \"relationships\": {\r\n                \"binGrid\": {\r\n                    \"id\": \"slb:wke:binGrid-5067af51fe6542968ce8868c01af6cb7\"\r\n                },\r\n                \"seismicSurvey\": {\r\n                    \"id\": \"slb:wke:seismicSurvey3d-62d8fe58-c044-537a-b354-7f3f8e860421\",\r\n                    \"name\": \"ST2013-L\"\r\n                },\r\n                \"usesAssociations\": true\r\n            },\r\n            \"seismicProperty\": \"Instantaneous Amplitude\",\r\n            \"stackAngleRangeMax\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": 10\r\n            },\r\n            \"stackAngleRangeMin\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": 0\r\n            },\r\n            \"stackAzimuthRangeMax\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": 20\r\n            },\r\n            \"stackAzimuthRangeMin\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": -20\r\n            },\r\n            \"stackOffsetRangeMax\": {\r\n                \"unitKey\": \"ftUS\",\r\n                \"value\": 3000\r\n            },\r\n            \"stackOffsetRangeMin\": {\r\n                \"unitKey\": \"ftUS\",\r\n                \"value\": 0\r\n            },\r\n            \"stackSubType\": \"Full\",\r\n            \"stackType\": \"Full\",\r\n            \"storageType\": \"32-BIT\",\r\n            \"textualFileHeader\": [\r\n                \"C 1 CLIENT COMPANY CREW NO                                                      C 2 LINE line1dS AREA MAP ID                                                    C 3 REEL NO DAY-START OF REEL YEAR OBSERVER                                     C 4 INSTRUMENT: DELPH MODEL xx SERIAL NO                                        C 5 DATA TRACES/RECORD 1 AUXILIARY TRACES/RECORD 0 CDP FOLD                     C 6 SAMPLE INTERVAL 333 SAMPLES/TRACE 1496 BITS/IN 16 BYTES/SAMPLE 2            C 7 RECORDING FORMAT FORMAT THIS REEL MEASUREMENT SYSTEM                        C 8 SAMPLE CODE: FIXED PT                                                       C 9 GAIN TYPE: FIXED                                                            C10 FILTERS: ALIAS 1500HZ NOTCH HZ BAND - HZ SLOPE - DB/OCT                     C11 SOURCE: TYPE NUMBER/POINT POINT INTERVAL                                    C12 PATTERN: LENGTH WIDTH                                                       C13 SWEEP: START HZ END HZ LENGTH MS CHANEL NO TYPE                             C14 TAPER: START LENGTH MS END LENGTH MS TYPE                                   C15 SPREAD: OFFSET MAX DISTANCE GROUP INTERVAL                                  C16 GEOPHONES: PER GROUP SPACING FREQUENCY MFG MODEL                            C17 PATTERN: LENGTH WIDTH                                                       C18 TRACES SORTED BY: RECORD                                                    C19 AMPLITUDE RECOVERY: NONE                                                    C20 MAP PROJECTION ZONE ID COORDINATE UNITS                                     C21 PROCESSING:                                                                 C22 PROCESSING:                                                                 C23                                                                             C24                                                                             C25                                                                             C26                                                                             C27                                                                             C28                                                                             C29                                                                             C30                                                                             C31                                                                             C32                                                                             C33                                                                             C34                                                                             C35                                                                             C36                                                                             C37                                                                             C38                                                                             C39                                                                             C40 END EBCDIC                                                                  \"\r\n            ],\r\n            \"verticalDomain\": \"Elevation time (two-way travel time)\",\r\n            \"verticalIncrement\": {\r\n                \"unitKey\": \"ms\",\r\n                \"value\": -4\r\n            },\r\n            \"verticalSampleCount\": 1000,\r\n            \"verticalStart\": {\r\n                \"unitKey\": \"ms\",\r\n                \"value\": 0\r\n            },\r\n            \"verticalStop\": {\r\n                \"unitKey\": \"ms\",\r\n                \"value\": -3996\r\n            },\r\n            \"vintage\": \"ST2013-InstantaneousAmplitude\",\r\n            \"waveType\": \"PP\"\r\n        },\r\n        \"kind\": \"{{datapartition}}:wks:seismic3d:1.0.5\",\r\n        \"legal\": {\r\n            \"legaltags\": [\r\n                \"{{legaltag01}}\"\r\n            ],\r\n            \"otherRelevantDataCountries\": [\r\n                \"US\",\r\n                \"BE\",\r\n                \"NO\",\r\n                \"IN\"\r\n            ]\r\n        },\r\n        \"version\": 1040891613125385\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dataset01}}?path={{path01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dataset01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{path01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "IMPTOKEN REFRESH",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Check refreshed imptoken\", function () {",
									"    pm.expect(jsonData.impersonation_token).not.to.eql(pm.environment.get(\"imptoken\"));",
									"    pm.expect(jsonData.expires_in).to.eql(3600);",
									"    pm.expect(jsonData.token_type).to.eql('Bearer');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"token\": \"{{imptoken}}\"\r\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/imptoken",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"imptoken"
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET REGISTER 02",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check content type\", function () {",
									"   pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"",
									"pm.test(\"Dataset name\", function () {",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"dataset02\"));",
									"});",
									"",
									"pm.test(\"tenant\", function () {",
									"    pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"});",
									"",
									"pm.test(\"subproject\", function () {",
									"    pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"});",
									"",
									"pm.test(\"path\", function () {",
									"    pm.expect(jsonData.path).to.eql(pm.environment.get(\"path02\"));",
									"});",
									"",
									"pm.test(\"ltag\", function () {",
									"    pm.expect(jsonData.ltag).to.eql(pm.environment.get('legaltag01'));",
									"});",
									"",
									"pm.test(\"Dates are present\", function () {",
									"    pm.expect(jsonData.created_date).to.exist;",
									"    pm.expect(jsonData.last_modified_date).to.exist;",
									"});",
									"",
									"pm.test(\"sbit_count\", function () {",
									"    pm.expect(jsonData.sbit_count).to.eql(1);",
									"});",
									"",
									"pm.test(\"Check gtag\", function () {",
									"    pm.expect(jsonData.gtags.length).to.eql(1);",
									"    pm.expect(jsonData.gtags[0]).to.eql(pm.environment.get(\"tag1\"));",
									"});",
									"",
									"pm.test(\"Check seismicmetadata\", () => {",
									"    pm.expect(jsonData.seismicmeta_guid).not.equal(null);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{imptoken}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"gtags\": [\r\n        \"{{tag1}}\"\r\n    ],\r\n    \"seismicmeta\": {\r\n        \"data\": {\r\n            \"additionalMetaData\": [\r\n                {\r\n                    \"name\": \"SOURCE BARCODE\",\r\n                    \"value\": 3843967263,\r\n                    \"valueAsString\": \"3843967263\"\r\n                },\r\n                {\r\n                    \"name\": \"ORIGINAL FILE NAME\",\r\n                    \"value\": \"1_67_Srv3D_1_8_Original.sgy\",\r\n                    \"valueAsString\": \"1_67_Srv3D_1_8_Original.sgy\"\r\n                },\r\n                {\r\n                    \"name\": \"BIN SPACING\",\r\n                    \"value\": 90,\r\n                    \"valueAsString\": \"90\"\r\n                }\r\n            ],\r\n            \"binGridOperation\": {\r\n                \"binGridOriginEasting\": 1276435.2,\r\n                \"binGridOriginI\": 1,\r\n                \"binGridOriginJ\": 1,\r\n                \"binGridOriginNorthing\": 242030.61,\r\n                \"binGridScaleFactor\": 1,\r\n                \"binNodeIncrementI\": 1,\r\n                \"binNodeIncrementJ\": 1,\r\n                \"binWidthI\": 83.39992,\r\n                \"binWidthJ\": 91.77242,\r\n                \"crsKey\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                \"mapGridBearingJ\": 206.58368,\r\n                \"persistableReferenceCrs\": {\r\n                    \"lateBoundCRS\": {\r\n                        \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"26782\"\r\n                        },\r\n                        \"type\": \"LBC\"\r\n                    },\r\n                    \"singleCT\": {\r\n                        \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"15851\"\r\n                        },\r\n                        \"type\": \"ST\"\r\n                    },\r\n                    \"ver\": \"PE_10_3_1\",\r\n                    \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                    \"authCode\": {\r\n                        \"auth\": \"SLB\",\r\n                        \"code\": \"26782079\"\r\n                    },\r\n                    \"type\": \"EBC\"\r\n                },\r\n                \"transformationMethodNumber\": 1049,\r\n                \"unitKeyBearing\": \"dega\"\r\n            },\r\n            \"binNodePositions\": [\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        1276435.2,\r\n                                        242030.61\r\n                                    ],\r\n                                    [\r\n                                        1281357.8,\r\n                                        239567.36\r\n                                    ],\r\n                                    [\r\n                                        1280002.5,\r\n                                        236859.05\r\n                                    ],\r\n                                    [\r\n                                        1275080,\r\n                                        239322.28\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsMultiPoint\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ]\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"26782\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"26782079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                },\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        -93.60371,\r\n                                        29.312513\r\n                                    ],\r\n                                    [\r\n                                        -93.58811,\r\n                                        29.306007\r\n                                    ],\r\n                                    [\r\n                                        -93.59219,\r\n                                        29.298489\r\n                                    ],\r\n                                    [\r\n                                        -93.60779,\r\n                                        29.304993\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsMultiPoint\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ]\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433],AUTHORITY[\\\"EPSG\\\",4267]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"GCS_North_American_1927\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"4267\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus [4267,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"4267079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                },\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        -93.60387,\r\n                                        29.312752\r\n                                    ],\r\n                                    [\r\n                                        -93.58827,\r\n                                        29.306248\r\n                                    ],\r\n                                    [\r\n                                        -93.592354,\r\n                                        29.298727\r\n                                    ],\r\n                                    [\r\n                                        -93.60795,\r\n                                        29.305231\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsMultiPoint\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ]\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"wkt\": \"GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433],AUTHORITY[\\\"EPSG\\\",4326]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"GCS_WGS_1984\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"4326\"\r\n                        },\r\n                        \"type\": \"LBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                }\r\n            ],\r\n            \"classification\": \"Post-stack, time-migrated\",\r\n            \"dateCreated\": \"2013-03-22T11:16:03Z\",\r\n            \"dateModified\": \"2013-03-22T11:16:03Z\",\r\n            \"derivedBulk\": [\r\n                {\r\n                    \"size\": 1223488818,\r\n                    \"type\": \"ZGY\",\r\n                    \"url\": \"sd://SNTC/colors/test.zgy\"\r\n                },\r\n                {\r\n                    \"size\": 2653649950,\r\n                    \"type\": \"DIO\",\r\n                    \"url\": \"sd://SNTC/colors/test.DIO\"\r\n                }\r\n            ],\r\n            \"description\": \"A comment or a remark.\",\r\n            \"elevationReferenceTime\": {\r\n                \"elevationFromMsl\": {\r\n                    \"unitKey\": \"ft\",\r\n                    \"value\": 0\r\n                },\r\n                \"name\": \"SRD\",\r\n                \"replacementVelocity\": {\r\n                    \"unitKey\": \"ft/s\",\r\n                    \"value\": 4800\r\n                }\r\n            },\r\n            \"externalIds\": [\r\n                \"Petrel:tenant1/ProjectLouisiana/3491763/a9b46fc4-1840-450a-ac01-d15bdaa086ba:aef0e55c-4fcb-4546-a7a2-9df8f27277a1\"\r\n            ],\r\n            \"locationAtIndexZero\": {\r\n                \"features\": [\r\n                    {\r\n                        \"geometry\": {\r\n                            \"coordinates\": [\r\n                                1276435.2,\r\n                                242030.61,\r\n                                -1234\r\n                            ],\r\n                            \"type\": \"AnyCrsPoint\"\r\n                        },\r\n                        \"type\": \"AnyCrsFeature\"\r\n                    }\r\n                ],\r\n                \"persistableReferenceCrs\": {\r\n                    \"lateBoundCRS\": {\r\n                        \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"26782\"\r\n                        },\r\n                        \"type\": \"LBC\"\r\n                    },\r\n                    \"singleCT\": {\r\n                        \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"15851\"\r\n                        },\r\n                        \"type\": \"ST\"\r\n                    },\r\n                    \"ver\": \"PE_10_3_1\",\r\n                    \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                    \"authCode\": {\r\n                        \"auth\": \"SLB\",\r\n                        \"code\": \"26782079\"\r\n                    },\r\n                    \"type\": \"EBC\"\r\n                },\r\n                \"persistableReferenceUnitZ\": {\r\n                    \"scaleOffset\": {\r\n                        \"scale\": 0.001,\r\n                        \"offset\": 0\r\n                    },\r\n                    \"symbol\": \"ms\",\r\n                    \"baseMeasurement\": {\r\n                        \"ancestry\": \"Time\",\r\n                        \"type\": \"UM\"\r\n                    },\r\n                    \"type\": \"USO\"\r\n                },\r\n                \"type\": \"AnyCrsFeatureCollection\"\r\n            },\r\n            \"locationWGS84\": {\r\n                \"features\": [\r\n                    {\r\n                        \"geometry\": {\r\n                            \"coordinates\": [\r\n                                [\r\n                                    [\r\n                                        -93.60387,\r\n                                        29.312752\r\n                                    ],\r\n                                    [\r\n                                        -93.58827,\r\n                                        29.306248\r\n                                    ],\r\n                                    [\r\n                                        -93.592354,\r\n                                        29.298727\r\n                                    ],\r\n                                    [\r\n                                        -93.60795,\r\n                                        29.305231\r\n                                    ],\r\n                                    [\r\n                                        -93.60387,\r\n                                        29.312752\r\n                                    ]\r\n                                ]\r\n                            ],\r\n                            \"type\": \"Polygon\"\r\n                        },\r\n                        \"properties\": {\r\n                            \"name\": \"Survey 4 INLINE_1_67_Srv3D_1_8_Original\"\r\n                        },\r\n                        \"type\": \"Feature\"\r\n                    }\r\n                ],\r\n                \"type\": \"FeatureCollection\"\r\n            },\r\n            \"name\": \"Survey 4 INLINE_1_67_Srv3D_1_8_Original\",\r\n            \"originalBulk\": {\r\n                \"size\": 2873437400,\r\n                \"type\": \"SEGY\",\r\n                \"url\": \"sd://SNTC/colors/test.segy\"\r\n            },\r\n            \"perimeters\": [\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        [\r\n                                            1276435.2,\r\n                                            242030.61\r\n                                        ],\r\n                                        [\r\n                                            1281357.8,\r\n                                            239567.36\r\n                                        ],\r\n                                        [\r\n                                            1280002.5,\r\n                                            236859.05\r\n                                        ],\r\n                                        [\r\n                                            1275080,\r\n                                            239322.28\r\n                                        ],\r\n                                        [\r\n                                            1276435.2,\r\n                                            242030.61\r\n                                        ]\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsPolygon\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ],\r\n                                \"perimeterType\": \"Full Fold Coverage\"\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"26782\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"26782079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                },\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        [\r\n                                            -93.60371,\r\n                                            29.312513\r\n                                        ],\r\n                                        [\r\n                                            -93.58811,\r\n                                            29.306007\r\n                                        ],\r\n                                        [\r\n                                            -93.59219,\r\n                                            29.298489\r\n                                        ],\r\n                                        [\r\n                                            -93.60779,\r\n                                            29.304993\r\n                                        ],\r\n                                        [\r\n                                            -93.60371,\r\n                                            29.312513\r\n                                        ]\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsPolygon\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ],\r\n                                \"perimeterType\": \"Full Fold Coverage\"\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433],AUTHORITY[\\\"EPSG\\\",4267]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"GCS_North_American_1927\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"4267\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus [4267,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"4267079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                }\r\n            ],\r\n            \"rangeAmplitudeMax\": {\r\n                \"unitKey\": \"amplitude\",\r\n                \"value\": 232467.8\r\n            },\r\n            \"rangeAmplitudeMin\": {\r\n                \"unitKey\": \"amplitude\",\r\n                \"value\": -226153.4\r\n            },\r\n            \"rangeCrosslineIncrement\": 1,\r\n            \"rangeCrosslineStart\": 1,\r\n            \"rangeCrosslineStop\": 34,\r\n            \"rangeInlineIncrement\": 1,\r\n            \"rangeInlineStart\": 1,\r\n            \"rangeInlineStop\": 67,\r\n            \"relationships\": {\r\n                \"binGrid\": {\r\n                    \"id\": \"slb:wke:binGrid-5067af51fe6542968ce8868c01af6cb7\"\r\n                },\r\n                \"seismicSurvey\": {\r\n                    \"id\": \"slb:wke:seismicSurvey3d-62d8fe58-c044-537a-b354-7f3f8e860421\",\r\n                    \"name\": \"ST2013-L\"\r\n                },\r\n                \"usesAssociations\": true\r\n            },\r\n            \"seismicProperty\": \"Instantaneous Amplitude\",\r\n            \"stackAngleRangeMax\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": 10\r\n            },\r\n            \"stackAngleRangeMin\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": 0\r\n            },\r\n            \"stackAzimuthRangeMax\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": 20\r\n            },\r\n            \"stackAzimuthRangeMin\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": -20\r\n            },\r\n            \"stackOffsetRangeMax\": {\r\n                \"unitKey\": \"ftUS\",\r\n                \"value\": 3000\r\n            },\r\n            \"stackOffsetRangeMin\": {\r\n                \"unitKey\": \"ftUS\",\r\n                \"value\": 0\r\n            },\r\n            \"stackSubType\": \"Full\",\r\n            \"stackType\": \"Full\",\r\n            \"storageType\": \"32-BIT\",\r\n            \"textualFileHeader\": [\r\n                \"C 1 CLIENT COMPANY CREW NO                                                      C 2 LINE line1dS AREA MAP ID                                                    C 3 REEL NO DAY-START OF REEL YEAR OBSERVER                                     C 4 INSTRUMENT: DELPH MODEL xx SERIAL NO                                        C 5 DATA TRACES/RECORD 1 AUXILIARY TRACES/RECORD 0 CDP FOLD                     C 6 SAMPLE INTERVAL 333 SAMPLES/TRACE 1496 BITS/IN 16 BYTES/SAMPLE 2            C 7 RECORDING FORMAT FORMAT THIS REEL MEASUREMENT SYSTEM                        C 8 SAMPLE CODE: FIXED PT                                                       C 9 GAIN TYPE: FIXED                                                            C10 FILTERS: ALIAS 1500HZ NOTCH HZ BAND - HZ SLOPE - DB/OCT                     C11 SOURCE: TYPE NUMBER/POINT POINT INTERVAL                                    C12 PATTERN: LENGTH WIDTH                                                       C13 SWEEP: START HZ END HZ LENGTH MS CHANEL NO TYPE                             C14 TAPER: START LENGTH MS END LENGTH MS TYPE                                   C15 SPREAD: OFFSET MAX DISTANCE GROUP INTERVAL                                  C16 GEOPHONES: PER GROUP SPACING FREQUENCY MFG MODEL                            C17 PATTERN: LENGTH WIDTH                                                       C18 TRACES SORTED BY: RECORD                                                    C19 AMPLITUDE RECOVERY: NONE                                                    C20 MAP PROJECTION ZONE ID COORDINATE UNITS                                     C21 PROCESSING:                                                                 C22 PROCESSING:                                                                 C23                                                                             C24                                                                             C25                                                                             C26                                                                             C27                                                                             C28                                                                             C29                                                                             C30                                                                             C31                                                                             C32                                                                             C33                                                                             C34                                                                             C35                                                                             C36                                                                             C37                                                                             C38                                                                             C39                                                                             C40 END EBCDIC                                                                  \"\r\n            ],\r\n            \"verticalDomain\": \"Elevation time (two-way travel time)\",\r\n            \"verticalIncrement\": {\r\n                \"unitKey\": \"ms\",\r\n                \"value\": -4\r\n            },\r\n            \"verticalSampleCount\": 1000,\r\n            \"verticalStart\": {\r\n                \"unitKey\": \"ms\",\r\n                \"value\": 0\r\n            },\r\n            \"verticalStop\": {\r\n                \"unitKey\": \"ms\",\r\n                \"value\": -3996\r\n            },\r\n            \"vintage\": \"ST2013-InstantaneousAmplitude\",\r\n            \"waveType\": \"PP\"\r\n        },\r\n        \"kind\": \"{{datapartition}}:wks:seismic3d:1.0.5\",\r\n        \"legal\": {\r\n            \"legaltags\": [\r\n                \"{{legaltag01}}\"\r\n            ],\r\n            \"otherRelevantDataCountries\": [\r\n                \"US\",\r\n                \"BE\",\r\n                \"NO\",\r\n                \"IN\"\r\n            ]\r\n        },\r\n        \"version\": 1040891613125385\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dataset02}}?path={{path02}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dataset02}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{path02}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "IMPTOKEN PATCH",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check patch imptoken\", function () {",
									"    postman.setEnvironmentVariable(\"imptoken_patch\", jsonData.impersonation_token);",
									"    pm.expect(jsonData.expires_in).to.eql(3600);",
									"    pm.expect(jsonData.token_type).to.eql('Bearer');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"token\": \"{{imptoken}}\",\r\n  \"refresh-url\": \"https://google.com/c24c1ccrfacaerfafgw54tg2gg25g2\"\r\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/imptoken",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"imptoken"
							]
						}
					},
					"response": []
				},
				{
					"name": "IMPTOKEN PATCH REFRESH",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Refresh patch imptoken\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The impersonation token cannot be refreshed\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"token\": \"{{imptoken_patch}}\"\r\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/imptoken",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"imptoken"
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET DELETE 01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dataset01}}?path={{path01}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dataset01}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{path01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET DELETE 02",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{dataset02}}?path={{path02}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{dataset02}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{path02}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "missing cdo",
			"item": [
				{
					"name": "SEISTORE DATASET REGISTER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Dataset name\", function () {",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"cdoTestData\"));",
									"});",
									"",
									"pm.test(\"path\", function () {",
									"    pm.expect(jsonData.path).to.eql(\"/\"+pm.environment.get(\"cdoTestDataPath\")+\"/\");",
									"});",
									"",
									"pm.test(\"Get gcsurl\", function () {",
									"    pm.expect(jsonData.gcsurl).not.to.eql(null);",
									"    postman.setEnvironmentVariable(\"gcsurl\", jsonData.gcsurl);",
									"    postman.setEnvironmentVariable(\"gcsBucketName\", jsonData.gcsurl.split('/')[0]);",
									"    postman.setEnvironmentVariable(\"gcsObjectPrefix\", jsonData.gcsurl.split('/')[1]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function makeid(lenght) {\r",
									"\r",
									"    var result = '';\r",
									"    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"    var charactersLength = characters.length;\r",
									"\r",
									"    for (var index = 0; index < arguments[0]; index++) {\r",
									"    result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"pm.environment.set(\"cdoTestData\", makeid(8));\r",
									"pm.environment.set(\"cdoTestDataPath\", makeid(3)+\"/\"+makeid(3)+\"/\"+makeid(3));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"gtags\": [\r\n    \"tagA\"\r\n  ]\r\n} \r\n \r\n"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{cdoTestData}}?path={{cdoTestDataPath}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{cdoTestData}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{cdoTestDataPath}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET GCS TOKEN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"gcstoken\", () => {",
									"    postman.setEnvironmentVariable(\"gcsAccessToken\", jsonData.access_token);",
									"});",
									"",
									"pm.test(\"Validate Subproject Details\", function () {",
									"    pm.expect(jsonData.access_token).to.exist;",
									"    pm.expect(jsonData.expires_in).to.eql(3599);",
									"    postman.setEnvironmentVariable(\"tokenType\", jsonData.token_type);",
									"    if (jsonData.token_type == 'SasUrl') {",
									"        postman.setNextRequest(\"DELETE CDO FROM ACS\");",
									"    } else {",
									"        pm.expect(jsonData.token_type).to.eql('Bearer');",
									"        postman.setNextRequest(\"DELETE CDO FROM GCS\");",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/utility/gcs-access-token?sdpath=sd://{{tenant}}/{{subproject}}&readonly=false",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"utility",
								"gcs-access-token"
							],
							"query": [
								{
									"key": "sdpath",
									"value": "sd://{{tenant}}/{{subproject}}"
								},
								{
									"key": "readonly",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE CDO FROM ACS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"postman.setNextRequest(\"CDO DATASET DELETE\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"acsDeleteSasUrl\", pm.variables.get(\"gcsAccessToken\").replace('?', '/' + pm.variables.get(\"gcsObjectPrefix\") + '/dataconsistency.cdo?'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{acsDeleteSasUrl}}",
							"host": [
								"{{acsDeleteSasUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CDO DATASET DELETE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{cdoTestData}}?path={{cdoTestDataPath}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{cdoTestData}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{cdoTestDataPath}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET GET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include((pm.environment.get(\"cdoTestData\")) + \" does not exist\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{cdoTestData}}?path={{cdoTestDataPath}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{cdoTestData}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{cdoTestDataPath}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CP Command",
			"item": [
				{
					"name": "CLEAR DATASET X1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function makeid(lenght) {\r",
									"\r",
									"    var result = '';\r",
									"    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"    var charactersLength = characters.length;\r",
									"\r",
									"    for (var index = 0; index < arguments[0]; index++) {\r",
									"    result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"pm.environment.set(\"testDataX1\", makeid(8));\r",
									"pm.environment.set(\"testDataX1path\", makeid(3)+\"/\"+makeid(3)+\"/\"+makeid(3));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{testDataX1}}?path={{testDataX1path}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{testDataX1}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testDataX1path}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CLEAR DATASET X2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function makeid(lenght) {\r",
									"\r",
									"    var result = '';\r",
									"    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"    var charactersLength = characters.length;\r",
									"\r",
									"    for (var index = 0; index < arguments[0]; index++) {\r",
									"    result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"pm.environment.set(\"testDataX2\", makeid(8));\r",
									"pm.environment.set(\"testDataX2path\", makeid(3)+\"/\"+makeid(3)+\"/\"+makeid(3));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{testDataX2}}?path={{testDataX2path}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{testDataX2}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testDataX2path}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET REGISTER X1 + SeimicMeta",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Dataset name\", function () {",
									"    pm.expect(jsonData.ltag).not.to.eql(null);",
									"    postman.setEnvironmentVariable(\"ltag\", jsonData.ltag);",
									"});",
									"",
									"pm.test(\"Dataset name\", function () {",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"testDataX1\"));",
									"});",
									"",
									"pm.test(\"path\", function () {",
									"    pm.expect(jsonData.path).to.eql(\"/\"+pm.environment.get(\"testDataX1path\")+\"/\");",
									"});",
									"",
									"pm.test(\"Get gcsurl\", function () {",
									"    pm.expect(jsonData.gcsurl).not.to.eql(null);",
									"    postman.setEnvironmentVariable(\"gcsurl\", jsonData.gcsurl);",
									"    postman.setEnvironmentVariable(\"gcsBucketName\", jsonData.gcsurl.split('/')[0]);",
									"    postman.setEnvironmentVariable(\"gcsObjectPrefix\", jsonData.gcsurl.split('/')[1]);",
									"});",
									"",
									"",
									"pm.test(\"sbit\", function () {",
									"    pm.expect(jsonData.sbit).not.to.eql(null);",
									"    postman.setEnvironmentVariable(\"sbit\", jsonData.sbit);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function makeid(lenght) {\r",
									"\r",
									"    var result = '';\r",
									"    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"    var charactersLength = characters.length;\r",
									"\r",
									"    for (var index = 0; index < arguments[0]; index++) {\r",
									"    result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"pm.environment.set(\"randomStringId\", makeid(8));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"seismicmeta\": {\r\n        \"data\": {\r\n            \"additionalMetaData\": [\r\n                {\r\n                    \"name\": \"SOURCE BARCODE\",\r\n                    \"value\": 3843967263,\r\n                    \"valueAsString\": \"3843967263\"\r\n                },\r\n                {\r\n                    \"name\": \"ORIGINAL FILE NAME\",\r\n                    \"value\": \"1_67_Srv3D_1_8_Original.sgy\",\r\n                    \"valueAsString\": \"1_67_Srv3D_1_8_Original.sgy\"\r\n                },\r\n                {\r\n                    \"name\": \"BIN SPACING\",\r\n                    \"value\": 90,\r\n                    \"valueAsString\": \"90\"\r\n                }\r\n            ],\r\n            \"binGridOperation\": {\r\n                \"binGridOriginEasting\": 1276435.2,\r\n                \"binGridOriginI\": 1,\r\n                \"binGridOriginJ\": 1,\r\n                \"binGridOriginNorthing\": 242030.61,\r\n                \"binGridScaleFactor\": 1,\r\n                \"binNodeIncrementI\": 1,\r\n                \"binNodeIncrementJ\": 1,\r\n                \"binWidthI\": 83.39992,\r\n                \"binWidthJ\": 91.77242,\r\n                \"crsKey\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                \"mapGridBearingJ\": 206.58368,\r\n                \"persistableReferenceCrs\": {\r\n                    \"lateBoundCRS\": {\r\n                        \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"26782\"\r\n                        },\r\n                        \"type\": \"LBC\"\r\n                    },\r\n                    \"singleCT\": {\r\n                        \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"15851\"\r\n                        },\r\n                        \"type\": \"ST\"\r\n                    },\r\n                    \"ver\": \"PE_10_3_1\",\r\n                    \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                    \"authCode\": {\r\n                        \"auth\": \"SLB\",\r\n                        \"code\": \"26782079\"\r\n                    },\r\n                    \"type\": \"EBC\"\r\n                },\r\n                \"transformationMethodNumber\": 1049,\r\n                \"unitKeyBearing\": \"dega\"\r\n            },\r\n            \"binNodePositions\": [\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        1276435.2,\r\n                                        242030.61\r\n                                    ],\r\n                                    [\r\n                                        1281357.8,\r\n                                        239567.36\r\n                                    ],\r\n                                    [\r\n                                        1280002.5,\r\n                                        236859.05\r\n                                    ],\r\n                                    [\r\n                                        1275080,\r\n                                        239322.28\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsMultiPoint\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ]\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"26782\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"26782079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                },\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        -93.60371,\r\n                                        29.312513\r\n                                    ],\r\n                                    [\r\n                                        -93.58811,\r\n                                        29.306007\r\n                                    ],\r\n                                    [\r\n                                        -93.59219,\r\n                                        29.298489\r\n                                    ],\r\n                                    [\r\n                                        -93.60779,\r\n                                        29.304993\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsMultiPoint\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ]\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433],AUTHORITY[\\\"EPSG\\\",4267]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"GCS_North_American_1927\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"4267\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus [4267,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"4267079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                },\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        -93.60387,\r\n                                        29.312752\r\n                                    ],\r\n                                    [\r\n                                        -93.58827,\r\n                                        29.306248\r\n                                    ],\r\n                                    [\r\n                                        -93.592354,\r\n                                        29.298727\r\n                                    ],\r\n                                    [\r\n                                        -93.60795,\r\n                                        29.305231\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsMultiPoint\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ]\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"wkt\": \"GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433],AUTHORITY[\\\"EPSG\\\",4326]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"GCS_WGS_1984\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"4326\"\r\n                        },\r\n                        \"type\": \"LBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                }\r\n            ],\r\n            \"classification\": \"Post-stack, time-migrated\",\r\n            \"dateCreated\": \"2013-03-22T11:16:03Z\",\r\n            \"dateModified\": \"2013-03-22T11:16:03Z\",\r\n            \"derivedBulk\": [\r\n                {\r\n                    \"size\": 1223488818,\r\n                    \"type\": \"ZGY\",\r\n                    \"url\": \"sd://SNTC/colors/test.zgy\"\r\n                },\r\n                {\r\n                    \"size\": 2653649950,\r\n                    \"type\": \"DIO\",\r\n                    \"url\": \"sd://SNTC/colors/test.DIO\"\r\n                }\r\n            ],\r\n            \"description\": \"A comment or a remark.\",\r\n            \"elevationReferenceTime\": {\r\n                \"elevationFromMsl\": {\r\n                    \"unitKey\": \"ft\",\r\n                    \"value\": 0\r\n                },\r\n                \"name\": \"SRD\",\r\n                \"replacementVelocity\": {\r\n                    \"unitKey\": \"ft/s\",\r\n                    \"value\": 4800\r\n                }\r\n            },\r\n            \"externalIds\": [\r\n                \"Petrel:tenant1/ProjectLouisiana/3491763/a9b46fc4-1840-450a-ac01-d15bdaa086ba:aef0e55c-4fcb-4546-a7a2-9df8f27277a1\"\r\n            ],\r\n            \"locationAtIndexZero\": {\r\n                \"features\": [\r\n                    {\r\n                        \"geometry\": {\r\n                            \"coordinates\": [\r\n                                1276435.2,\r\n                                242030.61,\r\n                                -1234\r\n                            ],\r\n                            \"type\": \"AnyCrsPoint\"\r\n                        },\r\n                        \"type\": \"AnyCrsFeature\"\r\n                    }\r\n                ],\r\n                \"persistableReferenceCrs\": {\r\n                    \"lateBoundCRS\": {\r\n                        \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"26782\"\r\n                        },\r\n                        \"type\": \"LBC\"\r\n                    },\r\n                    \"singleCT\": {\r\n                        \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"EPSG\",\r\n                            \"code\": \"15851\"\r\n                        },\r\n                        \"type\": \"ST\"\r\n                    },\r\n                    \"ver\": \"PE_10_3_1\",\r\n                    \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                    \"authCode\": {\r\n                        \"auth\": \"SLB\",\r\n                        \"code\": \"26782079\"\r\n                    },\r\n                    \"type\": \"EBC\"\r\n                },\r\n                \"persistableReferenceUnitZ\": {\r\n                    \"scaleOffset\": {\r\n                        \"scale\": 0.001,\r\n                        \"offset\": 0\r\n                    },\r\n                    \"symbol\": \"ms\",\r\n                    \"baseMeasurement\": {\r\n                        \"ancestry\": \"Time\",\r\n                        \"type\": \"UM\"\r\n                    },\r\n                    \"type\": \"USO\"\r\n                },\r\n                \"type\": \"AnyCrsFeatureCollection\"\r\n            },\r\n            \"locationWGS84\": {\r\n                \"features\": [\r\n                    {\r\n                        \"geometry\": {\r\n                            \"coordinates\": [\r\n                                [\r\n                                    [\r\n                                        -93.60387,\r\n                                        29.312752\r\n                                    ],\r\n                                    [\r\n                                        -93.58827,\r\n                                        29.306248\r\n                                    ],\r\n                                    [\r\n                                        -93.592354,\r\n                                        29.298727\r\n                                    ],\r\n                                    [\r\n                                        -93.60795,\r\n                                        29.305231\r\n                                    ],\r\n                                    [\r\n                                        -93.60387,\r\n                                        29.312752\r\n                                    ]\r\n                                ]\r\n                            ],\r\n                            \"type\": \"Polygon\"\r\n                        },\r\n                        \"properties\": {\r\n                            \"name\": \"Survey 4 INLINE_1_67_Srv3D_1_8_Original\"\r\n                        },\r\n                        \"type\": \"Feature\"\r\n                    }\r\n                ],\r\n                \"type\": \"FeatureCollection\"\r\n            },\r\n            \"name\": \"Survey 4 INLINE_1_67_Srv3D_1_8_Original\",\r\n            \"originalBulk\": {\r\n                \"size\": 2873437400,\r\n                \"type\": \"SEGY\",\r\n                \"url\": \"sd://SNTC/colors/test.segy\"\r\n            },\r\n            \"perimeters\": [\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        [\r\n                                            1276435.2,\r\n                                            242030.61\r\n                                        ],\r\n                                        [\r\n                                            1281357.8,\r\n                                            239567.36\r\n                                        ],\r\n                                        [\r\n                                            1280002.5,\r\n                                            236859.05\r\n                                        ],\r\n                                        [\r\n                                            1275080,\r\n                                            239322.28\r\n                                        ],\r\n                                        [\r\n                                            1276435.2,\r\n                                            242030.61\r\n                                        ]\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsPolygon\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ],\r\n                                \"perimeterType\": \"Full Fold Coverage\"\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"PROJCS[\\\"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-91.3333333333333],PARAMETER[\\\"Standard_Parallel_1\\\",29.3],PARAMETER[\\\"Standard_Parallel_2\\\",30.7],PARAMETER[\\\"Latitude_Of_Origin\\\",28.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",26782]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_StatePlane_Louisiana_South_FIPS_1702\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"26782\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus / Louisiana South [26782,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"26782079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                },\r\n                {\r\n                    \"features\": [\r\n                        {\r\n                            \"geometry\": {\r\n                                \"coordinates\": [\r\n                                    [\r\n                                        [\r\n                                            -93.60371,\r\n                                            29.312513\r\n                                        ],\r\n                                        [\r\n                                            -93.58811,\r\n                                            29.306007\r\n                                        ],\r\n                                        [\r\n                                            -93.59219,\r\n                                            29.298489\r\n                                        ],\r\n                                        [\r\n                                            -93.60779,\r\n                                            29.304993\r\n                                        ],\r\n                                        [\r\n                                            -93.60371,\r\n                                            29.312513\r\n                                        ]\r\n                                    ]\r\n                                ],\r\n                                \"type\": \"AnyCrsPolygon\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"ijNumbers\": [\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        1\r\n                                    ],\r\n                                    [\r\n                                        67,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        34\r\n                                    ],\r\n                                    [\r\n                                        1,\r\n                                        1\r\n                                    ]\r\n                                ],\r\n                                \"perimeterType\": \"Full Fold Coverage\"\r\n                            },\r\n                            \"type\": \"AnyCrsFeature\"\r\n                        }\r\n                    ],\r\n                    \"persistableReferenceCrs\": {\r\n                        \"lateBoundCRS\": {\r\n                            \"wkt\": \"GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433],AUTHORITY[\\\"EPSG\\\",4267]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"GCS_North_American_1927\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"4267\"\r\n                            },\r\n                            \"type\": \"LBC\"\r\n                        },\r\n                        \"singleCT\": {\r\n                            \"wkt\": \"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\r\n                            \"ver\": \"PE_10_3_1\",\r\n                            \"name\": \"NAD_1927_To_WGS_1984_79_CONUS\",\r\n                            \"authCode\": {\r\n                                \"auth\": \"EPSG\",\r\n                                \"code\": \"15851\"\r\n                            },\r\n                            \"type\": \"ST\"\r\n                        },\r\n                        \"ver\": \"PE_10_3_1\",\r\n                        \"name\": \"NAD27 * OGP-Usa Conus [4267,15851]\",\r\n                        \"authCode\": {\r\n                            \"auth\": \"SLB\",\r\n                            \"code\": \"4267079\"\r\n                        },\r\n                        \"type\": \"EBC\"\r\n                    },\r\n                    \"type\": \"AnyCrsFeatureCollection\"\r\n                }\r\n            ],\r\n            \"rangeAmplitudeMax\": {\r\n                \"unitKey\": \"amplitude\",\r\n                \"value\": 232467.8\r\n            },\r\n            \"rangeAmplitudeMin\": {\r\n                \"unitKey\": \"amplitude\",\r\n                \"value\": -226153.4\r\n            },\r\n            \"rangeCrosslineIncrement\": 1,\r\n            \"rangeCrosslineStart\": 1,\r\n            \"rangeCrosslineStop\": 34,\r\n            \"rangeInlineIncrement\": 1,\r\n            \"rangeInlineStart\": 1,\r\n            \"rangeInlineStop\": 67,\r\n            \"relationships\": {\r\n                \"binGrid\": {\r\n                    \"id\": \"slb:wke:binGrid-5067af51fe6542968ce8868c01af6cb7\"\r\n                },\r\n                \"seismicSurvey\": {\r\n                    \"id\": \"slb:wke:seismicSurvey3d-62d8fe58-c044-537a-b354-7f3f8e860421\",\r\n                    \"name\": \"ST2013-L\"\r\n                },\r\n                \"usesAssociations\": true\r\n            },\r\n            \"seismicProperty\": \"Instantaneous Amplitude\",\r\n            \"stackAngleRangeMax\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": 10\r\n            },\r\n            \"stackAngleRangeMin\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": 0\r\n            },\r\n            \"stackAzimuthRangeMax\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": 20\r\n            },\r\n            \"stackAzimuthRangeMin\": {\r\n                \"unitKey\": \"deg\",\r\n                \"value\": -20\r\n            },\r\n            \"stackOffsetRangeMax\": {\r\n                \"unitKey\": \"ftUS\",\r\n                \"value\": 3000\r\n            },\r\n            \"stackOffsetRangeMin\": {\r\n                \"unitKey\": \"ftUS\",\r\n                \"value\": 0\r\n            },\r\n            \"stackSubType\": \"Full\",\r\n            \"stackType\": \"Full\",\r\n            \"storageType\": \"32-BIT\",\r\n            \"textualFileHeader\": [\r\n                \"C 1 CLIENT COMPANY CREW NO                                                      C 2 LINE line1dS AREA MAP ID                                                    C 3 REEL NO DAY-START OF REEL YEAR OBSERVER                                     C 4 INSTRUMENT: DELPH MODEL xx SERIAL NO                                        C 5 DATA TRACES/RECORD 1 AUXILIARY TRACES/RECORD 0 CDP FOLD                     C 6 SAMPLE INTERVAL 333 SAMPLES/TRACE 1496 BITS/IN 16 BYTES/SAMPLE 2            C 7 RECORDING FORMAT FORMAT THIS REEL MEASUREMENT SYSTEM                        C 8 SAMPLE CODE: FIXED PT                                                       C 9 GAIN TYPE: FIXED                                                            C10 FILTERS: ALIAS 1500HZ NOTCH HZ BAND - HZ SLOPE - DB/OCT                     C11 SOURCE: TYPE NUMBER/POINT POINT INTERVAL                                    C12 PATTERN: LENGTH WIDTH                                                       C13 SWEEP: START HZ END HZ LENGTH MS CHANEL NO TYPE                             C14 TAPER: START LENGTH MS END LENGTH MS TYPE                                   C15 SPREAD: OFFSET MAX DISTANCE GROUP INTERVAL                                  C16 GEOPHONES: PER GROUP SPACING FREQUENCY MFG MODEL                            C17 PATTERN: LENGTH WIDTH                                                       C18 TRACES SORTED BY: RECORD                                                    C19 AMPLITUDE RECOVERY: NONE                                                    C20 MAP PROJECTION ZONE ID COORDINATE UNITS                                     C21 PROCESSING:                                                                 C22 PROCESSING:                                                                 C23                                                                             C24                                                                             C25                                                                             C26                                                                             C27                                                                             C28                                                                             C29                                                                             C30                                                                             C31                                                                             C32                                                                             C33                                                                             C34                                                                             C35                                                                             C36                                                                             C37                                                                             C38                                                                             C39                                                                             C40 END EBCDIC                                                                  \"\r\n            ],\r\n            \"verticalDomain\": \"Elevation time (two-way travel time)\",\r\n            \"verticalIncrement\": {\r\n                \"unitKey\": \"ms\",\r\n                \"value\": -4\r\n            },\r\n            \"verticalSampleCount\": 1000,\r\n            \"verticalStart\": {\r\n                \"unitKey\": \"ms\",\r\n                \"value\": 0\r\n            },\r\n            \"verticalStop\": {\r\n                \"unitKey\": \"ms\",\r\n                \"value\": -3996\r\n            },\r\n            \"vintage\": \"ST2013-InstantaneousAmplitude\",\r\n            \"waveType\": \"PP\"\r\n        },\r\n        \"kind\": \"{{datapartition}}:wks:seismic3d:1.0.5\",\r\n        \"legal\": {\r\n            \"legaltags\": [\r\n                \"{{legaltag01}}\"\r\n            ],\r\n            \"otherRelevantDataCountries\": [\r\n                \"US\",\r\n                \"BE\",\r\n                \"NO\",\r\n                \"IN\"\r\n            ]\r\n        },\r\n        \"meta\": [\r\n            {\r\n                \"kind\": \"Unit\",\r\n                \"name\": \"ft/s\",\r\n                \"persistableReference\": {\r\n                    \"scaleOffset\": {\r\n                        \"scale\": 0.3048,\r\n                        \"offset\": 0\r\n                    },\r\n                    \"symbol\": \"ft/s\",\r\n                    \"baseMeasurement\": {\r\n                        \"ancestry\": \"Velocity\",\r\n                        \"type\": \"UM\"\r\n                    },\r\n                    \"type\": \"USO\"\r\n                },\r\n                \"propertyNames\": [\r\n                    \"elevationReferenceTime.replacementVelocity.value\"\r\n                ]\r\n            },\r\n            {\r\n                \"kind\": \"Unit\",\r\n                \"name\": \"ftUS\",\r\n                \"persistableReference\": {\r\n                    \"scaleOffset\": {\r\n                        \"scale\": 0.3048006,\r\n                        \"offset\": 0\r\n                    },\r\n                    \"symbol\": \"ftUS\",\r\n                    \"baseMeasurement\": {\r\n                        \"ancestry\": \"Length\",\r\n                        \"type\": \"UM\"\r\n                    },\r\n                    \"type\": \"USO\"\r\n                },\r\n                \"propertyNames\": [\r\n                    \"stackOffsetRangeMin.value\",\r\n                    \"stackOffsetRangeMax.value\"\r\n                ]\r\n            },\r\n            {\r\n                \"kind\": \"DateTime\",\r\n                \"name\": \"datetime\",\r\n                \"persistableReference\": {\r\n                    \"format\": \"yyyy-MM-ddTHH:mm:ssZ\",\r\n                    \"timeZone\": \"UTC\",\r\n                    \"type\": \"DTM\"\r\n                },\r\n                \"propertyNames\": [\r\n                    \"dateCreated\",\r\n                    \"dateModified\"\r\n                ]\r\n            },\r\n            {\r\n                \"kind\": \"Measurement\",\r\n                \"name\": \"ShortTime\",\r\n                \"persistableReference\": {\r\n                    \"ancestry\": \"Time.Short_Time\",\r\n                    \"type\": \"UM\"\r\n                },\r\n                \"propertyNames\": [\r\n                    \"verticalDomain\"\r\n                ]\r\n            },\r\n            {\r\n                \"kind\": \"Unit\",\r\n                \"name\": \"ms\",\r\n                \"persistableReference\": {\r\n                    \"scaleOffset\": {\r\n                        \"scale\": 0.001,\r\n                        \"offset\": 0\r\n                    },\r\n                    \"symbol\": \"ms\",\r\n                    \"baseMeasurement\": {\r\n                        \"ancestry\": \"Time\",\r\n                        \"type\": \"UM\"\r\n                    },\r\n                    \"type\": \"USO\"\r\n                },\r\n                \"propertyNames\": [\r\n                    \"verticalStart.value\",\r\n                    \"verticalIncrement.value\",\r\n                    \"verticalStop.value\"\r\n                ]\r\n            },\r\n            {\r\n                \"kind\": \"Unit\",\r\n                \"name\": \"amplitude\",\r\n                \"persistableReference\": {\r\n                    \"scaleOffset\": {\r\n                        \"scale\": 1,\r\n                        \"offset\": 0\r\n                    },\r\n                    \"symbol\": \"----\",\r\n                    \"baseMeasurement\": {\r\n                        \"ancestry\": \"Dimensionless\",\r\n                        \"type\": \"UM\"\r\n                    },\r\n                    \"type\": \"USO\"\r\n                },\r\n                \"propertyNames\": [\r\n                    \"rangeAmplitudeMax.value\",\r\n                    \"rangeAmplitudeMin.value\"\r\n                ]\r\n            },\r\n            {\r\n                \"kind\": \"Unit\",\r\n                \"name\": \"ft\",\r\n                \"persistableReference\": {\r\n                    \"scaleOffset\": {\r\n                        \"scale\": 0.3048,\r\n                        \"offset\": 0\r\n                    },\r\n                    \"symbol\": \"ft\",\r\n                    \"baseMeasurement\": {\r\n                        \"ancestry\": \"Length\",\r\n                        \"type\": \"UM\"\r\n                    },\r\n                    \"type\": \"USO\"\r\n                },\r\n                \"propertyNames\": [\r\n                    \"elevationReferenceTime.elevationFromMsl.value\"\r\n                ]\r\n            },\r\n            {\r\n                \"kind\": \"Measurement\",\r\n                \"name\": \"seismicProperty\",\r\n                \"persistableReference\": {\r\n                    \"ancestry\": \"Dimensionless.Amplitude.Acoustic_Amplitude.Analytic_Trace.Instantaneous_Amplitude\",\r\n                    \"type\": \"UM\"\r\n                },\r\n                \"propertyNames\": [\r\n                    \"seismicProperty\"\r\n                ]\r\n            },\r\n            {\r\n                \"kind\": \"Unit\",\r\n                \"name\": \"deg\",\r\n                \"persistableReference\": {\r\n                    \"scaleOffset\": {\r\n                        \"scale\": 0.017453292,\r\n                        \"offset\": 0\r\n                    },\r\n                    \"symbol\": \"dega\",\r\n                    \"baseMeasurement\": {\r\n                        \"ancestry\": \"Plane_Angle\",\r\n                        \"type\": \"UM\"\r\n                    },\r\n                    \"type\": \"USO\"\r\n                },\r\n                \"propertyNames\": [\r\n                    \"stackAngleRangeMin.value\",\r\n                    \"stackAngleRangeMax.value\",\r\n                    \"stackAzimuthRangeMin.value\",\r\n                    \"stackAzimuthRangeMax.value\"\r\n                ]\r\n            }\r\n        ],\r\n        \"version\": 1040891613125385\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{testDataX1}}?path={{testDataX1path}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{testDataX1}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testDataX1path}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET DATASET X1 + SEISMIC META",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check content type\", function () {",
									"   pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"",
									"pm.test(\"Dataset name\", function () {",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"testDataX1\"));",
									"});",
									"",
									"pm.test(\"tenant\", function () {",
									"    pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"});",
									"",
									"pm.test(\"subproject\", function () {",
									"    pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"});",
									"",
									"pm.test(\"path\", function () {",
									"    pm.expect(jsonData.path).to.eql(\"/\"+pm.environment.get(\"testDataX1path\")+\"/\");",
									"});",
									"",
									"pm.test(\"ltag\", function () {",
									"    pm.expect(jsonData.ltag).to.eql(pm.environment.get('legaltag01'));",
									"});",
									"",
									"pm.test(\"Dates are present\", function () {",
									"    pm.expect(jsonData.created_date).to.exist;",
									"    pm.expect(jsonData.last_modified_date).to.exist;",
									"});",
									"",
									"pm.test(\"sbit_count\", function () {",
									"    pm.expect(jsonData.sbit_count).to.eql(1);",
									"});",
									"",
									"pm.test(\"sbit\", function () {",
									"    postman.setEnvironmentVariable(\"sbit\", jsonData.sbit);",
									"});",
									"",
									"pm.test(\"gcsurl\", () => {",
									"    postman.setEnvironmentVariable(\"gcsBucketName\", jsonData.gcsurl.split('/')[0]);",
									"    postman.setEnvironmentVariable(\"gcsObjectPrefix\", jsonData.gcsurl.split('/')[1]);",
									"})",
									"",
									"",
									"pm.test(\"Check seismicmetadata\", () => {",
									"    pm.expect(jsonData.seismicmeta).not.equal(null);",
									"    pm.expect(jsonData.seismicmeta.id).not.equal(null);",
									"    pm.expect(jsonData.seismicmeta.kind).to.eql(pm.environment.get('datapartition') + \":wks:seismic3d:1.0.5\");",
									"    pm.expect(jsonData.seismicmeta.acl).not.equal(null);",
									"    pm.expect(jsonData.seismicmeta.acl.viewers).not.equal(null);",
									"    pm.expect(jsonData.seismicmeta.acl.owners).not.equal(null);",
									"    pm.expect(jsonData.seismicmeta.legal).not.equal(null);",
									"    pm.expect(jsonData.seismicmeta.legal.legaltags).not.equal(null);",
									"    pm.expect(jsonData.seismicmeta.legal.otherRelevantDataCountries).to.contain(\"US\");",
									"    pm.expect(jsonData.seismicmeta.data.binNodePositions[0].features[0].geometry.coordinates[0][1]).to.equal(242030.61);",
									"    pm.expect(jsonData.seismicmeta.data.binNodePositions[0].features[0].geometry.type).to.equal(\"AnyCrsMultiPoint\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{testDataX1}}?path={{testDataX1path}}&seismicmeta=true",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{testDataX1}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testDataX1path}}"
								},
								{
									"key": "seismicmeta",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET CLOSE SBIT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"sbit_count\", function () {",
									"    pm.expect(jsonData.sbit_count).to.eql(0);",
									"});",
									"",
									"pm.test(\"sbit\", function () {",
									"    pm.expect(jsonData.sbit).to.eql(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"metadata\": { \"k1\": \"v1\", \"k2\": \"v2\", \"k3\": { \"k4\": \"v4\" } },\n\t\"filemetadata\": {\"type\": \"GENERIC\", \"size\": 1021 },\n\t\"last_modified_date\": true\n}"
						},
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{testDataX1}}?path={{testDataX1path}}&close={{sbit}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{testDataX1}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testDataX1path}}"
								},
								{
									"key": "close",
									"value": "{{sbit}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET GCS TOKEN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"gcstoken\", () => {",
									"    postman.setEnvironmentVariable(\"gcsAccessToken\", jsonData.access_token);",
									"});",
									"",
									"pm.test(\"Validate Subproject Details\", function () {",
									"    pm.expect(jsonData.access_token).to.exist;",
									"    pm.expect(jsonData.expires_in).to.eql(3599);",
									"    postman.setEnvironmentVariable(\"tokenType\", jsonData.token_type);",
									"    if (jsonData.token_type === 'SasUrl') {",
									"        postman.setNextRequest(\"UPLOAD OBJECT X1 IN ACS\");",
									"    } else {",
									"        pm.expect(jsonData.token_type).to.eql('Bearer');",
									"        postman.setNextRequest(\"UPLOAD OBJECT X1 IN GCS\");",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/utility/gcs-access-token?sdpath=sd://{{tenant}}/{{subproject}}&readonly=false",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"utility",
								"gcs-access-token"
							],
							"query": [
								{
									"key": "sdpath",
									"value": "sd://{{tenant}}/{{subproject}}"
								},
								{
									"key": "readonly",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UPLOAD OBJECT X1 IN GCS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"set crc32c code\", function () {",
									"    postman.setEnvironmentVariable(\"gcsXcrc32c\", jsonData.crc32c);",
									"});",
									"",
									"postman.setNextRequest(\"UTILITY CP X1 TO X2\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gcsAccessToken}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "text/plain",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "Add some text to validate data copy",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "https://www.googleapis.com/upload/storage/v1/b/{{gcsBucketName}}/o?uploadType=media&name={{gcsObjectPrefix}}%2FOBJX00",
							"protocol": "https",
							"host": [
								"www",
								"googleapis",
								"com"
							],
							"path": [
								"upload",
								"storage",
								"v1",
								"b",
								"{{gcsBucketName}}",
								"o"
							],
							"query": [
								{
									"key": "uploadType",
									"value": "media"
								},
								{
									"key": "name",
									"value": "{{gcsObjectPrefix}}%2FOBJX00"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UPLOAD OBJECT X1 IN ACS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Check content length\", function () {",
									"  pm.response.to.be.header(\"Content-Length\", \"0\");",
									"});",
									"",
									"postman.setNextRequest(\"UTILITY CP X1 TO X2\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"acsSasX1Url\", pm.variables.get(\"gcsAccessToken\").replace('?', '/' + pm.variables.get(\"gcsObjectPrefix\") + '/o?'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-ms-blob-type",
								"value": "BlockBlob",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "Add some text to validate data copy",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{acsSasX1Url}}",
							"host": [
								"{{acsSasX1Url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UTILITY CP X1 TO X2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/utility/cp?sdpath_from=sd://{{tenant}}/{{subproject}}/{{testDataX1path}}/{{testDataX1}}&sdpath_to=sd://{{tenant}}/{{subproject}}/{{testDataX2path}}/{{testDataX2}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"utility",
								"cp"
							],
							"query": [
								{
									"key": "sdpath_from",
									"value": "sd://{{tenant}}/{{subproject}}/{{testDataX1path}}/{{testDataX1}}"
								},
								{
									"key": "sdpath_to",
									"value": "sd://{{tenant}}/{{subproject}}/{{testDataX2path}}/{{testDataX2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET DATASET X2 + SEISMIC META",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check content type\", function () {",
									"   pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"",
									"pm.test(\"Dataset name\", function () {",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"testDataX2\"));",
									"});",
									"",
									"pm.test(\"tenant\", function () {",
									"    pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"});",
									"",
									"pm.test(\"subproject\", function () {",
									"    pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"});",
									"",
									"pm.test(\"path\", function () {",
									"    pm.expect(jsonData.path).to.eql(\"/\"+pm.environment.get(\"testDataX2path\")+\"/\");",
									"});",
									"",
									"pm.test(\"ltag\", function () {",
									"    pm.expect(jsonData.ltag).to.eql(pm.environment.get('legaltag01'));",
									"});",
									"",
									"pm.test(\"Dates are present\", function () {",
									"    pm.expect(jsonData.created_date).to.exist;",
									"    pm.expect(jsonData.last_modified_date).to.exist;",
									"});",
									"",
									"pm.test(\"sbit_count\", function () {",
									"    pm.expect(jsonData.sbit_count).to.eql(0);",
									"});",
									"",
									"pm.test(\"Verify gcsBucket\", function () {",
									"    pm.expect(jsonData.gcsurl.split('/')[0]).to.eql(pm.environment.get(\"gcsBucketName\"));",
									"});",
									"",
									"pm.test(\"Check seismicmetadata\", () => {",
									"    pm.expect(jsonData.seismicmeta).not.equal(null);",
									"    pm.expect(jsonData.seismicmeta.id).not.equal(null);",
									"    pm.expect(jsonData.seismicmeta.kind).to.eql(pm.environment.get('datapartition') + \":wks:seismic3d:1.0.5\");",
									"    pm.expect(jsonData.seismicmeta.acl).not.equal(null);",
									"    pm.expect(jsonData.seismicmeta.acl.viewers).not.equal(null);",
									"    pm.expect(jsonData.seismicmeta.acl.owners).not.equal(null);",
									"    pm.expect(jsonData.seismicmeta.legal).not.equal(null);",
									"    pm.expect(jsonData.seismicmeta.legal.legaltags).not.equal(null);",
									"    pm.expect(jsonData.seismicmeta.legal.otherRelevantDataCountries).to.contain(\"US\");",
									"    pm.expect(jsonData.seismicmeta.data.binNodePositions[0].features[0].geometry.coordinates[0][1]).to.equal(242030.61);",
									"    pm.expect(jsonData.seismicmeta.data.binNodePositions[0].features[0].geometry.type).to.equal(\"AnyCrsMultiPoint\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{testDataX2}}?path={{testDataX2path}}&seismicmeta=true",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{testDataX2}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testDataX2path}}"
								},
								{
									"key": "seismicmeta",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET GET X2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Dataset name\", function () {",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"testDataX2\"));",
									"});",
									"",
									"pm.test(\"Verify legalTag\", function () {",
									"    pm.expect(jsonData.ltag).to.eql(pm.environment.get(\"ltag\"));",
									"});",
									"",
									"pm.test(\"Verify gcsBucket\", function () {",
									"    pm.expect(jsonData.gcsurl.split('/')[0]).to.eql(pm.environment.get(\"gcsBucketName\"));",
									"});",
									"",
									"pm.test(\"Verify Tenant\", function () {",
									"    pm.expect(jsonData.tenant).to.eql(pm.environment.get(\"tenant\"));",
									"});",
									"",
									"pm.test(\"Verify subproject\", function () {",
									"    pm.expect(jsonData.subproject).to.eql(pm.environment.get(\"subproject\"));",
									"});",
									"",
									"pm.test(\"path\", function () {",
									"    pm.expect(jsonData.path).to.eql(\"/\"+pm.environment.get(\"testDataX2path\")+\"/\");",
									"});",
									"",
									"pm.test(\"gcsurl\", () => {",
									"    postman.setEnvironmentVariable(\"gcsBucketName\", jsonData.gcsurl.split('/')[0]);",
									"    postman.setEnvironmentVariable(\"gcsObjectPrefix\", jsonData.gcsurl.split('/')[1]);",
									"});",
									"",
									"if (pm.variables.get(\"tokenType\") == \"SasUrl\") {",
									"    postman.setNextRequest(\"DOWNLOAD X2 FROM ACS\");",
									"} else {",
									"    postman.setNextRequest(\"DOWNLOAD X2 FROM GCS\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{testDataX2}}?path={{testDataX2path}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{testDataX2}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testDataX2path}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DOWNLOAD X2 FROM GCS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check content type\", function () {",
									"  pm.response.to.be.header(\"Content-Type\", \"application/json; charset=UTF-8\");",
									"});",
									"",
									"pm.test(\"check crc32c code\", function () {",
									"    pm.expect(jsonData.crc32c).to.eql(pm.environment.get(\"gcsXcrc32c\"));",
									"});",
									"",
									"postman.setNextRequest(\"DATASET DELETE X1\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gcsAccessToken}}"
							}
						],
						"url": {
							"raw": "https://www.googleapis.com/storage/v1/b/{{gcsBucketName}}/o/{{gcsObjectPrefix}}%2FOBJX00",
							"protocol": "https",
							"host": [
								"www",
								"googleapis",
								"com"
							],
							"path": [
								"storage",
								"v1",
								"b",
								"{{gcsBucketName}}",
								"o",
								"{{gcsObjectPrefix}}%2FOBJX00"
							]
						}
					},
					"response": []
				},
				{
					"name": "DOWNLOAD X2 FROM ACS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check content type\", function () {",
									"  pm.response.to.be.header(\"Content-Type\", \"text/plain\");",
									"});",
									"",
									"pm.test(\"check blob type\", function () {",
									"    pm.expect(pm.response.headers.get(\"x-ms-blob-type\")).to.eql(\"BlockBlob\");",
									"});",
									"",
									"postman.setNextRequest(\"DATASET DELETE X1\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"acsSasX2Url\", pm.variables.get(\"gcsAccessToken\").replace('?', '/' + pm.variables.get(\"gcsObjectPrefix\") + '/o?'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{acsSasX2Url}}",
							"host": [
								"{{acsSasX2Url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET DELETE X1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{testDataX1}}?path={{testDataX1path}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{testDataX1}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testDataX1path}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DATASET DELETE X2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"if (pm.environment.get(\"VCS_Provider\") === 'gitlab') {",
									"    postman.setNextRequest(\"STATUS Finalized\");",
									"} else {",
									"    postman.setNextRequest(\"SUBPROJECT DELETE Finalized\");",
									"}; "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/dataset/tenant/{{tenant}}/subproject/{{subproject}}/dataset/{{testDataX2}}?path={{testDataX2path}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}",
								"dataset",
								"{{testDataX2}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{testDataX2path}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "cleanup",
			"item": [
				{
					"name": "SUBPROJECT DELETE Finalized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{STOKEN}}"
							},
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "appkey",
								"value": "{{DE_APP_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/subproject/tenant/{{tenant}}/subproject/{{subproject}}",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"subproject",
								"tenant",
								"{{tenant}}",
								"subproject",
								"{{subproject}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "STATUS Finalized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"service OK\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{SVC_API_KEY}}"
							}
						],
						"url": {
							"raw": "{{SVC_URL}}/svcstatus",
							"host": [
								"{{SVC_URL}}"
							],
							"path": [
								"svcstatus"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}